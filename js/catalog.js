/**
 * Catalog V2 - –ù–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ catalog-design-test.html
 */

class CatalogV2 {
    constructor() {
        this.overlay = null;
        this.isOpen = false;
        this.tracks = [];
        this.db = null;
        this.uploadSession = {
            instrumental: null,
            vocal: null,
            lyrics: null
        };
        
        this.init();
        console.log('üéµ CatalogV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    init() {
        this.overlay = document.getElementById('catalog-v2-overlay');
        
        if (!this.overlay) {
            console.error('‚ùå CatalogV2: Overlay –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        this.setupEventListeners();
        this.initDatabase();
    }
    
    initDatabase() {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const request = indexedDB.open('TextAppDB', 5);
        
        request.onsuccess = (event) => {
            this.db = event.target.result;
            console.log('üéµ CatalogV2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            this.loadTracksFromDB();
        };
        
        request.onerror = (event) => {
            console.error('‚ùå CatalogV2: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', event.target.error);
        };
    }
    
    async loadTracksFromDB() {
        if (!this.db) {
            console.error('‚ùå CatalogV2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return;
        }
        
        try {
            const transaction = this.db.transaction(['tracks'], 'readonly');
            const store = transaction.objectStore('tracks');
            const request = store.getAll();
            
            request.onsuccess = () => {
                this.tracks = request.result || [];
                console.log(`üéµ CatalogV2: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.tracks.length} —Ç—Ä–µ–∫–æ–≤`);
                this.renderMyMusic();
            };
            
            request.onerror = () => {
                console.error('‚ùå CatalogV2: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤');
            };
        } catch (error) {
            console.error('‚ùå CatalogV2: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    renderMyMusic() {
        const myMusicContent = this.overlay.querySelector('.my-music-content');
        if (!myMusicContent) {return;}
        
        if (this.tracks.length === 0) {
            myMusicContent.innerHTML = '<p class="empty-state">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–µ–∫–∏ —á–µ—Ä–µ–∑ "Upload Track" ‚Üí</p>';
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º/–∞–ª—å–±–æ–º–∞–º
        const groupedTracks = this.groupTracksByArtist();
        
        let html = '';
        for (const [artist, tracks] of Object.entries(groupedTracks)) {
            html += `
                <div class="artist-group">
                    <div class="artist-header" onclick="this.parentElement.classList.toggle('expanded')">
                        <span class="artist-name">üéµ ${artist}</span>
                        <span class="track-count">(${tracks.length})</span>
                        <span class="expand-icon">‚ñº</span>
                    </div>
                    <div class="artist-tracks">
                        ${tracks.map(track => `
                            <div class="track-item" data-track-id="${track.id}">
                                <span class="track-title">${track.title}</span>
                                <div class="track-actions">
                                    <button class="track-action-btn play-btn" title="–ò–≥—Ä–∞—Ç—å">‚ñ∂</button>
                                    <button class="track-action-btn add-btn" title="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç">‚ûï</button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }
        
        myMusicContent.innerHTML = html;
    }
    
    groupTracksByArtist() {
        const grouped = {};
        
        this.tracks.forEach(track => {
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            let artist = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
            
            if (track.artist) {
                artist = track.artist;
            } else if (track.title) {
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ü–µ—Å–Ω—è")
                const dashIndex = track.title.indexOf(' - ');
                if (dashIndex > 0) {
                    artist = track.title.substring(0, dashIndex);
                }
            }
            
            if (!grouped[artist]) {
                grouped[artist] = [];
            }
            grouped[artist].push(track);
        });
        
        return grouped;
    }
    
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testBtn = document.getElementById('catalog-v2-test-btn');
        if (testBtn) {
            testBtn.addEventListener('click', () => this.open());
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = document.getElementById('catalog-v2-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.close());
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        this.overlay.addEventListener('click', (e) => {
            if (e.target === this.overlay) {
                this.close();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isOpen) {
                this.close();
            }
        });
        
        // –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –¢–∞–±—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        this.setupTabsAndToggles();
    }
    
    setupTabsAndToggles() {
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–∞–º–∏ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
        this.overlay.addEventListener('click', (e) => {
            if (e.target.classList.contains('tab-btn')) {
                this.switchTab(e.target);
            }
            
            if (e.target.classList.contains('toggle-btn')) {
                this.switchToggle(e.target);
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç—Ä–µ–∫–æ–≤
            if (e.target.classList.contains('play-btn')) {
                this.playTrack(e.target);
            }
            
            if (e.target.classList.contains('add-btn')) {
                this.addToPlaylist(e.target);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Upload Mode
        this.setupUploadMode();
    }
    
    setupUploadMode() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –∏–Ω–ø—É—Ç–æ–≤
        ['instrumental', 'vocal', 'lyrics'].forEach(type => {
            const input = this.overlay.querySelector(`#${type}-input`);
            if (input) {
                input.addEventListener('change', (e) => {
                    if (e.target.files.length > 0) {
                        this.handleFileSelect(type, e.target.files[0]);
                    }
                });
            }
        });
        
        // Drag-and-drop –¥–ª—è upload cells
        this.overlay.querySelectorAll('.upload-cell').forEach(cell => {
            const type = cell.dataset.type;
            
            cell.addEventListener('dragover', (e) => {
                e.preventDefault();
                cell.classList.add('drag-over');
            });
            
            cell.addEventListener('dragleave', (e) => {
                if (!cell.contains(e.relatedTarget)) {
                    cell.classList.remove('drag-over');
                }
            });
            
            cell.addEventListener('drop', (e) => {
                e.preventDefault();
                cell.classList.remove('drag-over');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    this.handleFileSelect(type, files[0]);
                }
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const cancelBtn = this.overlay.querySelector('#upload-cancel');
        const saveBtn = this.overlay.querySelector('#upload-save');
        
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => this.cancelUpload());
        }
        
        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.saveTrack());
        }
    }
    
    switchTab(clickedTab) {
        const tabName = clickedTab.dataset.tab;
        
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        this.overlay.querySelectorAll('.tab-btn').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π
        this.overlay.querySelectorAll('.tab-panel').forEach(panel => {
            panel.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–± –∏ –ø–∞–Ω–µ–ª—å
        clickedTab.classList.add('active');
        const targetPanel = this.overlay.querySelector(`#${tabName}-panel`);
        if (targetPanel) {
            targetPanel.classList.add('active');
        }
        
        console.log(`üîÑ CatalogV2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ç–∞–± ${tabName}`);
    }
    
    switchToggle(clickedToggle) {
        const mode = clickedToggle.dataset.mode;
        
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
        this.overlay.querySelectorAll('.toggle-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã
        this.overlay.querySelectorAll('.search-mode-content, .upload-mode-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∏ —Ä–µ–∂–∏–º
        clickedToggle.classList.add('active');
        const targetContent = this.overlay.querySelector(`.${mode}-mode-content`);
        if (targetContent) {
            targetContent.classList.add('active');
        }
        
        console.log(`üîÑ CatalogV2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ä–µ–∂–∏–º ${mode}`);
    }
    
    playTrack(button) {
        const trackItem = button.closest('.track-item');
        if (!trackItem) {return;}
        
        const trackId = parseInt(trackItem.dataset.trackId);
        const track = this.tracks.find(t => t.id === trackId);
        
        if (!track) {
            console.error('‚ùå CatalogV2: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log(`üéµ CatalogV2: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç—Ä–µ–∫ "${track.title}" (ID: ${trackId})`);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
        this.close();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API
        if (window.trackCatalog && typeof window.trackCatalog.loadTrack === 'function') {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ TrackCatalog –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            const originalTrackIndex = window.trackCatalog.tracks.findIndex(t => t.id === trackId);
            if (originalTrackIndex !== -1) {
                console.log(`üéµ CatalogV2: –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å ${originalTrackIndex} –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ`);
                window.trackCatalog.loadTrack(originalTrackIndex);
            } else {
                console.error('‚ùå CatalogV2: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ');
            }
        } else {
            console.error('‚ùå CatalogV2: TrackCatalog API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            if (window.app && window.app.trackCatalog && typeof window.app.trackCatalog.loadTrack === 'function') {
                const originalTrackIndex = window.app.trackCatalog.tracks.findIndex(t => t.id === trackId);
                if (originalTrackIndex !== -1) {
                    console.log(`üéµ CatalogV2: –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å ${originalTrackIndex} –≤ app.trackCatalog`);
                    window.app.trackCatalog.loadTrack(originalTrackIndex);
                } else {
                    console.error('‚ùå CatalogV2: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ app.trackCatalog');
                }
            } else {
                console.error('‚ùå CatalogV2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π TrackCatalog API —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }
    }
    
    addToPlaylist(button) {
        const trackItem = button.closest('.track-item');
        if (!trackItem) {return;}
        
        const trackId = parseInt(trackItem.dataset.trackId);
        const track = this.tracks.find(t => t.id === trackId);
        
        if (!track) {
            console.error('‚ùå CatalogV2: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log(`‚ûï CatalogV2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ "${track.title}" –≤ –ø–ª–µ–π–ª–∏—Å—Ç`);
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º –ø–ª–µ–π–ª–∏—Å—Ç—ã
        button.textContent = '‚úÖ';
        button.disabled = true;
        
        setTimeout(() => {
            button.textContent = '‚ûï';
            button.disabled = false;
        }, 2000);
    }
    
    handleFileSelect(type, file) {
        console.log(`üìÅ CatalogV2: –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è ${type}:`, file.name);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ —Å–µ—Å—Å–∏–∏
        this.uploadSession[type] = file;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        const cell = this.overlay.querySelector(`[data-type="${type}"]`);
        if (cell) {
            cell.classList.add('has-file');
            const dropText = cell.querySelector('.drop-text');
            if (dropText) {
                dropText.textContent = `‚úÖ ${file.name}`;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
        this.updateSaveButton();
    }
    
    updateSaveButton() {
        const saveBtn = this.overlay.querySelector('#upload-save');
        if (!saveBtn) {return;}
        
        // –¢—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞
        const hasInstrumental = this.uploadSession.instrumental !== null;
        
        saveBtn.disabled = !hasInstrumental;
        
        if (hasInstrumental) {
            console.log('‚úÖ CatalogV2: –ì–æ—Ç–æ–≤ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ç—Ä–µ–∫–∞');
        }
    }
    
    cancelUpload() {
        console.log('‚ùå CatalogV2: –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        this.uploadSession = {
            instrumental: null,
            vocal: null,
            lyrics: null
        };
        
        // –û—á–∏—â–∞–µ–º UI
        this.overlay.querySelectorAll('.upload-cell').forEach(cell => {
            cell.classList.remove('has-file');
            const dropText = cell.querySelector('.drop-text');
            if (dropText) {
                const type = cell.dataset.type;
                const defaultTexts = {
                    instrumental: '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞',
                    vocal: '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞',
                    lyrics: '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ .txt –∏–ª–∏ .rtf —Ñ–∞–π–ª'
                };
                dropText.textContent = defaultTexts[type];
            }
        });
        
        // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –∏–Ω–ø—É—Ç—ã
        this.overlay.querySelectorAll('.file-input').forEach(input => {
            input.value = '';
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveBtn = this.overlay.querySelector('#upload-save');
        if (saveBtn) {
            saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–∫';
            saveBtn.disabled = true; // –û—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª–∞
        }
        
        this.updateSaveButton();
    }
    
    async saveTrack() {
        console.log('üíæ CatalogV2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞...');
        
        if (!this.uploadSession.instrumental) {
            console.error('‚ùå CatalogV2: –ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏');
            return;
        }
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const saveBtn = this.overlay.querySelector('#upload-save');
            if (saveBtn) {
                saveBtn.textContent = '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
                saveBtn.disabled = true;
            }
            
            console.log('üîß CatalogV2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...');
            
            // –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∫–∞–∫ ArrayBuffer
            const instrumentalData = await this.readFileAsArrayBuffer(this.uploadSession.instrumental);
            console.log('‚úÖ CatalogV2: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª –ø—Ä–æ—á–∏—Ç–∞–Ω');
            
            let vocalsData = null;
            if (this.uploadSession.vocal) {
                vocalsData = await this.readFileAsArrayBuffer(this.uploadSession.vocal);
                console.log('‚úÖ CatalogV2: –í–æ–∫–∞–ª –ø—Ä–æ—á–∏—Ç–∞–Ω');
            }
            
            // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            let lyricsContent = null;
            if (this.uploadSession.lyrics) {
                lyricsContent = await this.readFileAsText(this.uploadSession.lyrics);
                console.log('‚úÖ CatalogV2: –¢–µ–∫—Å—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω');
            }
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ TrackCatalog
            const trackData = {
                id: Date.now(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞–∫ –≤ TrackCatalog
                title: this.uploadSession.instrumental.name.replace(/\.[^/.]+$/, '').replace(/^(\d+[\s.-]+)/, ''),
                instrumentalData: instrumentalData,
                instrumentalType: this.uploadSession.instrumental.type,
                vocalsData: vocalsData,
                vocalsType: this.uploadSession.vocal ? this.uploadSession.vocal.type : null,
                lyricsFileName: this.uploadSession.lyrics ? this.uploadSession.lyrics.name : null,
                dateAdded: new Date().toISOString(),
                lyricsOriginalContent: lyricsContent
            };
            
            console.log('üìù CatalogV2: –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –≥–æ—Ç–æ–≤—ã:', trackData.title);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ TrackCatalog API
            if (window.trackCatalog && typeof window.trackCatalog._saveTrackToDB === 'function') {
                console.log('üîÑ CatalogV2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB...');
                
                const savedTrack = await window.trackCatalog._saveTrackToDB(trackData);
                console.log('‚úÖ CatalogV2: –¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ IndexedDB —Å ID:', savedTrack.id);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ TrackCatalog
                window.trackCatalog.tracks.push(savedTrack);
                console.log('‚úÖ CatalogV2: –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –≤ –Ω–æ–≤–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
                this.tracks.push(savedTrack);
                this.renderMyMusic();
                console.log('‚úÖ CatalogV2: UI –æ–±–Ω–æ–≤–ª–µ–Ω');
                
                this.showNotification(`‚úÖ –¢—Ä–µ–∫ "${savedTrack.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`);
                
            } else {
                console.error('‚ùå CatalogV2: TrackCatalog API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                this.showNotification('‚ùå –û—à–∏–±–∫–∞: TrackCatalog API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            this.cancelUpload();
            
        } catch (error) {
            console.error('‚ùå CatalogV2: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: ' + error.message);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            const saveBtn = this.overlay.querySelector('#upload-save');
            if (saveBtn) {
                saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–∫';
                saveBtn.disabled = false;
            }
        }
    }
    
    async readFileAsText(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(e);
            reader.readAsText(file);
        });
    }
    
    async readFileAsArrayBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(e);
            reader.readAsArrayBuffer(file);
        });
    }
    
    showNotification(message) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.app && typeof window.app.showNotification === 'function') {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É
            const type = message.startsWith('‚úÖ') ? 'success' : 
                        message.startsWith('‚ùå') ? 'error' : 'info';
            const cleanMessage = message.replace(/^[‚úÖ‚ùå‚ÑπÔ∏è]+\s*/, '');
            window.app.showNotification(cleanMessage, type);
        } else {
            // Fallback - console.log —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            const bgColor = message.startsWith('‚úÖ') ? 'background: #4CAF50; color: white;' :
                           message.startsWith('‚ùå') ? 'background: #f44336; color: white;' :
                           'background: #2196F3; color: white;';
            console.log(`%cüîî CatalogV2: ${message}`, bgColor + ' padding: 4px 8px; border-radius: 4px;');
        }
    }
    
    open() {
        if (!this.overlay) {return;}
        
        this.overlay.classList.remove('hidden');
        this.isOpen = true;
        
        console.log('üìÅ CatalogV2: Overlay –æ—Ç–∫—Ä—ã—Ç');
    }
    
    close() {
        if (!this.overlay) {return;}
        
        this.overlay.classList.add('hidden');
        this.isOpen = false;
        
        console.log('ÔøΩÔøΩ CatalogV2: Overlay –∑–∞–∫—Ä—ã—Ç');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.catalogV2 = new CatalogV2();
}); 