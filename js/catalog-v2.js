/**
 * Catalog V2 - –ù–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ catalog-design-test.html
 */

console.log('üîÑ –ó–ê–ì–†–£–ó–ö–ê: catalog-v2.js –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É...');

class CatalogV2 {
    constructor() {
        this.overlay = null;
        this.isOpen = false;
        this.tracks = [];
        this.db = null;
        this.myMusicIds = new Set();
        // –ü–ª–µ–π–ª–∏—Å—Ç—ã V1 (–≤ –ø–∞–º—è—Ç–∏)
        this.playlists = [];
        this.isBuildingPlaylist = false;
        this.currentPlaylist = [];
        this.currentPlaylistName = '–ù–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç';
        this.editingPlaylistId = null;
        this.uploadSession = {
            instrumental: null,
            vocal: null,
            lyrics: null
        };
        
        this.init();
        console.log('üéµ CatalogV2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    init() {
        this.overlay = document.getElementById('catalog-v2-overlay');
        
        if (!this.overlay) {
            console.error('‚ùå CatalogV2: Overlay –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        this.setupEventListeners();
        this.initDatabase();
        this.attachSearchHandlers();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞)
        this._initPlaylistsUI();
    }
    
    initDatabase() {
        const DB_NAME = (window.__DB_NAME || 'TextAppDB');
        const DB_VERSION = 6;
        const openMain = () => indexedDB.open(DB_NAME, DB_VERSION);
        const openRecovery = (name) => indexedDB.open(name, 1);

        const request = openMain();
        request.onupgradeneeded = (e) => {
            const db = e.target.result;
            if (!db.objectStoreNames.contains('tracks')) {
                const s = db.createObjectStore('tracks', { keyPath: 'id' });
                s.createIndex('title', 'title', { unique: false });
            }
            if (!db.objectStoreNames.contains('app_state')) {db.createObjectStore('app_state', { keyPath: 'key' });}
            if (!db.objectStoreNames.contains('temp_audio_files')) {db.createObjectStore('temp_audio_files', { keyPath: 'id' });}
            if (!db.objectStoreNames.contains('my_music')) {db.createObjectStore('my_music', { keyPath: 'trackId' });}
        };
        request.onsuccess = (event) => {
            this.db = event.target.result;
            console.log('üéµ CatalogV2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            this.loadTracksFromDB();
            this.loadMyMusicFromDB();
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
            this._loadPlaylistsFromDB();
        };
        request.onerror = () => {
            console.warn('‚ùå CatalogV2: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É...');
            const del = indexedDB.deleteDatabase(DB_NAME);
            del.onsuccess = () => {
                const retry = openMain();
                retry.onupgradeneeded = request.onupgradeneeded;
                retry.onsuccess = (ev2) => { this.db = ev2.target.result; this.loadTracksFromDB(); };
                retry.onerror = () => {
                    const recovery = (DB_NAME + '_Recovery_' + Date.now());
                    const rec = openRecovery(recovery);
                    rec.onupgradeneeded = (e3) => {
                        const db = e3.target.result;
                        const s = db.createObjectStore('tracks', { keyPath: 'id' });
                        s.createIndex('title', 'title', { unique: false });
                        db.createObjectStore('app_state', { keyPath: 'key' });
                        db.createObjectStore('temp_audio_files', { keyPath: 'id' });
                        db.createObjectStore('my_music', { keyPath: 'trackId' });
                    };
                    rec.onsuccess = (e3) => { this.db = e3.target.result; this.loadTracksFromDB(); };
                    rec.onerror = (e3) => console.error('üí• CatalogV2: Recovery DB open failed:', e3);
                };
            };
        };
    }
    
    async loadTracksFromDB() {
        if (!this.db) {
            console.error('‚ùå CatalogV2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return;
        }
        
        try {
            const transaction = this.db.transaction(['tracks'], 'readonly');
            const store = transaction.objectStore('tracks');
            const request = store.getAll();
            
            request.onsuccess = async () => {
                this.tracks = request.result || [];
                console.log(`üéµ CatalogV2: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.tracks.length} —Ç—Ä–µ–∫–æ–≤`);
                
                // –ï—Å–ª–∏ —Ç—Ä–µ–∫–æ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ fallback –±–∞–∑
                if (this.tracks.length === 0) {
                    await this._tryMigrateFromFallbackDBs();
                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
                    try {
                        const tx2 = this.db.transaction(['tracks'], 'readonly');
                        const st2 = tx2.objectStore('tracks');
                        const req2 = st2.getAll();
                        await new Promise((res, rej) => { req2.onsuccess = res; req2.onerror = rej; });
                        this.tracks = req2.result || [];
                        console.log(`üéµ CatalogV2: –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${this.tracks.length} —Ç—Ä–µ–∫–æ–≤`);
                    } catch (e) { console.warn('CatalogV2: reload after migrate failed', e); }
                }

                // üéØ –û–±–Ω–æ–≤–ª—è–µ–º "–ú–æ—é –º—É–∑—ã–∫—É" –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                this.renderMyMusic();
                
                // üéØ –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                if (window.trackCatalog && this.tracks.length > 0) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
                    this.tracks.forEach(track => {
                        const existsInMain = window.trackCatalog.tracks.find(t => t.id === track.id);
                        if (!existsInMain) {
                            window.trackCatalog.tracks.push(track);
                            console.log(`‚úÖ CatalogV2: –¢—Ä–µ–∫ "${track.title}" —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º`);
                        }
                    });
                }

                // üéØ –í—Å–µ–≥–¥–∞ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∞–≤—É—é –∫–æ–ª–æ–Ω–∫—É –ø–æ–∏—Å–∫–∞ –≤—Å–µ–º–∏ —Ç—Ä–µ–∫–∞–º–∏
                this.renderSearchAllTracks();
            };
            
            request.onerror = () => {
                console.error('‚ùå CatalogV2: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–æ–≤');
            };
        } catch (e) {
            console.error('‚ùå CatalogV2: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–æ–≤', e);
        }
    }

    async _tryMigrateFromFallbackDBs() {
        // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: —Å—Ç–∞—Ä–∞—è –ø—Ä–æ–¥/–¥–µ–≤ –±–∞–∑–∞. –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é
        const current = (window.__DB_NAME || 'TextAppDB');
        const candidates = ['TextAppDB', 'TextAppDB_DEV'].filter(n => n !== current);
        if (candidates.length === 0) {return;}
        for (const name of candidates) {
            try {
                const srcDb = await new Promise((resolve, reject) => {
                    const req = indexedDB.open(name);
                    req.onsuccess = (e) => resolve(e.target.result);
                    req.onerror = () => reject(new Error('open failed'));
                    req.onblocked = () => reject(new Error('open blocked'));
                });
                if (!srcDb || !srcDb.objectStoreNames.contains('tracks')) { try { srcDb.close(); } catch(_){}; continue; }

                const readAll = (db, storeName) => new Promise((resolve) => {
                    if (!db.objectStoreNames.contains(storeName)) { resolve([]); return; }
                    const tx = db.transaction([storeName], 'readonly');
                    const st = tx.objectStore(storeName);
                    const rq = st.getAll();
                    rq.onsuccess = () => resolve(rq.result || []);
                    rq.onerror = () => resolve([]);
                });

                const oldTracks = await readAll(srcDb, 'tracks');
                const oldMy = await readAll(srcDb, 'my_music');
                const hasData = (oldTracks && oldTracks.length) || (oldMy && oldMy.length);
                if (!hasData) { try { srcDb.close(); } catch(_){}; continue; }

                console.log(`üì¶ CatalogV2: –ú–∏–≥—Ä–∏—Ä—É—é –∏–∑ –±–∞–∑—ã ${name}: tracks=${oldTracks.length}, my_music=${oldMy.length||0}`);
                // –ó–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â—É—é –ë–î
                try {
                    const tx = this.db.transaction(['tracks','my_music'], 'readwrite');
                    const dstTracks = tx.objectStore('tracks');
                    const dstMy = tx.objectStore('my_music');
                    (oldTracks || []).forEach(t => { try { dstTracks.put(t); } catch(_) {} });
                    (oldMy || []).forEach(m => { try { dstMy.put(m); } catch(_) {} });
                    await new Promise((res, rej) => { tx.oncomplete = res; tx.onerror = rej; tx.onabort = rej; });
                } catch (e) {
                    console.warn('CatalogV2: –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å', e);
                }

                try { srcDb.close(); } catch(_){}
                // –ó–∞–≥—Ä—É–∂–∞–µ–º my_music –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
                await this.loadMyMusicFromDB();
                return; // –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π –±–∞–∑—ã
            } catch (e) {
                console.debug(`CatalogV2: migrate from ${name} skipped`, e?.message || e);
            }
        }
    }
    
    renderMyMusic() {
        const myMusicContent = this.overlay.querySelector('.my-music-content');
        if (!myMusicContent) {return;}
        
        // üéØ –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ "–ú–æ—é –º—É–∑—ã–∫—É"
        const allTracks = (window.trackCatalog && window.trackCatalog.tracks) ? window.trackCatalog.tracks : this.tracks;
        const myTracks = allTracks.filter(t => this.myMusicIds.has(t.id));
        
        if (myTracks.length === 0) {
            myMusicContent.innerHTML = '<p class="empty-state">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–µ–∫–∏ —á–µ—Ä–µ–∑ "Upload Track" ‚Üí</p>';
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º/–∞–ª—å–±–æ–º–∞–º
        const groupedTracks = this.groupTracksByArtist(myTracks);
        
        let html = '';
        for (const [artist, tracks] of Object.entries(groupedTracks)) {
            html += `
                <div class="artist-group">
                    <div class="artist-header" onclick="this.parentElement.classList.toggle('expanded')">
                        <span class="artist-name">üéµ ${artist}</span>
                        <span class="track-count">(${tracks.length})</span>
                        <span class="expand-icon">‚ñº</span>
                    </div>
                    <div class="artist-tracks">
                        ${tracks.map(track => `
                            <div class="track-item" data-track-id="${track.id}">
                                <span class="track-title">${track.title}</span>
                                <div class="track-actions">
                                    <button class="track-action-btn play-btn" title="–ò–≥—Ä–∞—Ç—å">‚ñ∂</button>
                                    <button class="track-action-btn add-btn" title="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç">‚ûï</button>
                                    <button class="track-action-btn delete-btn" title="–£–¥–∞–ª–∏—Ç—å –∏–∑ "–ú–æ–µ–π –º—É–∑—ã–∫–∏"">‚úï</button>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }
        
        myMusicContent.innerHTML = html;
        console.log(`üéµ CatalogV2: "–ú–æ—è –º—É–∑—ã–∫–∞" –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${myTracks.length} —Ç—Ä–µ–∫–æ–≤`);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ "–ú–æ–µ–π –º—É–∑—ã–∫–∏" (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        myMusicContent.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                e.stopPropagation();
                const item = e.currentTarget.closest('.track-item');
                const id = parseInt(item?.dataset?.trackId);
                if (!id || !this.db) {return;}
                await this.removeFromMyMusic(id);
                this.renderMyMusic();
            });
        });
    }

    // –†–µ–Ω–¥–µ—Ä –≤—Å–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ (–ø–∞–Ω–µ–ª—å –ü–æ–∏—Å–∫) –≤—Å–µ–º–∏ —Ç—Ä–µ–∫–∞–º–∏
    renderSearchAllTracks() {
        const searchResults = document.querySelector('.search-results');
        if (!searchResults) {return;}
        const source = (window.trackCatalog && window.trackCatalog.tracks) ? window.trackCatalog.tracks : this.tracks;
        searchResults.innerHTML = '';
        if (!source || source.length === 0) {
            searchResults.innerHTML = '<p class="empty-state">–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞</p>';
            return;
        }
        source.forEach(track => {
            const el = document.createElement('div');
            el.className = 'search-result-item track-item';
            el.setAttribute('data-track-id', track.id);
            el.innerHTML = `
                <div class="track-title">${track.title}</div>
                <div class="track-actions">
                    <button class="track-action-btn play-btn" data-track-id="${track.id}">‚ñ∂</button>
                    <button class="track-action-btn add-btn" data-track-id="${track.id}">‚ûï</button>
                    <button class="track-action-btn delete-btn" data-track-id="${track.id}" title="–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫">‚úï</button>
                </div>
            `;
            searchResults.appendChild(el);
        });
        console.log(`üéµ CatalogV2: –ü–æ–∏—Å–∫/–∫–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${source.length}`);
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    attachSearchHandlers() {
        const input = document.querySelector('.search-mode-content input[type="text"], .search-input');
        if (!input) {return;}
        input.addEventListener('input', () => {
            const q = (input.value || '').toLowerCase();
            const searchResults = document.querySelector('.search-results');
            if (!searchResults) {return;}
            const source = (window.trackCatalog && window.trackCatalog.tracks) ? window.trackCatalog.tracks : this.tracks;
            const filtered = !q ? source : source.filter(t => (t.title || '').toLowerCase().includes(q));
            searchResults.innerHTML = '';
            filtered.forEach(track => this.addTrackToSearchResults(track));
        });
    }
    
    // ===== PLAYLISTS V1 (—Ü–µ–Ω—Ç—Ä) =====
    _initPlaylistsUI() {
        try {
            const panel = this.overlay.querySelector('#playlists-panel');
            if (!panel) {return;}
            panel.innerHTML = `
                <div class="create-playlist-section">
                    <button class="create-playlist-btn" id="create-playlist-btn">
                        <span class="btn-icon">üìÇ</span>
                        <span class="btn-text">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç</span>
                    </button>
                </div>
                <div class="playlist-constructor" id="playlist-constructor" style="display:none;">
                    <div class="constructor-header">
                        <input type="text" class="playlist-name-input" id="playlist-name-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞..." value="–ù–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç" />
                        <div class="constructor-controls">
                            <button class="constructor-btn confirm-btn" id="confirm-playlist" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">‚úÖ</button>
                            <button class="constructor-btn cancel-btn" id="cancel-playlist" title="–û—Ç–º–µ–Ω–∏—Ç—å">‚ùå</button>
                        </div>
                    </div>
                    <div class="constructor-tracks" id="constructor-tracks">
                        <div class="drop-zone-message"><span class="drop-icon">üéµ</span><p>–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç—Ä–µ–∫–∏ –∫–Ω–æ–ø–∫–æ–π ‚ûï</p></div>
                    </div>
                    <div class="constructor-summary">
                        –¢—Ä–µ–∫–æ–≤: <span id="constructor-track-count">0</span>
                    </div>
                </div>
                <div class="saved-playlists" id="saved-playlists"></div>
            `;
        } catch(_) {}
    }

    _startPlaylistBuilding() {
        this.isBuildingPlaylist = true;
        this.currentPlaylist = [];
        this.editingPlaylistId = null;
        const ctor = this.overlay.querySelector('#playlist-constructor');
        const btn = this.overlay.querySelector('#create-playlist-btn');
        const nameInput = this.overlay.querySelector('#playlist-name-input');
        if (ctor) {ctor.style.display = 'flex';}
        if (btn) {btn.style.display = 'none';}
        if (nameInput) {nameInput.value = this.currentPlaylistName;}
        this._setPlusPulse(true);
        this._updatePlaylistSummary();
    }

    _cancelPlaylistBuilding() {
        this.isBuildingPlaylist = false;
        this.currentPlaylist = [];
        const ctor = this.overlay.querySelector('#playlist-constructor');
        const btn = this.overlay.querySelector('#create-playlist-btn');
        if (ctor) {ctor.style.display = 'none';}
        if (btn) {btn.style.display = 'flex';}
        this._setPlusPulse(false);
    }

    _confirmPlaylist() {
        if (!this.isBuildingPlaylist || this.currentPlaylist.length === 0) {
            alert('–î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç');
            return;
        }
        const nameEl = this.overlay.querySelector('#playlist-name-input');
        const name = (nameEl?.value || '–ù–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç').trim();
        if (this.editingPlaylistId) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            const idx = this.playlists.findIndex(p => p.id === this.editingPlaylistId);
            if (idx !== -1) {
                this.playlists[idx] = { id: this.editingPlaylistId, name, tracks: [...this.currentPlaylist] };
            }
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
            const data = { id: Date.now(), name, tracks: [...this.currentPlaylist] };
            this.playlists.push(data);
        }
        this._rerenderSavedPlaylists();
        this._savePlaylistsToDB();
        this._cancelPlaylistBuilding();
    }

    _renderSavedPlaylist(data) {
        const container = this.overlay.querySelector('#saved-playlists');
        if (!container) {return;}
        const total = data.tracks.length;
        const el = document.createElement('div');
        el.className = 'playlist-item';
        el.dataset.playlistId = String(data.id);
        el.innerHTML = `
            <div class="playlist-info">
                <div class="playlist-title">${data.name}</div>
                <div class="playlist-meta">${total} —Ç—Ä–µ–∫–æ–≤</div>
            </div>
            <div class="playlist-actions">
                <button class="playlist-action-btn edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                <button class="playlist-action-btn play-btn" title="–ò–≥—Ä–∞—Ç—å –ø–æ –æ—á–µ—Ä–µ–¥–∏">‚ñ∂Ô∏è</button>
                <button class="playlist-action-btn delete-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
            </div>
        `;
        el.querySelector('.edit-btn').addEventListener('click', (e) => {
            e.stopPropagation();
            this._openPlaylistEditor(data);
        });
        el.querySelector('.play-btn').addEventListener('click', (e) => {
            e.stopPropagation();
            try { this.close(); } catch(_) {}
            this._playPlaylistSequentially(data);
        });
        el.querySelector('.delete-btn').addEventListener('click', (e) => {
            e.stopPropagation();
            if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç "${data.name}"?`)) {
                el.remove();
                this.playlists = this.playlists.filter(p => p.id !== data.id);
                this._savePlaylistsToDB();
            }
        });
        container.prepend(el);
    }

    _updatePlaylistSummary() {
        const countEl = this.overlay.querySelector('#constructor-track-count');
        if (countEl) {countEl.textContent = String(this.currentPlaylist.length);}
    }

    _setPlusPulse(on) {
        try {
            const selector = '.add-btn, .add-to-playlist-btn, .add-to-setlist-btn';
            this.overlay.querySelectorAll(selector).forEach(btn => {
                if (on) {btn.classList.add('add-btn-pulse');} else {btn.classList.remove('add-btn-pulse');}
            });
        } catch(_) {}
    }

    _rerenderSavedPlaylists() {
        const container = this.overlay.querySelector('#saved-playlists');
        if (!container) {return;}
        container.innerHTML = '';
        [...this.playlists].reverse().forEach(p => this._renderSavedPlaylist(p));
    }

    // === Sequential playback (MVP) ===
    _playPlaylistSequentially(playlist) {
        if (!playlist || !Array.isArray(playlist.tracks) || playlist.tracks.length === 0) {return;}
        let index = 0;
        const playNext = () => {
            const t = playlist.tracks[index];
            if (!t) {return;}
            const all = (window.trackCatalog?.tracks || []);
            const candidate = all.find(x => (x.title || '').startsWith(t.title));
            if (!candidate) { index = (index + 1) % playlist.tracks.length; return playNext(); }
            const i = all.indexOf(candidate);
            window.trackCatalog.loadTrack(i, { autoplay: true, openSyncEditor: false }).then(() => {
                const ae = window.audioEngine;
                if (ae && typeof ae.onBothEnded === 'function') {
                    const unsub = ae.onBothEnded(() => {
                        if (typeof unsub === 'function') { try { unsub(); } catch(_) {} }
                        index = (index + 1) % playlist.tracks.length;
                        playNext();
                    });
                } else {
                    const duration = candidate.duration || 0;
                    setTimeout(() => { index = (index + 1) % playlist.tracks.length; playNext(); }, Math.max(500, duration * 1000));
                }
            });
        };
        playNext();
    }

    // === –†–µ–¥–∞–∫—Ç–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞ (DnD) ===
    _openPlaylistEditor(playlist) {
        // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.isBuildingPlaylist = true;
        this.currentPlaylist = [...playlist.tracks];
        this.currentPlaylistName = playlist.name;
        this.editingPlaylistId = playlist.id;
        const ctor = this.overlay.querySelector('#playlist-constructor');
        const btn = this.overlay.querySelector('#create-playlist-btn');
        if (btn) {btn.style.display = 'none';}
        if (ctor) {
            ctor.style.display = 'flex';
            const nameInput = this.overlay.querySelector('#playlist-name-input');
            if (nameInput) {nameInput.value = this.currentPlaylistName;}
            const list = this.overlay.querySelector('#constructor-tracks');
            if (list) {
                list.innerHTML = '';
                this.currentPlaylist.forEach(entry => {
                    const row = document.createElement('div');
                    row.className = 'constructor-track-item';
                    row.draggable = true;
                    row.dataset.trackId = entry.id;
                    row.innerHTML = `<span>${entry.title} - ${entry.artist || ''}</span><button class="remove-track-btn">‚ùå</button>`;
                    row.querySelector('.remove-track-btn').addEventListener('click', () => {
                        row.remove();
                        this.currentPlaylist = this.currentPlaylist.filter(t => t.id !== entry.id);
                        this._updatePlaylistSummary();
                    });
                    list.appendChild(row);
                });
                this._enableDnD(list);
            }
            this._updatePlaylistSummary();
        }
    }

    _enableDnD(listEl) {
        let dragEl = null;
        listEl.addEventListener('dragstart', (e) => {
            const li = e.target.closest('.constructor-track-item');
            if (!li) {return;}
            dragEl = li;
            li.classList.add('dragging');
            listEl.classList.add('drag-target');
            e.dataTransfer.effectAllowed = 'move';
        });
        listEl.addEventListener('dragend', () => {
            if (dragEl) {dragEl.classList.remove('dragging');}
            listEl.classList.remove('drag-target');
            dragEl = null;
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ currentPlaylist
            const order = Array.from(listEl.querySelectorAll('.constructor-track-item')).map(x => parseInt(x.dataset.trackId));
            const idToItem = new Map(this.currentPlaylist.map(x => [x.id, x]));
            this.currentPlaylist = order.map(id => idToItem.get(id)).filter(Boolean);
        });
        listEl.addEventListener('dragover', (e) => {
            e.preventDefault();
            const afterEl = this._getDragAfterElement(listEl, e.clientY);
            if (!dragEl) {return;}
            if (afterEl == null) {listEl.appendChild(dragEl);} else {listEl.insertBefore(dragEl, afterEl);}
        });
    }

    _getDragAfterElement(container, y) {
        const els = [...container.querySelectorAll('.constructor-track-item:not(.dragging)')];
        return els.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            const offset = y - box.top - box.height / 2;
            if (offset < 0 && offset > closest.offset) {return { offset, element: child };}
            else {return closest;}
        }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    // === Persistence for playlists ===
    _savePlaylistsToDB() {
        try {
            if (!this.db) {return;}
            const tx = this.db.transaction('app_state', 'readwrite');
            const store = tx.objectStore('app_state');
            store.put({ key: 'playlists_v1', value: this.playlists, lastUpdated: Date.now() });
        } catch (e) {
            console.warn('Playlist save failed, fallback to localStorage', e);
            try { localStorage.setItem('playlists_v1', JSON.stringify(this.playlists)); } catch(_) {}
        }
    }
    _loadPlaylistsFromDB() {
        try {
            const tx = this.db.transaction('app_state', 'readonly');
            const store = tx.objectStore('app_state');
            const req = store.get('playlists_v1');
            req.onsuccess = () => {
                const val = req.result?.value;
                if (Array.isArray(val)) {
                    this.playlists = val;
                    this._rerenderSavedPlaylists();
                } else {
                    // fallback from localStorage
                    try {
                        const ls = localStorage.getItem('playlists_v1');
                        if (ls) { this.playlists = JSON.parse(ls); this._rerenderSavedPlaylists(); }
                    } catch(_) {}
                }
            };
        } catch (e) {
            console.warn('Playlist load failed, fallback to localStorage', e);
            try {
                const ls = localStorage.getItem('playlists_v1');
                if (ls) { this.playlists = JSON.parse(ls); this._rerenderSavedPlaylists(); }
            } catch(_) {}
        }
    }
    
    groupTracksByArtist(tracksArray = null) {
        const grouped = {};
        const tracks = tracksArray || this.tracks;

        tracks.forEach(track => {
            let artist = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
            if (track && typeof track.artist === 'string' && track.artist.trim()) {
                artist = track.artist.trim();
            } else if (track && typeof track.title === 'string') {
                artist = this._extractArtistFromTitle(track.title) || artist;
            }
            if (!grouped[artist]) {grouped[artist] = [];}
            grouped[artist].push(track);
        });
        return grouped;
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –ü–µ—Å–Ω—è" —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏—Ä–µ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    _extractArtistFromTitle(title) {
        try {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏/–ø—Ä–æ–±–µ–ª—ã, —É–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã —Ç–∏–ø–∞ [-]
            const cleaned = String(title)
                .replace(/\s+\[.*\]$/u, '')
                .replace(/\s{2,}/g, ' ')
                .trim();
            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: -, ‚Äì (en dash), ‚Äî (em dash), ‚Äí (figure dash)
            const parts = cleaned.split(/\s*[\-‚Äì‚Äî‚Äí]\s+/u);
            if (parts.length >= 2 && parts[0].trim().length > 0) {
                return parts[0].trim();
            }
        } catch(_) {}
        return null;
    }
    
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testBtn = document.getElementById('catalog-v2-test-btn');
        if (testBtn) {
            testBtn.addEventListener('click', () => this.open());
        }
        
        // –°—Ç–∏–ª—å–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç)
        if (this.overlay) {
            this.overlay.addEventListener('click', (e) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –≤ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–µ—Å—Ç–∏–∫–∞
                const container = this.overlay.querySelector('.catalog-v2-container');
                if (container && e.target === container) {
                    const rect = container.getBoundingClientRect();
                    const clickX = e.clientX;
                    const clickY = e.clientY;
                    
                    // –û–±–ª–∞—Å—Ç—å –∫—Ä–µ—Å—Ç–∏–∫–∞ (top: 15px, right: 20px, —Ä–∞–∑–º–µ—Ä: 35px)
                    const closeAreaLeft = rect.right - 20 - 35;
                    const closeAreaTop = rect.top + 15;
                    const closeAreaRight = rect.right - 20;
                    const closeAreaBottom = rect.top + 15 + 35;
                    
                    if (clickX >= closeAreaLeft && clickX <= closeAreaRight &&
                        clickY >= closeAreaTop && clickY <= closeAreaBottom) {
                        this.close();
                        return;
                    }
                }
                
                // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
                if (e.target === this.overlay) {
                    this.close();
                }
            });
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isOpen) {
                this.close();
            }
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ IndexedDB ‚Äî —Å–∫—Ä—ã—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π; –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è clearIndexedDB –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        
        // –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –¢–∞–±—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
        this.setupTabsAndToggles();
    }
    
    setupTabsAndToggles() {
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–∞–º–∏ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
        this.overlay.addEventListener('click', (e) => {
            if (e.target.classList.contains('tab-btn')) {
                this.switchTab(e.target);
            }
            
            if (e.target.classList.contains('toggle-btn')) {
                this.switchToggle(e.target);
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç—Ä–µ–∫–æ–≤
            if (e.target.classList.contains('play-btn')) {
                this.playTrack(e.target);
            }
            
            if (e.target.classList.contains('add-btn')) {
                this.addToPlaylist(e.target);
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ –æ–±—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ (–ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü)
            if (e.target.classList.contains('delete-btn')) {
                const id = parseInt(e.target.dataset.trackId || e.target.closest('.track-item')?.dataset?.trackId);
                if (!id) {return;}
                this.deleteTrackFromCatalog(id);
            }

            // –ü–ª–µ–π–ª–∏—Å—Ç—ã: –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—á–µ—Ä–µ–∑ closest, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
            if (e.target.closest && e.target.closest('#create-playlist-btn')) {
                this._startPlaylistBuilding();
            }
            if (e.target.closest && e.target.closest('#confirm-playlist')) {
                this._confirmPlaylist();
            }
            if (e.target.closest && e.target.closest('#cancel-playlist')) {
                this._cancelPlaylistBuilding();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Upload Mode
        this.setupUploadMode();
    }
    
    setupUploadMode() {
        const fileInputs = {
            instrumental: document.getElementById('instrumental-input'),
            vocal: document.getElementById('vocal-input'),
            lyrics: document.getElementById('lyrics-input'),
            json: document.getElementById('json-input')
        };
        
        const uploadCells = {
            instrumental: document.querySelector('.upload-cell[data-type="instrumental"]'),
            vocal: document.querySelector('.upload-cell[data-type="vocal"]'),
            lyrics: document.querySelector('.upload-cell[data-type="lyrics"]'),
            json: document.querySelector('.upload-cell[data-type="json"]')
        };
        
        const saveButton = document.getElementById('upload-save');
        const cancelButton = document.getElementById('upload-cancel');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        Object.keys(fileInputs).forEach(type => {
            const input = fileInputs[type];
            const cell = uploadCells[type];
            
            if (input && cell) {
                // –ö–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
                cell.addEventListener('click', () => {
                    input.click();
                });
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                input.addEventListener('change', (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        this.handleFileSelect(type, file, cell);
                    }
                });
                
                // Drag & Drop
                cell.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    cell.classList.add('drag-over');
                });
                
                cell.addEventListener('dragleave', (e) => {
                    e.preventDefault();
                    cell.classList.remove('drag-over');
                });
                
                cell.addEventListener('drop', (e) => {
                    e.preventDefault();
                    cell.classList.remove('drag-over');
                    
                    const file = e.dataTransfer.files[0];
                    if (file) {
                        input.files = e.dataTransfer.files;
                        this.handleFileSelect(type, file, cell);
                    }
                });
            }
        });
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (saveButton) {
            saveButton.addEventListener('click', () => this.saveTrack());
        }
        
        if (cancelButton) {
            cancelButton.addEventListener('click', () => this.cancelUpload());
        }
    }
    
    switchTab(clickedTab) {
        const tabName = clickedTab.dataset.tab;
        
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        this.overlay.querySelectorAll('.tab-btn').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π
        this.overlay.querySelectorAll('.tab-panel').forEach(panel => {
            panel.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–± –∏ –ø–∞–Ω–µ–ª—å
        clickedTab.classList.add('active');
        const targetPanel = this.overlay.querySelector(`#${tabName}-panel`);
        if (targetPanel) {
            targetPanel.classList.add('active');
        }
        
        console.log(`üîÑ CatalogV2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ç–∞–± ${tabName}`);
    }
    
    switchToggle(clickedToggle) {
        const mode = clickedToggle.dataset.mode;
        
        // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
        this.overlay.querySelectorAll('.toggle-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã
        this.overlay.querySelectorAll('.search-mode-content, .upload-mode-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∏ —Ä–µ–∂–∏–º
        clickedToggle.classList.add('active');
        const targetContent = this.overlay.querySelector(`.${mode}-mode-content`);
        if (targetContent) {
            targetContent.classList.add('active');
        }
        
        console.log(`üîÑ CatalogV2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ä–µ–∂–∏–º ${mode}`);
    }
    
    playTrack(button) {
        const trackItem = button.closest('.track-item');
        if (!trackItem) {return;}
        
        const trackId = parseInt(trackItem.dataset.trackId);
        
        // –í—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä—Ç—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –ö–∞—Ä–∞–æ–∫–µ
        try {
            if (window.app && typeof window.app._activateKaraokeMode === 'function') {
                window.app._activateKaraokeMode();
            }
        } catch (_) {}

        // üéØ –ò–©–ï–ú —Ç—Ä–µ–∫ –≤ –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ú –º–∞—Å—Å–∏–≤–µ (–æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥ + –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ CatalogV2)
        let track = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
        if (window.trackCatalog && window.trackCatalog.tracks) {
            track = window.trackCatalog.tracks.find(t => t.id === trackId);
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º, –∏—â–µ–º –≤ CatalogV2
        if (!track) {
            track = this.tracks.find(t => t.id === trackId);
        }
        
        if (!track) {
            console.error('‚ùå CatalogV2: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–æ–∏—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö, ID:', trackId);
            this.showNotification('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log(`üéµ CatalogV2: –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç—Ä–µ–∫ "${track.title}" (ID: ${trackId})`);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
        this.close();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API
        if (window.trackCatalog && typeof window.trackCatalog.loadTrack === 'function') {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ TrackCatalog –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            const originalTrackIndex = window.trackCatalog.tracks.findIndex(t => t.id === trackId);
            if (originalTrackIndex !== -1) {
                console.log(`üéµ CatalogV2: –ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å ${originalTrackIndex} –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ`);
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –ö–∞—Ä–∞–æ–∫–µ
                try {
                    if (window.app && typeof window.app._activateKaraokeMode === 'function') {
                        window.app._activateKaraokeMode();
                    }
                } catch (_) {}
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è Sync Editor –∏ —Å –∞–≤—Ç–æ–ø–ª–µ–µ–º
                window.trackCatalog.loadTrack(originalTrackIndex, { openSyncEditor: false, autoplay: true });
            } else {
                console.error('‚ùå CatalogV2: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ');
                this.showNotification('‚ùå –¢—Ä–µ–∫ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º');
            }
        } else {
            console.error('‚ùå CatalogV2: TrackCatalog API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            this.showNotification('‚ùå TrackCatalog API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }
    
    addToPlaylist(button) {
        const trackItem = button.closest('.track-item');
        if (!trackItem) {return;}
        
        const trackId = parseInt(trackItem.dataset.trackId);
        
        // üéØ –ò–©–ï–ú —Ç—Ä–µ–∫ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ playTrack
        let track = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
        if (window.trackCatalog && window.trackCatalog.tracks) {
            track = window.trackCatalog.tracks.find(t => t.id === trackId);
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º, –∏—â–µ–º –≤ CatalogV2
        if (!track) {
            track = this.tracks.find(t => t.id === trackId);
        }
        
        if (!track) {
            console.error('‚ùå CatalogV2: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞, ID:', trackId);
            this.showNotification('‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –†–µ–∂–∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        if (this.isBuildingPlaylist) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –∏ –ø–æ–º–µ—á–∞–µ–º —á–µ–∫‚Äë–º–∞—Ä–∫–æ–π
            const entry = { id: track.id, title: track.title, artist: this._extractArtistFromTitle(track.title) || (track.artist || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å') };
            // –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ id
            if (!this.currentPlaylist.some(t => t.id === entry.id)) {
                this.currentPlaylist.push(entry);
                this._updatePlaylistSummary();
                // –ì–∞–ª–æ—á–∫–∞ –≤–º–µ—Å—Ç–æ –ø–ª—é—Å–∞ (–±–µ–∑ –º–∏–≥–∞–Ω–∏—è)
                button.textContent = '‚úÖ';
                button.disabled = true;
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
                const list = this.overlay.querySelector('#constructor-tracks');
                if (list) {
                    const row = document.createElement('div');
                    row.className = 'constructor-track-item';
                    row.innerHTML = `<span>${entry.title} - ${entry.artist}</span><button class="remove-track-btn">‚ùå</button>`;
                    row.querySelector('.remove-track-btn').addEventListener('click', () => {
                        row.remove();
                        this.currentPlaylist = this.currentPlaylist.filter(t => t.id !== entry.id);
                        this._updatePlaylistSummary();
                        // –í–µ—Ä–Ω—ë–º –ø–ª—é—Å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ, –µ—Å–ª–∏ –Ω–∞–π–¥—ë–º
                        const btn = this.overlay.querySelector(`.track-item[data-track-id="${entry.id}"] .add-btn`);
                        if (btn) { btn.textContent = '‚ûï'; btn.disabled = false; }
                    });
                    const placeholder = list.querySelector('.drop-zone-message');
                    if (placeholder) {placeholder.style.display = 'none';}
                    list.appendChild(row);
                }
            }
            return;
        }

        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ "–ú–æ—é –º—É–∑—ã–∫—É"
        console.log(`‚ûï CatalogV2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ "${track.title}" –≤ "–ú–æ—é –º—É–∑—ã–∫—É"`);
        this.addToMyMusic(trackId).then(() => {
            this.renderMyMusic();
            this.showNotification(`‚úÖ –¢—Ä–µ–∫ "${track.title}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ú–æ—é –º—É–∑—ã–∫—É"`);
            // –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–∏–¥–±–µ–∫
        button.textContent = '‚úÖ';
            setTimeout(() => { button.textContent = '‚ûï'; }, 1200);
        });
    }
    
    handleFileSelect(type, file, cell) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        cell.classList.add('processing');
        
        setTimeout(() => {
            cell.classList.remove('processing');
            cell.classList.add('file-selected');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —è—á–µ–π–∫–∏
            this.updateCellUI(cell, file);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ —Å–µ—Å—Å–∏—é
            if (type === 'instrumental') {
                this.uploadSession.instrumental = file;
            } else if (type === 'vocal') {
                this.uploadSession.vocal = file;
            } else if (type === 'lyrics') {
                this.uploadSession.lyrics = file;
            } else if (type === 'json') {
                this.uploadSession.json = file;
                // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å
                this.readFileAsText(file).then(text => {
                    try {
                        const data = JSON.parse(text);
                        if (Array.isArray(data)) {
                            this.uploadSession.jsonMarkers = data;
                        } else if (data && Array.isArray(data.markers)) {
                            this.uploadSession.jsonMarkers = data.markers;
                        } else {
                            this.showNotification('‚ùå JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ markers');
                            this.uploadSession.jsonMarkers = null;
                        }
                    } catch (e) {
                        console.error('JSON parse error:', e);
                        this.showNotification('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–∞–π–ª');
                        this.uploadSession.jsonMarkers = null;
                    }
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            this.updateSaveButton();
            
            console.log(`üéµ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è ${type}:`, file.name);
        }, 800);
    }
    
    updateCellUI(cell, file) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —è—á–µ–π–∫–µ
        const dropText = cell.querySelector('.drop-text');
        if (dropText) {
            dropText.textContent = '‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        let fileName = cell.querySelector('.file-name');
        if (!fileName) {
            fileName = document.createElement('div');
            fileName.className = 'file-name';
            cell.appendChild(fileName);
        }
        fileName.textContent = file.name;
    }
    
    updateSaveButton() {
        const saveButton = document.getElementById('upload-save');
        if (saveButton) {
            const hasInstrumental = this.uploadSession.instrumental !== null;
            saveButton.disabled = !hasInstrumental;
            
            if (hasInstrumental) {
                saveButton.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–∫';
            } else {
                saveButton.textContent = 'üíæ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª';
            }
        }
    }
    
    cancelUpload() {
        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        this.uploadSession = {
            instrumental: null,
            vocal: null,
            lyrics: null
        };
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º UI –≤—Å–µ—Ö —è—á–µ–µ–∫
        const cells = document.querySelectorAll('.upload-cell');
        cells.forEach(cell => {
            cell.classList.remove('file-selected', 'processing');
            
            const dropText = cell.querySelector('.drop-text');
            const fileLabel = cell.querySelector('.file-label');
            const fileName = cell.querySelector('.file-name');
            
            if (dropText) {
                dropText.textContent = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞';
            }
            
            if (fileName) {
                fileName.remove();
            }
        });
        
        // –û—á–∏—â–∞–µ–º input'—ã
        const inputs = document.querySelectorAll('.upload-mode-content .file-input');
        inputs.forEach(input => {
            input.value = '';
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.updateSaveButton();
        
        console.log('üîÑ Upload session —Å–±—Ä–æ—à–µ–Ω–∞');
    }
    
    async saveTrack() {
        console.log('üíæ CatalogV2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞...');
        
        if (!this.uploadSession.instrumental) {
            this.showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –¥–æ—Ä–æ–∂–∫—É');
            return;
        }
        
        // üéØ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (!window.trackCatalog.db) {
            console.warn('üîÑ CatalogV2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, –æ–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
            
            // –ñ–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
            let attempts = 0;
            const maxAttempts = 50; // 50 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 100–º—Å = 5 —Å–µ–∫—É–Ω–¥
            
            while (!window.trackCatalog.db && attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, 100));
                attempts++;
                console.log(`üîÑ CatalogV2: –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
            }
            
            if (!window.trackCatalog.db) {
                console.error('‚ùå CatalogV2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å –∑–∞ 5 —Å–µ–∫—É–Ω–¥');
                this.showNotification('‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return;
            }
            
            console.log('‚úÖ CatalogV2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!');
        }
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const saveBtn = document.getElementById('upload-save');
            if (saveBtn) {
                saveBtn.textContent = '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
                saveBtn.disabled = true;
            }
            
            console.log('üîß CatalogV2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...');
            
            // –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            const instrumentalData = await this.readFileAsArrayBuffer(this.uploadSession.instrumental);
            const instrumentalType = this.uploadSession.instrumental.type;
            
            let vocalsData = null;
            let vocalsType = null;
            if (this.uploadSession.vocal) {
                vocalsData = await this.readFileAsArrayBuffer(this.uploadSession.vocal);
                vocalsType = this.uploadSession.vocal.type;
                console.log('‚úÖ CatalogV2: –í–æ–∫–∞–ª –ø—Ä–æ—á–∏—Ç–∞–Ω');
            }
            
            let lyricsFileName = null;
            let lyricsOriginalContent = null;
            if (this.uploadSession.lyrics) {
                lyricsOriginalContent = await this.readFileAsText(this.uploadSession.lyrics);
                lyricsFileName = this.uploadSession.lyrics.name;
                console.log('‚úÖ CatalogV2: –¢–µ–∫—Å—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω');
            }
            
            console.log('‚úÖ CatalogV2: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª –ø—Ä–æ—á–∏—Ç–∞–Ω');
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–∫–∞
            const trackTitle = this.uploadSession.instrumental.name.replace(/\.[^/.]+$/, "");
            const trackData = {
                id: Date.now(),
                title: trackTitle,
                instrumentalData: instrumentalData,
                instrumentalType: instrumentalType,
                vocalsData: vocalsData,
                vocalsType: vocalsType,
                lyricsFileName: lyricsFileName,
                dateAdded: new Date().toISOString(),
                lyricsOriginalContent: lyricsOriginalContent,
                // üéØ –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                blocksData: [],
                lyrics: lyricsOriginalContent, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ lyrics = –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
                lastModified: new Date().toISOString(),
                // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã JSON ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö —Å—Ä–∞–∑—É
                syncMarkers: Array.isArray(this.uploadSession?.jsonMarkers) ? this.uploadSession.jsonMarkers : []
            };
            
            console.log('üìù CatalogV2: –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –≥–æ—Ç–æ–≤—ã:', trackTitle);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
            console.log('üîÑ CatalogV2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB...');
            const savedTrack = await window.trackCatalog._saveTrackToDB(trackData);
            console.log('‚úÖ CatalogV2: –¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ IndexedDB —Å ID:', savedTrack.id);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
            window.trackCatalog.tracks.push(savedTrack);
            this.tracks.push(savedTrack);
            console.log('‚úÖ CatalogV2: –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤');

            // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –≤ UI —Å—Ä–∞–∑—É
            try {
                if (savedTrack.syncMarkers && savedTrack.syncMarkers.length > 0 && window.markerManager) {
                    window.markerManager.setMarkers(savedTrack.syncMarkers);
                }
            } catch (e) { console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã –∏–∑ JSON —Å—Ä–∞–∑—É:', e); }

            // üéØ –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –∞ –ù–ï –≤ "–ú–æ—é –º—É–∑—ã–∫—É"
            this.addTrackToSearchResults(savedTrack);
            console.log('‚úÖ CatalogV2: –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification(`‚úÖ –¢—Ä–µ–∫ "${trackTitle}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`);
            console.log('üîî CatalogV2: ‚úÖ –¢—Ä–µ–∫ "' + trackTitle + '" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            this.cancelUpload();
            
            // üéØ –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –µ—Å—Ç—å JSON –º–∞—Ä–∫–µ—Ä—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–ª–æ–∫–æ–≤ –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —Ç—Ä–µ–∫ –Ω–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞–µ–º
            const hasJsonMarkers = Array.isArray(savedTrack?.syncMarkers) && savedTrack.syncMarkers.length > 0;
            if (hasJsonMarkers) {
                console.log('‚úÖ CatalogV2: JSON –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–ª–æ–∫–æ–≤. –¢—Ä–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–æ–∏—Å–∫–µ –∏ "–ú–æ–µ–π –º—É–∑—ã–∫–µ" (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ).');
                try {
                    // –ú–∞—Ä–∫–µ—Ä—ã —É–∂–µ –≤ savedTrack.syncMarkers ‚Äî –ø—Ä–∏–º–µ–Ω–∏–º —Ü–≤–µ—Ç–∞ –æ—Ç –±–ª–æ–∫–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç)
                    if (window.markerManager) {
                        window.markerManager.setMarkers(savedTrack.syncMarkers);
                        window.markerManager.updateMarkerColors();
                    }
                    // –ï—Å–ª–∏ LyricsDisplay —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç textBlocks (—Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Ä–∫–µ—Ä–æ–≤), –≤–∫–ª—é—á–∏–º —Ä–µ–ø–µ—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π UI
                    if (window.lyricsDisplay && Array.isArray(window.lyricsDisplay.textBlocks) && window.lyricsDisplay.textBlocks.length > 0) {
                        if (typeof window.lyricsDisplay.activateRehearsalDisplay === 'function') {
                            window.lyricsDisplay.activateRehearsalDisplay();
                        }
                    }
                } catch (e) { console.warn('CatalogV2: post-save JSON handling failed', e); }
                this.switchToSearch();
                this.addTrackToSearchResults(savedTrack);
                return; // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
            } else {
                // –ò–Ω–∞—á–µ ‚Äî —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–ª–æ–∫–æ–≤
                console.log('üéØ CatalogV2: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–ª–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫–∞');
                setTimeout(() => {
                    this.openBlockEditorForTrack(savedTrack);
                }, 500);
            }
            
        } catch (error) {
            console.error('‚ùå CatalogV2: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            const saveBtn = document.getElementById('upload-save');
            if (saveBtn) {
                saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–∫';
                saveBtn.disabled = false;
            }
        }
    }
    
    // üéØ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    addTrackToSearchResults(track) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        this.switchToggle(document.querySelector('.toggle-btn[data-mode="search"]'));
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        const searchResults = document.querySelector('.search-results');
        if (!searchResults) {return;}
        
        // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const emptyState = searchResults.querySelector('.empty-state');
        if (emptyState) {
            emptyState.style.display = 'none';
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç—Ä–µ–∫–∞
        const trackElement = document.createElement('div');
        trackElement.className = 'search-result-item track-item';
        trackElement.setAttribute('data-track-id', track.id); // üéØ –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º ID —Ç—Ä–µ–∫–∞
        trackElement.innerHTML = `
            <div class="track-title">${track.title}</div>
            <div class="track-actions">
                <button class="track-action-btn play-btn" data-track-id="${track.id}">‚ñ∂</button>
                <button class="track-action-btn add-btn" data-track-id="${track.id}">‚ûï</button>
                <button class="track-action-btn delete-btn" data-track-id="${track.id}" title="–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫">‚úï</button>
            </div>
        `;
        
        // üéØ –í–ê–ñ–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        if (searchResults.firstChild && !searchResults.firstChild.classList?.contains('empty-state')) {
            searchResults.insertBefore(trackElement, searchResults.firstChild);
        } else {
            searchResults.appendChild(trackElement);
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        trackElement.style.opacity = '0';
        trackElement.style.transform = 'translateY(-10px)';
        setTimeout(() => {
            trackElement.style.transition = 'all 0.3s ease';
            trackElement.style.opacity = '1';
            trackElement.style.transform = 'translateY(0)';
        }, 100);
    }

    // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ –æ–±—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ (IndexedDB + UI)
    async deleteTrackFromCatalog(trackId) {
        try {
            if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞?')) {return;}
            // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î —Ç—Ä–µ–∫–æ–≤
            if (window.trackCatalog && typeof window.trackCatalog.deleteTrack === 'function') {
                // deleteTrack –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∏ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI
                window.trackCatalog.deleteTrack(trackId);
            }
            // –£–¥–∞–ª—è–µ–º –∏–∑ "–ú–æ–µ–π –º—É–∑—ã–∫–∏", –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            try { await this.removeFromMyMusic(trackId); } catch(_) {}
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ DOM (–ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏)
            try {
                const item = document.querySelector(`.search-results .track-item[data-track-id="${trackId}"]`);
                if (item && item.parentElement) {item.parentElement.removeChild(item);}
            } catch(_) {}
            // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ (–¥–∞—ë–º IndexedDB –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é)
            setTimeout(() => this.renderSearchAllTracks(), 200);
            try { this.renderMyMusic(); } catch(_) {}
            this.showNotification('‚úÖ –¢—Ä–µ–∫ —É–¥–∞–ª—ë–Ω');
        } catch (err) {
            console.error('‚ùå CatalogV2: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫', err);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞');
        }
    }
    
    // üóëÔ∏è –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò IndexedDB
    async clearIndexedDB() {
        console.log('üóëÔ∏è CatalogV2: –û—á–∏—Å—Ç–∫–∞ IndexedDB...');
        
        try {
            const deleteRequest = indexedDB.deleteDatabase('TextAppDB');
            
            deleteRequest.onsuccess = () => {
                console.log('‚úÖ CatalogV2: IndexedDB –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
                this.showNotification('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            };
            
            deleteRequest.onerror = (event) => {
                console.error('‚ùå CatalogV2: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ IndexedDB:', event);
                this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
            };
            
        } catch (error) {
            console.error('‚ùå CatalogV2: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
        }
    }
    
    // üéØ –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –±–ª–æ–∫–æ–≤ –¥–ª—è —Ç—Ä–µ–∫–∞
    async openBlockEditorForTrack(track) {
        console.log('üéØ CatalogV2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –±–ª–æ–∫–æ–≤ –¥–ª—è —Ç—Ä–µ–∫–∞:', track.title);
        
        try {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
            this.close();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            console.log('üîÑ CatalogV2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
            await this.loadTrackIntoApp(track);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            const startTs = performance.now();
            const maxWaitMs = 5000;
            const waitReady = async () => {
                const ready = window.waveformEditor
                    && typeof window.waveformEditor._openNewBlockEditor === 'function'
                    && window.waveformEditor.currentTrackId === track.id;
                if (ready) {
                    console.log('üéØ CatalogV2: WaveformEditor –≥–æ—Ç–æ–≤. –û—Ç–∫—Ä—ã–≤–∞–µ–º Block Editor');
                    window.waveformEditor._openNewBlockEditor();
                    return;
                }
                if (performance.now() - startTs > maxWaitMs) {
                    console.warn('‚ö†Ô∏è CatalogV2: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ WaveformEditor –¥–ª—è Block Editor');
                    this.showNotification('‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–æ—Ä –±–ª–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è');
                    return;
                }
                setTimeout(waitReady, 150);
            };
            waitReady();
            
        } catch (error) {
            console.error('‚ùå CatalogV2: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –±–ª–æ–∫–æ–≤:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –±–ª–æ–∫–æ–≤');
        }
    }
    
    // üîÑ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    async loadTrackIntoApp(track) {
        if (!window.trackCatalog || typeof window.trackCatalog.loadTrack !== 'function') {
            throw new Error('TrackCatalog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        // üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú –¢–†–ï–ö–ò –ò–ó –ë–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–•
        console.log('üîÑ CatalogV2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ IndexedDB –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤...');
        await window.trackCatalog._loadTracksFromDB();
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
        const trackIndex = window.trackCatalog.tracks.findIndex(t => t.id === track.id);
        if (trackIndex === -1) {
            throw new Error('–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ');
        }
        
        // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï –ë–õ–û–ö–û–í –í –¢–†–ï–ö–ï
        const foundTrack = window.trackCatalog.tracks[trackIndex];
        console.log(`üîç CatalogV2: –ù–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ "${foundTrack.title}":`, {
            hasBlocksData: !!foundTrack.blocksData,
            blocksCount: foundTrack.blocksData ? foundTrack.blocksData.length : 0,
            hasLyrics: !!foundTrack.lyrics,
            lastModified: foundTrack.lastModified
        });
        
        console.log(`üîÑ CatalogV2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${trackIndex}`);
        await window.trackCatalog.loadTrack(trackIndex);
        
        return trackIndex;
    }
    
    async readFileAsText(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(e);
            reader.readAsText(file);
        });
    }
    
    async readFileAsArrayBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(e);
            reader.readAsArrayBuffer(file);
        });
    }
    
    showNotification(message) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (window.app && typeof window.app.showNotification === 'function') {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É
            const type = message.startsWith('‚úÖ') ? 'success' : 
                        message.startsWith('‚ùå') ? 'error' : 'info';
            const cleanMessage = message.replace(/^[‚úÖ‚ùå‚ÑπÔ∏è]+\s*/, '');
            window.app.showNotification(cleanMessage, type);
        } else {
            // Fallback - console.log —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            const bgColor = message.startsWith('‚úÖ') ? 'background: #4CAF50; color: white;' :
                           message.startsWith('‚ùå') ? 'background: #f44336; color: white;' :
                           'background: #2196F3; color: white;';
            console.log(`%cüîî CatalogV2: ${message}`, bgColor + ' padding: 4px 8px; border-radius: 4px;');
        }
    }
    
    open() {
        if (!this.overlay) {return;}
        
        this.overlay.classList.remove('hidden');
        this.isOpen = true;
        
        console.log('üìÅ CatalogV2: Overlay –æ—Ç–∫—Ä—ã—Ç');
    }
    
    close() {
        if (!this.overlay) {return;}
        
        this.overlay.classList.add('hidden');
        this.isOpen = false;
        
        console.log('üîÑ CatalogV2: Overlay –∑–∞–∫—Ä—ã—Ç');
    }

    async loadMyMusicFromDB() {
        if (!this.db) {return;}
        try {
            const tx = this.db.transaction(['my_music'], 'readonly');
            const store = tx.objectStore('my_music');
            const req = store.getAll();
            req.onsuccess = () => {
                const rows = req.result || [];
                this.myMusicIds = new Set(rows.map(r => r.trackId));
                this.renderMyMusic();
            };
        } catch(_) {}
    }

    async addToMyMusic(trackId) {
        if (!this.db || !trackId) {return;}
        try {
            const tx = this.db.transaction(['my_music'], 'readwrite');
            const store = tx.objectStore('my_music');
            store.put({ trackId, addedAt: new Date().toISOString() });
            this.myMusicIds.add(trackId);
        } catch(_) {}
    }

    async removeFromMyMusic(trackId) {
        if (!this.db || !trackId) {return;}
        try {
            const tx = this.db.transaction(['my_music'], 'readwrite');
            const store = tx.objectStore('my_music');
            store.delete(trackId);
            this.myMusicIds.delete(trackId);
        } catch(_) {}
    }
}

console.log('‚úÖ –ó–ê–ì–†–£–ó–ö–ê: catalog-v2.js –∑–∞–≥—Ä—É–∂–µ–Ω, –∫–ª–∞—Å—Å CatalogV2 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
window.CatalogV2 = CatalogV2; 