/**
 * –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Å–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –º–∞—Å–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
 */

class CreativeMasks {
    constructor() {
        this.creativeMaskList = [
            // –ñ–∏–≤–æ—Ç–Ω—ã–µ
            {
                id: 'cat-ears',
                name: 'üê± –ö–æ—à–∞—á—å–∏ —É—à–∏',
                category: 'animals',
                type: 'overlay',
                description: '–ú–∏–ª—ã–µ –∫–æ—à–∞—á—å–∏ —É—à–∫–∏ –∏ –Ω–æ—Å–∏–∫'
            },
            {
                id: 'dog-nose',
                name: 'üê∂ –°–æ–±–∞—á–∏–π –Ω–æ—Å',
                category: 'animals',
                type: 'overlay',
                description: '–ó–∞–±–∞–≤–Ω—ã–π —Å–æ–±–∞—á–∏–π –Ω–æ—Å–∏–∫ –∏ —è–∑—ã—á–æ–∫'
            },
            {
                id: 'rabbit-ears',
                name: 'üê∞ –ó–∞—è—á—å–∏ —É—à–∏',
                category: 'animals',
                type: 'overlay',
                description: '–î–ª–∏–Ω–Ω—ã–µ –∑–∞—è—á—å–∏ —É—à–∫–∏'
            },
            
            // –§—ç–Ω—Ç–µ–∑–∏
            {
                id: 'dragon-horns',
                name: 'üêâ –†–æ–≥–∞ –¥—Ä–∞–∫–æ–Ω–∞',
                category: 'fantasy',
                type: 'overlay',
                description: '–ú–æ—â–Ω—ã–µ —Ä–æ–≥–∞ –¥—Ä–∞–∫–æ–Ω–∞'
            },
            {
                id: 'fairy-wings',
                name: 'üßö –ö—Ä—ã–ª—å—è —Ñ–µ–∏',
                category: 'fantasy',
                type: 'overlay',
                description: '–í–æ–ª—à–µ–±–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏ —Ñ–µ–∏'
            },
            {
                id: 'wizard-hat',
                name: 'üßô –®–ª—è–ø–∞ –≤–æ–ª—à–µ–±–Ω–∏–∫–∞',
                category: 'fantasy',
                type: 'overlay',
                description: '–û—Å—Ç—Ä–æ–∫–æ–Ω–µ—á–Ω–∞—è —à–ª—è–ø–∞ –º–∞–≥–∞'
            },
            
            // –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ
            {
                id: 'party-hat',
                name: 'üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –∫–æ–ª–ø–∞–∫',
                category: 'party',
                type: 'overlay',
                description: '–Ø—Ä–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –∫–æ–ª–ø–∞–∫'
            },
            {
                id: 'birthday-crown',
                name: 'üéÇ –ö–æ—Ä–æ–Ω–∞ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞',
                category: 'party',
                type: 'overlay',
                description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ—Ä–æ–Ω–∞ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'
            },
            {
                id: 'new-year-hat',
                name: 'üéÑ –ù–æ–≤–æ–≥–æ–¥–Ω—è—è —à–∞–ø–∫–∞',
                category: 'party',
                type: 'overlay',
                description: '–ö—Ä–∞—Å–Ω–∞—è —à–∞–ø–∫–∞ –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞'
            },
            
            // –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
            {
                id: 'chef-hat',
                name: 'üë®‚Äçüç≥ –ü–æ–≤–∞—Ä—Å–∫–æ–π –∫–æ–ª–ø–∞–∫',
                category: 'profession',
                type: 'overlay',
                description: '–ë–µ–ª—ã–π –ø–æ–≤–∞—Ä—Å–∫–æ–π –∫–æ–ª–ø–∞–∫'
            },
            {
                id: 'police-cap',
                name: 'üëÆ –ü–æ–ª–∏—Ü–µ–π—Å–∫–∞—è —Ñ—É—Ä–∞–∂–∫–∞',
                category: 'profession',
                type: 'overlay',
                description: '–§—É—Ä–∞–∂–∫–∞ –ø–æ–ª–∏—Ü–µ–π—Å–∫–æ–≥–æ'
            },
            {
                id: 'doctor-mask',
                name: 'üë®‚Äç‚öïÔ∏è –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –º–∞—Å–∫–∞',
                category: 'profession',
                type: 'overlay',
                description: '–ó–∞—â–∏—Ç–Ω–∞—è –º–∞—Å–∫–∞ –≤—Ä–∞—á–∞'
            },
            
            // –≠–º–æ—Ü–∏–∏
            {
                id: 'heart-eyes',
                name: 'üòç –°–µ—Ä–¥–µ—á–∫–∏ –≤ –≥–ª–∞–∑–∞—Ö',
                category: 'emotions',
                type: 'overlay',
                description: '–í–ª—é–±–ª–µ–Ω–Ω—ã–µ –≥–ª–∞–∑–∫–∏ —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏'
            },
            {
                id: 'star-eyes',
                name: 'ü§© –ó–≤–µ–∑–¥–Ω—ã–µ –≥–ª–∞–∑–∞',
                category: 'emotions',
                type: 'overlay',
                description: '–ì–ª–∞–∑–∞ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏'
            },
            {
                id: 'money-eyes',
                name: 'ü§ë –î–æ–ª–ª–∞—Ä–æ–≤—ã–µ –≥–ª–∞–∑–∞',
                category: 'emotions',
                type: 'overlay',
                description: '–ì–ª–∞–∑–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–æ–ª–ª–∞—Ä–∞'
            }
        ];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Å–∫–∏
     */
    getAllCreativeMasks() {
        return this.creativeMaskList;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getMasksByCategory(category) {
        return this.creativeMaskList.filter(mask => mask.category === category);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å–∫—É –ø–æ ID
     */
    getMaskById(id) {
        return this.creativeMaskList.find(mask => mask.id === id);
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ—à–∞—á—å–∏—Ö —É—à–µ–π
     */
    drawCatEars(ctx, landmarks, width, height) {
        const forehead = landmarks[10];
        const leftTemple = landmarks[103];
        const rightTemple = landmarks[332];

        if (!forehead || !leftTemple || !rightTemple) {return;}

        const centerX = (1 - forehead.x) * width;
        const centerY = forehead.y * height - 60;
        const earSize = Math.abs((1 - rightTemple.x) * width - (1 - leftTemple.x) * width) * 0.3;

        // –õ–µ–≤–æ–µ —É—Ö–æ
        ctx.fillStyle = '#FF69B4';
        ctx.beginPath();
        ctx.moveTo(centerX - earSize, centerY);
        ctx.lineTo(centerX - earSize/2, centerY - earSize);
        ctx.lineTo(centerX - earSize/4, centerY);
        ctx.closePath();
        ctx.fill();

        // –ü—Ä–∞–≤–æ–µ —É—Ö–æ
        ctx.beginPath();
        ctx.moveTo(centerX + earSize/4, centerY);
        ctx.lineTo(centerX + earSize/2, centerY - earSize);
        ctx.lineTo(centerX + earSize, centerY);
        ctx.closePath();
        ctx.fill();

        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏ —É—à–µ–π
        ctx.fillStyle = '#FFB6C1';
        ctx.beginPath();
        ctx.moveTo(centerX - earSize*0.8, centerY - earSize*0.2);
        ctx.lineTo(centerX - earSize*0.6, centerY - earSize*0.7);
        ctx.lineTo(centerX - earSize*0.4, centerY - earSize*0.2);
        ctx.closePath();
        ctx.fill();

        ctx.beginPath();
        ctx.moveTo(centerX + earSize*0.4, centerY - earSize*0.2);
        ctx.lineTo(centerX + earSize*0.6, centerY - earSize*0.7);
        ctx.lineTo(centerX + earSize*0.8, centerY - earSize*0.2);
        ctx.closePath();
        ctx.fill();

        // –ö–æ—à–∞—á–∏–π –Ω–æ—Å–∏–∫
        const nose = landmarks[168];
        if (nose) {
            const noseX = (1 - nose.x) * width;
            const noseY = nose.y * height;
            
            ctx.fillStyle = '#FF69B4';
            ctx.beginPath();
            ctx.moveTo(noseX, noseY - 5);
            ctx.lineTo(noseX - 8, noseY + 5);
            ctx.lineTo(noseX + 8, noseY + 5);
            ctx.closePath();
            ctx.fill();
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–±–∞—á—å–µ–≥–æ –Ω–æ—Å–∞
     */
    drawDogNose(ctx, landmarks, width, height) {
        const nose = landmarks[168];
        const upperLip = landmarks[13];

        if (!nose || !upperLip) {return;}

        const noseX = (1 - nose.x) * width;
        const noseY = nose.y * height;
        const lipX = (1 - upperLip.x) * width;
        const lipY = upperLip.y * height;

        // –°–æ–±–∞—á–∏–π –Ω–æ—Å
        ctx.fillStyle = '#000000';
        ctx.beginPath();
        ctx.ellipse(noseX, noseY, 12, 8, 0, 0, 2 * Math.PI);
        ctx.fill();

        // –ë–ª–∏–∫ –Ω–∞ –Ω–æ—Å—É
        ctx.fillStyle = '#FFFFFF';
        ctx.beginPath();
        ctx.ellipse(noseX - 3, noseY - 2, 3, 2, 0, 0, 2 * Math.PI);
        ctx.fill();

        // –Ø–∑—ã—á–æ–∫
        ctx.fillStyle = '#FF69B4';
        ctx.beginPath();
        ctx.ellipse(lipX, lipY + 15, 15, 25, 0, 0, 2 * Math.PI);
        ctx.fill();

        // –ö–æ–Ω—Ç—É—Ä —è–∑—ã–∫–∞
        ctx.strokeStyle = '#FF1493';
        ctx.lineWidth = 2;
        ctx.stroke();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞—è—á—å–∏—Ö —É—à–µ–π
     */
    drawRabbitEars(ctx, landmarks, width, height) {
        const forehead = landmarks[10];
        const leftTemple = landmarks[103];
        const rightTemple = landmarks[332];

        if (!forehead || !leftTemple || !rightTemple) {return;}

        const centerX = (1 - forehead.x) * width;
        const centerY = forehead.y * height - 40;
        const earLength = 80;
        const earWidth = 25;

        // –õ–µ–≤–æ–µ —É—Ö–æ
        ctx.fillStyle = '#F5DEB3';
        ctx.beginPath();
        ctx.ellipse(centerX - 30, centerY - earLength/2, earWidth, earLength, -0.3, 0, 2 * Math.PI);
        ctx.fill();

        // –ü—Ä–∞–≤–æ–µ —É—Ö–æ
        ctx.beginPath();
        ctx.ellipse(centerX + 30, centerY - earLength/2, earWidth, earLength, 0.3, 0, 2 * Math.PI);
        ctx.fill();

        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—Ç–∏
        ctx.fillStyle = '#FFB6C1';
        ctx.beginPath();
        ctx.ellipse(centerX - 30, centerY - earLength/2, earWidth*0.6, earLength*0.8, -0.3, 0, 2 * Math.PI);
        ctx.fill();

        ctx.beginPath();
        ctx.ellipse(centerX + 30, centerY - earLength/2, earWidth*0.6, earLength*0.8, 0.3, 0, 2 * Math.PI);
        ctx.fill();

        // –ö–æ–Ω—Ç—É—Ä
        ctx.strokeStyle = '#DEB887';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.ellipse(centerX - 30, centerY - earLength/2, earWidth, earLength, -0.3, 0, 2 * Math.PI);
        ctx.stroke();
        ctx.beginPath();
        ctx.ellipse(centerX + 30, centerY - earLength/2, earWidth, earLength, 0.3, 0, 2 * Math.PI);
        ctx.stroke();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–æ–≥–æ–≤ –¥—Ä–∞–∫–æ–Ω–∞
     */
    drawDragonHorns(ctx, landmarks, width, height) {
        const forehead = landmarks[10];
        const leftTemple = landmarks[103];
        const rightTemple = landmarks[332];

        if (!forehead || !leftTemple || !rightTemple) {return;}

        const centerX = (1 - forehead.x) * width;
        const centerY = forehead.y * height - 30;
        const hornHeight = 60;

        // –õ–µ–≤—ã–π —Ä–æ–≥
        ctx.fillStyle = '#8B0000';
        ctx.beginPath();
        ctx.moveTo(centerX - 40, centerY);
        ctx.quadraticCurveTo(centerX - 50, centerY - hornHeight/2, centerX - 45, centerY - hornHeight);
        ctx.lineTo(centerX - 35, centerY - hornHeight + 10);
        ctx.quadraticCurveTo(centerX - 30, centerY - hornHeight/2, centerX - 25, centerY);
        ctx.closePath();
        ctx.fill();

        // –ü—Ä–∞–≤—ã–π —Ä–æ–≥
        ctx.beginPath();
        ctx.moveTo(centerX + 25, centerY);
        ctx.quadraticCurveTo(centerX + 30, centerY - hornHeight/2, centerX + 35, centerY - hornHeight + 10);
        ctx.lineTo(centerX + 45, centerY - hornHeight);
        ctx.quadraticCurveTo(centerX + 50, centerY - hornHeight/2, centerX + 40, centerY);
        ctx.closePath();
        ctx.fill();

        // –¢–µ–∫—Å—Ç—É—Ä–∞ —Ä–æ–≥–æ–≤
        ctx.strokeStyle = '#4B0000';
        ctx.lineWidth = 2;
        for (let i = 0; i < 3; i++) {
            const y = centerY - hornHeight * 0.2 * (i + 1);
            // –õ–µ–≤—ã–π —Ä–æ–≥
            ctx.beginPath();
            ctx.moveTo(centerX - 45, y);
            ctx.lineTo(centerX - 25, y);
            ctx.stroke();
            // –ü—Ä–∞–≤—ã–π —Ä–æ–≥
            ctx.beginPath();
            ctx.moveTo(centerX + 25, y);
            ctx.lineTo(centerX + 45, y);
            ctx.stroke();
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ä–¥–µ—á–µ–∫ –≤ –≥–ª–∞–∑–∞—Ö
     */
    drawHeartEyes(ctx, landmarks, width, height) {
        const leftEye = landmarks[33];
        const rightEye = landmarks[362];

        if (!leftEye || !rightEye) {return;}

        const leftEyeX = (1 - leftEye.x) * width;
        const leftEyeY = leftEye.y * height;
        const rightEyeX = (1 - rightEye.x) * width;
        const rightEyeY = rightEye.y * height;

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å–µ—Ä–¥–µ—á–∫–∞
        const drawHeart = (x, y, size) => {
            ctx.fillStyle = '#FF1493';
            ctx.beginPath();
            ctx.moveTo(x, y + size/4);
            ctx.bezierCurveTo(x - size/2, y - size/2, x - size, y + size/6, x, y + size);
            ctx.bezierCurveTo(x + size, y + size/6, x + size/2, y - size/2, x, y + size/4);
            ctx.closePath();
            ctx.fill();

            // –ë–ª–∏–∫
            ctx.fillStyle = '#FF69B4';
            ctx.beginPath();
            ctx.arc(x - size/4, y, size/8, 0, 2 * Math.PI);
            ctx.fill();
        };

        // –†–∏—Å—É–µ–º —Å–µ—Ä–¥–µ—á–∫–∏ –≤ –≥–ª–∞–∑–∞—Ö
        drawHeart(leftEyeX, leftEyeY, 20);
        drawHeart(rightEyeX, rightEyeY, 20);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –º–∞—Å–∫–∏
     */
    drawCreativeMask(ctx, landmarks, mask, width, height) {
        try {
            ctx.save();

            switch (mask.id) {
                case 'cat-ears':
                    this.drawCatEars(ctx, landmarks, width, height);
                    break;
                case 'dog-nose':
                    this.drawDogNose(ctx, landmarks, width, height);
                    break;
                case 'rabbit-ears':
                    this.drawRabbitEars(ctx, landmarks, width, height);
                    break;
                case 'dragon-horns':
                    this.drawDragonHorns(ctx, landmarks, width, height);
                    break;
                case 'heart-eyes':
                    this.drawHeartEyes(ctx, landmarks, width, height);
                    break;
                default:
                    console.warn(`üé≠ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –º–∞—Å–∫–∞: ${mask.id}`);
            }

            ctx.restore();
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –º–∞—Å–∫–∏ ${mask.id}:`, error);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CreativeMasks;
} else {
    window.CreativeMasks = CreativeMasks;
} 