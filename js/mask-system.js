/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞—Å–æ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –í–∫–ª—é—á–∞–µ—Ç MediaPipe, –∑–∞–º–µ–Ω—É —Ñ–æ–Ω–∞, –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—Ü–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
 */

class MaskSystem {
    constructor() {
        console.log('üé≠ MaskSystem: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –º–∞—Å–æ–∫');
        
        this.isActive = false;
        this.currentMask = null;
        this.videoElement = null;
        this.stream = null;
        this.faceMeshDetector = null;
        this.videoProcessor = null;
        this.mediaProcessor = null;
        this.overlayCanvas = null;
        this.overlayContext = null;
        this.animationFrame = null;
        this.lastProcessingTime = 0;
        this.frameCount = 0;
        this.isVideoActive = false;
        this.mediaReady = false;
        
        // –ù–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ background —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        this.backgroundEngine = null;
        this.backgroundEngineReady = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        this.backgroundEffects = {
            blur: { enabled: false, intensity: 10 },
            colorFilter: { enabled: false, color: '#00ff00', opacity: 0.5 },
            gradient: { enabled: false, colors: ['#ff6b6b', '#4ecdc4'], direction: 'diagonal' }
        };
        
        // –•—Ä–æ–º–∞–∫–µ–π —Å–∏—Å—Ç–µ–º–∞
        this.isChromakeyActive = false;
        this.currentChromakeyMask = null;
        this.chromakeyProcessingActive = false;
        this.backgroundCanvas = null;
        this.backgroundCtx = null;
        this.personMaskCanvas = null;
        this.personMaskCtx = null;
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–∞—Å–∫–∏
        this.currentCategory = 'basic';
        this.categories = {
            basic: { icon: 'üé®', name: '–ë–∞–∑–æ–≤—ã–µ', masks: this.getBasicMasks() },
            face: { icon: 'üòä', name: '–õ–∏—Ü–æ', masks: this.getFaceMasks() },
            background: { icon: 'üåü', name: '–§–æ–Ω', masks: this.getBackgroundMasks() },
            chromakey: { icon: 'üé¨', name: '–•—Ä–æ–º–∞–∫–µ–π', masks: this.getChromakeyMasks() },
            advanced: { icon: 'üß†', name: 'AI –≠—Ñ—Ñ–µ–∫—Ç—ã', masks: this.getAdvancedMasks() }
        };
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.maskControlsContainer = null;
        this.videoPanel = null;
        this.categoriesPanel = null;
        this.masksContainer = null;
        this.cameraButton = null;
        this.permissionMessage = null;
        this.errorMessage = null;
        
        console.log('üé≠ MaskSystem: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.init();
        
        // Selfie Segmentation
        this.selfieSegmentation = null;
        this.selfieSegmentationReady = false;
        this.selfieSegmentationLastMask = null;
        this.selfieSegmentationFrameCount = 0;
        this.selfieSegmentationHasResults = false;
        this.lastSelfieSegmentationTime = 0;
        this.useSelfieSegmentationFallback = false;
        
        // Fallback —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.fallbackTextInterval = null;
        
        // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this._lastActiveText = '';
        this._lastNextText = '';
        this._lastActiveTextCache = null;
        this._lastNextTextCache = null;
        
        console.log('üé≠ MaskSystem —Å–æ–∑–¥–∞–Ω');
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.enableConsoleLogging = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω—ã –ª–æ–≥–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        // üîß –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –æ—à–∏–±–æ–∫
        this.errorThrottling = {
            maskDataError: 0,
            lastMaskDataError: 0,
            errorInterval: 2000 // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É —Ä–∞–∑ –≤ 2 —Å–µ–∫—É–Ω–¥—ã –º–∞–∫—Å–∏–º—É–º
        };
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
        this.cameraConfig = {
            width: { ideal: 1280 },
            height: { ideal: 720 },
            facingMode: 'user'
        };
    }
    
    async init() {
        if (this.enableConsoleLogging) {
            console.log('üé≠ MaskSystem: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–∞—Å–æ–∫');
        }
        this.createMaskControls();
        await this.setupVideoCapture();
        await this.loadMediaPipe();
        await this.initBackgroundEngine();
        if (this.enableConsoleLogging) {
            console.log('üé≠ MaskSystem: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
    }
    
    async initBackgroundEngine() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º Background Effects Engine —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if (!window.BackgroundEffectsEngine) {
                if (this.enableConsoleLogging) {
                    console.log('üé≠ MaskSystem: –ó–∞–≥—Ä—É–∂–∞–µ–º Background Effects Engine...');
                }
                
                // –°–æ–∑–¥–∞–µ–º script —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–≤–∏–∂–∫–∞
                const script = document.createElement('script');
                script.src = 'js/background-effects-engine.js';
                script.onload = async () => {
                    await this.setupBackgroundEngine();
                };
                script.onerror = () => {
                    console.warn('‚ö†Ô∏è MaskSystem: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Background Effects Engine');
                };
                document.head.appendChild(script);
            } else {
                await this.setupBackgroundEngine();
            }
        } catch (error) {
            console.error('‚ùå MaskSystem: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Background Effects Engine:', error);
        }
    }
    
    async setupBackgroundEngine() {
        try {
            if (window.BackgroundEffectsEngine) {
                if (this.enableConsoleLogging) {
                    console.log('üé≠ MaskSystem: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Background Effects Engine...');
                }
                this.backgroundEngine = new BackgroundEffectsEngine();
                
                // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–∞
                const success = await this.backgroundEngine.initialize();
                
                if (success && this.backgroundEngine.isInitialized) {
                    this.backgroundEngineReady = true;
                    if (this.enableConsoleLogging) {
                        console.log('‚úÖ MaskSystem: Background Effects Engine –≥–æ—Ç–æ–≤');
                    }
                } else {
                    this.backgroundEngineReady = false;
                    console.warn('‚ö†Ô∏è MaskSystem: Background Effects Engine –Ω–µ —Å–º–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è');
                }
            } else {
                console.warn('‚ö†Ô∏è MaskSystem: BackgroundEffectsEngine –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                this.backgroundEngineReady = false;
            }
        } catch (error) {
            console.error('‚ùå MaskSystem: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Background Effects Engine:', error);
            this.backgroundEngineReady = false;
        }
    }
    
    createMaskControls() {
        if (this.enableConsoleLogging) {
            console.log('üé≠ MaskSystem: –°–æ–∑–¥–∞–Ω–∏–µ UI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–∞—Å–æ–∫');
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.maskControlsContainer = document.createElement('div');
        this.maskControlsContainer.id = 'mask-controls';
        this.maskControlsContainer.className = 'mask-controls hidden';
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
        const header = document.createElement('h3');
        header.innerHTML = 'üé≠ –°—Ç—É–¥–∏—è –ú–∞—Å–æ–∫ –∏ –≠—Ñ—Ñ–µ–∫—Ç–æ–≤ 2030';
        
        const closeBtn = document.createElement('button');
        closeBtn.className = 'mask-close-btn';
        closeBtn.innerHTML = '√ó';
        closeBtn.onclick = () => this.hideMaskControls();
        header.appendChild(closeBtn);
        
        this.maskControlsContainer.appendChild(header);
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const mainContent = document.createElement('div');
        mainContent.className = 'mask-main-content';
        
        // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –≤–∏–¥–µ–æ
        this.videoPanel = this.createVideoPanel();
        mainContent.appendChild(this.videoPanel);
        
        // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –º–∞—Å–∫–∞–º–∏
        this.categoriesPanel = this.createCategoriesPanel();
        mainContent.appendChild(this.categoriesPanel);
        
        this.maskControlsContainer.appendChild(mainContent);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(this.maskControlsContainer);
        
        if (this.enableConsoleLogging) {
            console.log('üé≠ MaskSystem: UI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ DOM');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –º–∞—Å–æ–∫
        this.updateMasksGrid();
    }
    
    createVideoPanel() {
        const panel = document.createElement('div');
        panel.className = 'mask-video-panel';
        
        // –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
        const toggleBtn = document.createElement('button');
        toggleBtn.id = 'toggle-masks';
        toggleBtn.className = 'mask-btn';
        toggleBtn.innerHTML = 'üì∑ –í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É';
        toggleBtn.onclick = () => this.toggleCamera();
        panel.appendChild(toggleBtn);
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ
        const videoContainer = document.createElement('div');
        videoContainer.className = 'mask-video-container';
        
        // –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        const status = document.createElement('div');
        status.className = 'mask-status inactive';
        status.textContent = '–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞';
        videoContainer.appendChild(status);
        
        // –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
        this.videoElement = document.createElement('video');
        this.videoElement.id = 'mask-video';
        this.videoElement.autoplay = true;
        this.videoElement.muted = true;
        this.videoElement.playsInline = true;
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞—é –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        // –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞–ª —á—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç "–û–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ + –æ–±—ã—á–Ω–∞—è –º–∞—Å–∫–∞" —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        // this.videoElement.style.transform = 'scaleX(-1)'; // –£–±—Ä–∞–Ω–æ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        videoContainer.appendChild(this.videoElement);
        
        panel.appendChild(videoContainer);
        
        return panel;
    }
    
    createCategoriesPanel() {
        const panel = document.createElement('div');
        panel.className = 'mask-categories-panel';
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoriesContainer = document.createElement('div');
        categoriesContainer.className = 'mask-categories';
        
        Object.keys(this.categories).forEach(categoryKey => {
            const category = this.categories[categoryKey];
            const btn = document.createElement('button');
            btn.className = 'mask-category-btn';
            if (categoryKey === this.currentCategory) {btn.classList.add('active');}
            btn.innerHTML = `${category.icon} ${category.name}`;
            btn.onclick = (event) => this.switchCategory(categoryKey, event);
            categoriesContainer.appendChild(btn);
        });
        
        panel.appendChild(categoriesContainer);
        
        // –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –º–∞—Å–æ–∫
        const scrollArea = document.createElement('div');
        scrollArea.className = 'masks-scroll-area';
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞—Å–æ–∫
        this.masksContainer = document.createElement('div');
        this.masksContainer.id = 'masks-grid';
        this.masksContainer.className = 'masks-grid';
        
        scrollArea.appendChild(this.masksContainer);
        panel.appendChild(scrollArea);
        
        if (this.enableConsoleLogging) {
            console.log('üé≠ MaskSystem: –ü–∞–Ω–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞—Å–æ–∫ —Å–æ–∑–¥–∞–Ω—ã');
        }
        
        return panel;
    }
    
    switchCategory(categoryKey, event) {
        this.currentCategory = categoryKey;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        document.querySelectorAll('.mask-category-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        if (event && event.target) {
            event.target.classList.add('active');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –º–∞—Å–æ–∫
        this.updateMasksGrid();
        
        if (this.enableConsoleLogging) {
            console.log(`üé≠ MaskSystem: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${this.categories[categoryKey].name}"`);
        }
    }
    
    updateMasksGrid() {
        if (!this.masksContainer) {return;}
        
        const categoryData = this.categories[this.currentCategory];
        if (!categoryData) {return;}
        
        const currentMasks = categoryData.masks;
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.masksContainer.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å–æ–∫
        currentMasks.forEach(mask => {
            const btn = document.createElement('button');
            btn.className = 'mask-option-btn';
            btn.innerHTML = `
                <div class="mask-icon">${mask.icon}</div>
                <div class="mask-name">${mask.name}</div>
            `;
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–∞—Å–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            btn.onclick = async () => {
                if (this.enableConsoleLogging) {
                    console.log(`üé≠ MaskSystem: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏ "${mask.name}"`);
                }
                await this.applyMask(mask);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                document.querySelectorAll('.mask-option-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            };
            
            this.masksContainer.appendChild(btn);
        });
        
        if (this.enableConsoleLogging) {
            console.log(`üé≠ MaskSystem: –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Ç–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${this.currentCategory}" (${currentMasks.length} –º–∞—Å–æ–∫)`);
        }
    }
    
    async setupVideoCapture() {
        try {
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                console.warn('üé≠ MaskSystem: WebRTC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
                return;
            }
            
            if (this.enableConsoleLogging) {
                console.log('üé≠ MaskSystem: –í–∏–¥–µ–æ –∑–∞—Ö–≤–∞—Ç –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            }
        } catch (error) {
            console.error('üé≠ MaskSystem: –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ:', error);
        }
    }
    
    async loadMediaPipe() {
        try {
            console.log('üé≠ MediaPipe: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫...');
            
            // –ñ–¥–µ–º, –ø–æ–∫–∞ –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ MediaPipe –∑–∞–≥—Ä—É–∑—è—Ç—Å—è
            const success = await this.waitForMediaPipeLibraries();
            
            if (!success) {
                console.warn('‚ö†Ô∏è MediaPipe: –ù–µ –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ MediaPipe FaceMesh –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.FaceMesh) {
                this.faceMesh = new window.FaceMesh({
                    locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`
                });
                
                this.faceMesh.setOptions({
                    maxNumFaces: 1,
                    refineLandmarks: true,
                    minDetectionConfidence: 0.5,
                    minTrackingConfidence: 0.5
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                this.faceMesh.onResults(() => {});
                
                console.log('üé≠ MaskSystem: –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π MediaPipe FaceMesh –≥–æ—Ç–æ–≤');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pose –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.Pose) {
                this.pose = new window.Pose({
                    locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`
                });
                
                this.pose.setOptions({
                    modelComplexity: 1,
                    smoothLandmarks: true,
                    enableSegmentation: false,
                    smoothSegmentation: true,
                    minDetectionConfidence: 0.5,
                    minTrackingConfidence: 0.5
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                this.pose.onResults(() => {});
                
                console.log('üèÉ MaskSystem: MediaPipe Pose –≥–æ—Ç–æ–≤');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hands –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.Hands) {
                this.hands = new window.Hands({
                    locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`
                });
                
                this.hands.setOptions({
                    maxNumHands: 2,
                    modelComplexity: 1,
                    minDetectionConfidence: 0.5,
                    minTrackingConfidence: 0.5
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                this.hands.onResults(() => {});
                
                console.log('‚úã MaskSystem: MediaPipe Hands –≥–æ—Ç–æ–≤');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Holistic –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (window.Holistic) {
                this.holistic = new window.Holistic({
                    locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/holistic/${file}`
                });
                
                this.holistic.setOptions({
                    modelComplexity: 1,
                    smoothLandmarks: true,
                    enableSegmentation: false,
                    smoothSegmentation: true,
                    refineFaceLandmarks: true,
                    minDetectionConfidence: 0.5,
                    minTrackingConfidence: 0.5
                });
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                this.holistic.onResults(() => {});
                
                console.log('ü§ñ MaskSystem: MediaPipe Holistic –≥–æ—Ç–æ–≤');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe Selfie Segmentation
            if (window.SelfieSegmentation) {
                try {
                    this.selfieSegmentation = new window.SelfieSegmentation({
                        locateFile: (file) => {
                            return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;
                        }
                    });
                    
                    this.selfieSegmentation.setOptions({
                        modelSelection: 0, // 0 - –æ–±—â–∞—è –º–æ–¥–µ–ª—å (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è), 1 - –ª–µ–≥–∫–∞—è
                        selfieMode: false // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º selfieMode –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –Ω–µ–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ
                    });
                    
                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Selfie Segmentation
                    this.selfieSegmentation.onResults((results) => {
                        try {
                            this.lastSelfieSegmentationTime = Date.now();
                            this.selfieSegmentationHasResults = true;
                            this.onSelfieSegmentationResults(results);
                            
                            // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 –∫–∞–¥—Ä–æ–≤
                            this.selfieSegmentationFrameCount++;
                            if (this.selfieSegmentationFrameCount % 100 === 0) {
                                console.log(`üé® Selfie Segmentation: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${this.selfieSegmentationFrameCount} –∫–∞–¥—Ä–æ–≤`);
                            }
                        } catch (error) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Selfie Segmentation:', error);
                            
                            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞–º—è—Ç–∏ - –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                            if (error.message && error.message.includes('memory')) {
                                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
                                setTimeout(() => {
                                    this.reinitializeSelfieSegmentation();
                                }, 1000);
                            }
                        }
                    });
                    
                    console.log('üé® MaskSystem: MediaPipe Selfie Segmentation –≥–æ—Ç–æ–≤');
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Selfie Segmentation
                    this.selfieSegmentationReady = true;
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Selfie Segmentation:', error);
                    this.selfieSegmentation = null;
                    this.selfieSegmentationReady = false;
                }
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VideoProcessor –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if (!this.videoProcessor && window.VideoProcessor) {
                this.videoProcessor = new VideoProcessor();
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MediaPipe
            this.mediaReady = true;
            
            console.log('üé≠ MaskSystem: MediaPipe –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MediaPipe:', error);
            this.mediaReady = false;
        }
    }
    
    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫ MediaPipe
     */
    async waitForMediaPipeLibraries() {
        console.log('üé≠ MediaPipe: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫...');
        
        return new Promise((resolve) => {
            let checkCount = 0;
            const maxChecks = 200; // 20 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            const checkInterval = 100; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å

            const checkLibraries = () => {
                checkCount++;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö MediaPipe –±–∏–±–ª–∏–æ—Ç–µ–∫
                const hasBase = window.FilesetResolver && window.FaceLandmarker;
                const hasFaceMesh = window.FaceMesh;
                const hasPose = window.Pose;
                const hasHands = window.Hands;
                const hasHolistic = window.Holistic;
                const hasSelfieSegmentation = window.SelfieSegmentation;

                const librariesReady = hasFaceMesh && hasPose && hasHands && hasHolistic && hasSelfieSegmentation;
                
                if (librariesReady) {
                    console.log('üé≠ MediaPipe: –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                    resolve(true);
                } else if (checkCount >= maxChecks) {
                    console.warn('üé≠ MediaPipe: –ù–µ –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
                    console.log('üìä MediaPipe –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:', {
                        FaceMesh: !!hasFaceMesh,
                        Pose: !!hasPose,
                        Hands: !!hasHands,
                        Holistic: !!hasHolistic,
                        SelfieSegmentation: !!hasSelfieSegmentation
                    });
                    resolve(false);
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 –ø—Ä–æ–≤–µ—Ä–æ–∫ (2 —Å–µ–∫—É–Ω–¥—ã)
                    if (checkCount % 20 === 0) {
                        console.log(`üé≠ MediaPipe: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏... (${checkCount * checkInterval / 1000}—Å)`);
                    }
                    setTimeout(checkLibraries, checkInterval);
                }
            };

            checkLibraries();
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ MediaPipe FaceMesh
     */
    handleOfficialFaceMeshResults(results) {
        try {
            if (!results || !results.multiFaceLandmarks) {
                return;
            }

            const canvas = this.overlayCanvas;
            const ctx = canvas.getContext('2d');
            
            if (!canvas || !ctx) {
                return;
            }

            // –û—á–∏—â–∞–µ–º canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // –†–∏—Å—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–∞
            results.multiFaceLandmarks.forEach((landmarks, index) => {
                if (this.enableConsoleLogging) {
                    console.log(`üé≠ Face Mesh: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${landmarks.length} —Ç–æ—á–µ–∫ –ª–∏—Ü–∞`);
                }
                
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                const normalizedLandmarks = landmarks.map(landmark => ({
                    x: landmark.x * canvas.width,
                    y: landmark.y * canvas.height,
                    z: landmark.z
                }));

                // –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏
                this.drawFaceResults([{ landmarks: normalizedLandmarks }]);
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Face Mesh —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Pose
     */
    handlePoseResults(results) {
        try {
            if (!results || !results.poseLandmarks) {
                return;
            }

            const canvas = this.overlayCanvas;
            const ctx = canvas.getContext('2d');
            
            if (!canvas || !ctx) {
                return;
            }

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∏—Å—É–Ω–∫–∏
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (this.enableConsoleLogging) {
                console.log(`üèÉ Pose: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${results.poseLandmarks.length} —Ç–æ—á–µ–∫ –ø–æ–∑—ã`);
            }

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã landmarks
            const normalizedLandmarks = results.poseLandmarks.map(landmark => ({
                x: landmark.x * canvas.width,
                y: landmark.y * canvas.height,
                z: landmark.z
            }));

            // –†–∏—Å—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–∑—ã
            this.drawPoseConnections(ctx, normalizedLandmarks);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Pose —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Hands
     */
    handleHandsResults(results) {
        try {
            if (!results || !results.multiHandLandmarks) {
                return;
            }

            const canvas = this.overlayCanvas;
            const ctx = canvas.getContext('2d');
            
            if (!canvas || !ctx) {
                return;
            }

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∏—Å—É–Ω–∫–∏
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (this.enableConsoleLogging) {
                console.log(`‚úã Hands: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${results.multiHandLandmarks.length} —Ä—É–∫`);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ä—É–∫—É
            results.multiHandLandmarks.forEach((landmarks, index) => {
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                const normalizedLandmarks = landmarks.map(landmark => ({
                    x: landmark.x * canvas.width,
                    y: landmark.y * canvas.height,
                    z: landmark.z
                }));

                // –†–∏—Å—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä—É–∫–∏
                this.drawHandConnections(ctx, normalizedLandmarks);
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Hands —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        }
    }

    handleHolisticResults(results) {
        try {
            if (!this.overlayCanvas) {
                this.createOverlayCanvas();
            }

            const ctx = this.overlayCanvas.getContext('2d');
            ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);

            let detectedParts = [];

            // –õ–∏—Ü–æ —Å —É—á–µ—Ç–æ–º –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if (results.faceLandmarks) {
                ctx.fillStyle = '#00FF00';
                results.faceLandmarks.forEach((landmark) => {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
                    const x = landmark.x * this.overlayCanvas.width;  // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º X
                    const y = landmark.y * this.overlayCanvas.height;
                    
                    ctx.beginPath();
                    ctx.arc(x, y, 1, 0, 2 * Math.PI);
                    ctx.fill();
                });
                detectedParts.push('–õ–∏—Ü–æ');
            }

            // –ü–æ–∑–∞ —Å —É—á–µ—Ç–æ–º –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if (results.poseLandmarks) {
                ctx.fillStyle = '#FF1493';
                results.poseLandmarks.forEach((landmark) => {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
                    const x = landmark.x * this.overlayCanvas.width;  // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º X
                    const y = landmark.y * this.overlayCanvas.height;
                    
                    ctx.beginPath();
                    ctx.arc(x, y, 3, 0, 2 * Math.PI);
                    ctx.fill();
                });
                detectedParts.push('–ü–æ–∑–∞');
            }

            // –†—É–∫–∏ —Å —É—á–µ—Ç–æ–º –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if (results.leftHandLandmarks || results.rightHandLandmarks) {
                if (results.leftHandLandmarks) {
                    ctx.fillStyle = '#00CED1';
                    results.leftHandLandmarks.forEach((landmark) => {
                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
                        const x = landmark.x * this.overlayCanvas.width;  // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º X
                        const y = landmark.y * this.overlayCanvas.height;
                        
                        ctx.beginPath();
                        ctx.arc(x, y, 2, 0, 2 * Math.PI);
                        ctx.fill();
                    });
                }
                
                if (results.rightHandLandmarks) {
                    ctx.fillStyle = '#FF6347';
                    results.rightHandLandmarks.forEach((landmark) => {
                        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
                        const x = landmark.x * this.overlayCanvas.width;  // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º X
                        const y = landmark.y * this.overlayCanvas.height;
                        
                        ctx.beginPath();
                        ctx.arc(x, y, 2, 0, 2 * Math.PI);
                        ctx.fill();
                    });
                }
                detectedParts.push('–†—É–∫–∏');
            }

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ctx.font = '16px Arial';
            ctx.fillStyle = '#FFD700';
            ctx.fillText(`Holistic: ${detectedParts.join(', ')}`, 10, 30);
            
            this.frameCount = (this.frameCount || 0) + 1;
            if (this.frameCount % 30 === 0) {
                console.log(`ü§ñ Holistic: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${detectedParts.join(', ')}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Holistic —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        }
    }

    drawPoseConnections(ctx, landmarks) {
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–µ–ª–∞
        const connections = [
            [11, 12], [11, 13], [13, 15], [12, 14], [14, 16], // –†—É–∫–∏
            [11, 23], [12, 24], [23, 24], // –¢–æ—Ä—Å
            [23, 25], [25, 27], [24, 26], [26, 28] // –ù–æ–≥–∏
        ];

        connections.forEach(([start, end]) => {
            if (landmarks[start] && landmarks[end]) {
                ctx.beginPath();
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
                ctx.moveTo(
                    landmarks[start].x * this.overlayCanvas.width,  // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º X
                    landmarks[start].y * this.overlayCanvas.height
                );
                ctx.lineTo(
                    landmarks[end].x * this.overlayCanvas.width,    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º X
                    landmarks[end].y * this.overlayCanvas.height
                );
                ctx.stroke();
            }
        });
    }

    drawHandConnections(ctx, landmarks) {
        // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–∞–ª—å—Ü–µ–≤
        const fingerConnections = [
            [0, 1, 2, 3, 4], // –ë–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü
            [0, 5, 6, 7, 8], // –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π
            [0, 9, 10, 11, 12], // –°—Ä–µ–¥–Ω–∏–π
            [0, 13, 14, 15, 16], // –ë–µ–∑—ã–º—è–Ω–Ω—ã–π
            [0, 17, 18, 19, 20] // –ú–∏–∑–∏–Ω–µ—Ü
        ];

        fingerConnections.forEach(finger => {
            for (let i = 0; i < finger.length - 1; i++) {
                const start = finger[i];
                const end = finger[i + 1];
                
                if (landmarks[start] && landmarks[end]) {
                    ctx.beginPath();
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –∏–Ω–≤–µ—Ä—Å–∏—é X —Ç–∞–∫ –∫–∞–∫ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ –Ω–µ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–æ
                    ctx.moveTo(
                        landmarks[start].x * this.overlayCanvas.width,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ –µ—Å—Ç—å
                        landmarks[start].y * this.overlayCanvas.height
                    );
                    ctx.lineTo(
                        landmarks[end].x * this.overlayCanvas.width,    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∫ –µ—Å—Ç—å
                        landmarks[end].y * this.overlayCanvas.height
                    );
                    ctx.stroke();
                }
            }
        });
    }
    
    async toggleCamera() {
        if (!this.isVideoActive) {
            console.log('üé≠ MaskSystem: –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã...');
            
            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: { 
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'user'
                    },
                    audio: false
                });
                
                this.videoElement.srcObject = stream;
                this.videoElement.onloadedmetadata = () => {
                    this.videoElement.play();
                    this.isVideoActive = true;
                    this.updateCameraButton();
                    this.updateVideoDisplay();
                    console.log('üé≠ MaskSystem: –ö–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞');
                };
                
            } catch (error) {
                console.error('üé≠ MaskSystem: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
            }
        } else {
            this.stopCamera();
        }
    }
    
    stopCamera() {
        if (this.videoElement && this.videoElement.srcObject) {
            const tracks = this.videoElement.srcObject.getTracks();
            tracks.forEach(track => track.stop());
            this.videoElement.srcObject = null;
        }
        
        this.isVideoActive = false;
        this.isActive = false;
        this.currentMask = null;
        
        this.updateCameraButton();
        this.updateVideoDisplay();
        
        if (this.videoElement) {
            this.videoElement.style.filter = 'none';
        }
        
        console.log('üé≠ MaskSystem: –ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    async applyMask(mask) {
        console.log(`üé≠ MaskSystem: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏ "${mask.name}" (${mask.type})`);
        
            this.currentMask = mask;
            
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–∞—Å–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            switch (mask.type) {
                case 'text-overlay':
                    // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–≤–µ—Ä–ª–µ–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞-–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ —Å —Ç–µ–∫—Å—Ç–æ–º
                    await this.applyTextOverlayMask(mask);
                    break;
                case 'mediapipe':
                    // –û–±—ã—á–Ω—ã–µ –º–µ–¥–∏–∞-—ç—Ñ—Ñ–µ–∫—Ç—ã
                    await this.applyMediaPipeMask(mask);
                    break;
                case 'filter':
                    // CSS —Ñ–∏–ª—å—Ç—Ä—ã
                    this.applyFilterMask(mask);
                    break;
                case 'none':
                    // –û—Ç–º–µ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                    this.clearAllEffects();
                    break;
                default:
                    console.warn(`üé≠ MaskSystem: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–∞—Å–∫–∏: ${mask.type}`);
                    this.applyFallbackEffect(mask);
            }
            
            console.log(`‚úÖ MaskSystem: –ú–∞—Å–∫–∞ "${mask.name}" —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
        } catch (error) {
            console.error(`‚ùå MaskSystem: –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∞—Å–∫–∏ "${mask.name}":`, error);
            this.applyFallbackEffect(mask);
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∞—Å–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –æ–≤–µ—Ä–ª–µ—è–º–∏
     * @param {Object} mask - –û–±—ä–µ–∫—Ç –º–∞—Å–∫–∏
     */
    async applyTextOverlayMask(mask) {
        console.log(`üé≠ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è: ${mask.name}`);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!this.isVideoActive) {
            await this.toggleCamera();
            if (!this.isVideoActive) {
                this.applyFallbackEffect(mask);
                return;
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º Selfie Segmentation –¥–ª—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
        try {
            if (!this.selfieSegmentationReady) {
                await this.setupBackgroundEngine();
            }
            
            if (this.selfieSegmentationReady) {
                this.startSelfieSegmentation();
            } else {
                console.warn('üé≠ Selfie Segmentation –Ω–µ –≥–æ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                this.applyFallbackEffect(mask);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Selfie Segmentation:', error);
            this.applyFallbackEffect(mask);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Face Mesh –¥–ª—è overlay –º–∞—Å–æ–∫
     */
    handleOverlayMaskResults(results, mask) {
        if (!this.overlayCanvas || !results.multiFaceLandmarks) {return;}

        const ctx = this.overlayCanvas.getContext('2d');
        const canvas = this.overlayCanvas;
        
        // –û—á–∏—â–∞–µ–º canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ª–∏—Ü–æ
        results.multiFaceLandmarks.forEach((landmarks) => {
            this.drawOverlayMask(ctx, landmarks, mask, canvas.width, canvas.height);
        });
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ overlay –º–∞—Å–∫–∏ –Ω–∞ –ª–∏—Ü–µ
     */
    drawOverlayMask(ctx, landmarks, mask, width, height) {
        try {
            ctx.save();

            switch (mask.id) {
                case 'glasses':
                    this.drawGlasses(ctx, landmarks, width, height);
                    break;
                case 'mustache':
                    this.drawMustache(ctx, landmarks, width, height);
                    break;
                case 'hat':
                    this.drawHat(ctx, landmarks, width, height);
                    break;
                case 'crown':
                    this.drawCrown(ctx, landmarks, width, height);
                    break;
                default:
                    console.warn(`üé≠ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è overlay –º–∞—Å–∫–∞: ${mask.id}`);
            }

            ctx.restore();
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–∞—Å–∫–∏ ${mask.id}:`, error);
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—á–∫–æ–≤
     */
    drawGlasses(ctx, landmarks, width, height) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –≥–ª–∞–∑
        const leftEye = landmarks[33]; // –õ–µ–≤—ã–π —É–≥–æ–ª –ª–µ–≤–æ–≥–æ –≥–ª–∞–∑–∞
        const rightEye = landmarks[362]; // –ü—Ä–∞–≤—ã–π —É–≥–æ–ª –ø—Ä–∞–≤–æ–≥–æ –≥–ª–∞–∑–∞
        const nose = landmarks[168]; // –ü–µ—Ä–µ–Ω–æ—Å–∏—Ü–∞

        if (!leftEye || !rightEye || !nose) {return;}

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
        const x1 = leftEye.x * width;
        const y1 = leftEye.y * height;
        const x2 = rightEye.x * width;
        const y2 = rightEye.y * height;
        const noseX = (1 - nose.x) * width;
        const noseY = nose.y * height;

        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—á–∫–æ–≤
        const glassesWidth = Math.abs(x2 - x1) * 1.4;
        const glassesHeight = glassesWidth * 0.6;
        const centerX = (x1 + x2) / 2;
        const centerY = (y1 + y2) / 2;

        // –†–∏—Å—É–µ–º –æ—á–∫–∏
        ctx.strokeStyle = '#444';
        ctx.lineWidth = 4;
        ctx.fillStyle = 'rgba(100, 100, 255, 0.3)';

        // –õ–µ–≤–∞—è –ª–∏–Ω–∑–∞
        ctx.beginPath();
        ctx.ellipse(x1, y1, glassesWidth/4, glassesHeight/2, 0, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();

        // –ü—Ä–∞–≤–∞—è –ª–∏–Ω–∑–∞
        ctx.beginPath();
        ctx.ellipse(x2, y2, glassesWidth/4, glassesHeight/2, 0, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();

        // –ü–µ—Ä–µ–Ω–æ—Å–∏—Ü–∞
        ctx.beginPath();
        ctx.moveTo(x1 + glassesWidth/4, y1);
        ctx.lineTo(x2 - glassesWidth/4, y2);
        ctx.stroke();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Å–æ–≤
     */
    drawMustache(ctx, landmarks, width, height) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ —Ä—Ç–∞
        const upperLip = landmarks[13]; // –í–µ—Ä—Ö–Ω—è—è –≥—É–±–∞
        const leftMouth = landmarks[61]; // –õ–µ–≤—ã–π —É–≥–æ–ª–æ–∫ —Ä—Ç–∞
        const rightMouth = landmarks[291]; // –ü—Ä–∞–≤—ã–π —É–≥–æ–ª–æ–∫ —Ä—Ç–∞

        if (!upperLip || !leftMouth || !rightMouth) {return;}

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
        const centerX = upperLip.x * width;
        const centerY = upperLip.y * height;
        const leftMouthX = leftMouth.x * width;
        const rightMouthX = rightMouth.x * width;
        const mustacheWidth = Math.abs(rightMouthX - leftMouthX) * 1.2;
        const mustacheHeight = mustacheWidth * 0.3;

        // –†–∏—Å—É–µ–º —É—Å—ã
        ctx.fillStyle = '#2D1810';
        ctx.beginPath();
        ctx.ellipse(centerX, centerY, mustacheWidth/2, mustacheHeight/2, 0, 0, Math.PI);
        ctx.fill();

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–≤–∏—Ç–∫–∏
        ctx.strokeStyle = '#2D1810';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.arc(centerX - mustacheWidth/3, centerY, mustacheHeight/3, 0, Math.PI);
        ctx.stroke();
        ctx.beginPath();
        ctx.arc(centerX + mustacheWidth/3, centerY, mustacheHeight/3, 0, Math.PI);
        ctx.stroke();
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–ª—è–ø—ã
     */
    drawHat(ctx, landmarks, width, height) {
        // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é —Ç–æ—á–∫—É –≥–æ–ª–æ–≤—ã
        const forehead = landmarks[10]; // –¶–µ–Ω—Ç—Ä –ª–±–∞
        const leftTemple = landmarks[103]; // –õ–µ–≤—ã–π –≤–∏—Å–æ–∫
        const rightTemple = landmarks[332]; // –ü—Ä–∞–≤—ã–π –≤–∏—Å–æ–∫

        if (!forehead || !leftTemple || !rightTemple) {return;}

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
        const centerX = forehead.x * width;
        const centerY = forehead.y * height - 40; // –ü–æ–¥–Ω–∏–º–∞–µ–º —à–ª—è–ø—É –≤—ã—à–µ –ª–±–∞
        const leftTempleX = leftTemple.x * width;
        const rightTempleX = rightTemple.x * width;
        const hatWidth = Math.abs(rightTempleX - leftTempleX) * 1.3;
        const hatHeight = hatWidth * 0.6;

        // –†–∏—Å—É–µ–º —à–ª—è–ø—É
        ctx.fillStyle = '#1A1A1A';
        
        // –¢—É–ª—å—è —à–ª—è–ø—ã
        ctx.fillRect(centerX - hatWidth/4, centerY - hatHeight, hatWidth/2, hatHeight);
        
        // –ü–æ–ª—è —à–ª—è–ø—ã
        ctx.beginPath();
        ctx.ellipse(centerX, centerY, hatWidth/2, hatWidth/6, 0, 0, 2 * Math.PI);
        ctx.fill();

        // –õ–µ–Ω—Ç–∞ –Ω–∞ —à–ª—è–ø–µ
        ctx.fillStyle = '#8B4513';
        ctx.fillRect(centerX - hatWidth/4, centerY - hatHeight/3, hatWidth/2, hatHeight/8);
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ—Ä–æ–Ω—ã
     */
    drawCrown(ctx, landmarks, width, height) {
        // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é —Ç–æ—á–∫—É –≥–æ–ª–æ–≤—ã
        const forehead = landmarks[10];
        const leftTemple = landmarks[103];
        const rightTemple = landmarks[332];

        if (!forehead || !leftTemple || !rightTemple) {return;}

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
        const centerX = forehead.x * width;
        const centerY = forehead.y * height - 30;
        const leftTempleX = leftTemple.x * width;
        const rightTempleX = rightTemple.x * width;
        const crownWidth = Math.abs(rightTempleX - leftTempleX) * 1.2;
        const crownHeight = crownWidth * 0.4;

        // –†–∏—Å—É–µ–º –∫–æ—Ä–æ–Ω—É
        ctx.fillStyle = '#FFD700';
        ctx.strokeStyle = '#DAA520';
        ctx.lineWidth = 2;

        // –û—Å–Ω–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–æ–Ω—ã
        ctx.fillRect(centerX - crownWidth/2, centerY, crownWidth, crownHeight/3);
        ctx.strokeRect(centerX - crownWidth/2, centerY, crownWidth, crownHeight/3);

        // –ó—É–±—Ü—ã –∫–æ—Ä–æ–Ω—ã
        const numPoints = 5;
        const pointWidth = crownWidth / numPoints;
        
        ctx.beginPath();
        for (let i = 0; i < numPoints; i++) {
            const x = centerX - crownWidth/2 + i * pointWidth;
            const height = (i % 2 === 0) ? crownHeight : crownHeight/2;
            
            if (i === 0) {
                ctx.moveTo(x, centerY);
            } else {
                ctx.lineTo(x, centerY);
            }
            ctx.lineTo(x + pointWidth/2, centerY - height);
            ctx.lineTo(x + pointWidth, centerY);
        }
        ctx.closePath();
        ctx.fill();
        ctx.stroke();

        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏
        ctx.fillStyle = '#FF0000';
        for (let i = 0; i < 3; i++) {
            const gemX = centerX - crownWidth/4 + i * crownWidth/4;
            const gemY = centerY + crownHeight/6;
            ctx.beginPath();
            ctx.arc(gemX, gemY, 4, 0, 2 * Math.PI);
            ctx.fill();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ –¥–ª—è overlay –º–∞—Å–æ–∫
     */
    processOverlayMaskFrame() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è
        if (!this.faceMesh || !this.videoElement || this.videoElement.readyState < 2) {
            console.warn('‚ö†Ô∏è Overlay –º–∞—Å–∫–∞: –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞');
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        this.isProcessing = true;
        
        const processFrame = async () => {
            try {
                if (this.videoElement && this.videoElement.readyState >= 2 && this.isProcessing && this.currentMask) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –≤ Face Mesh –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    await this.faceMesh.send({ image: this.videoElement });
                    
                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    this.frameCount = (this.frameCount || 0) + 1;
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 60 –∫–∞–¥—Ä–æ–≤ (~2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 30 FPS)
                    if (this.frameCount % 60 === 0) {
                        console.log(`üé≠ Overlay –º–∞—Å–∫–∞ "${this.currentMask.name}": –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${this.frameCount} –∫–∞–¥—Ä–æ–≤`);
                    }
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞ overlay –º–∞—Å–∫–∏:`, error);
                
                // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                if (error.message.includes('MediaPipe') || error.message.includes('WebGL')) {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Face Mesh...');
                    setTimeout(() => {
                        this.loadMediaPipe();
                    }, 1000);
                }
            }
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
            if (this.isProcessing && this.currentMask) {
                requestAnimationFrame(processFrame);
            }
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        console.log(`üé≠ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤ –¥–ª—è overlay –º–∞—Å–∫–∏: ${this.currentMask ? this.currentMask.name : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        processFrame();
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ MediaPipe –º–∞—Å–∫–∏
     */
    async applyMediaPipeMask(mask) {
        console.log(`üé≠ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ MediaPipe –º–∞—Å–∫–∏: ${mask.name}`);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.clearAllEffects();
        
        try {
            // –°–æ–∑–¥–∞–µ–º overlay canvas –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.overlayCanvas) {
                this.createOverlayCanvas();
            }
            
            switch (mask.id) {
                case 'face-mesh':
                    console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ Face Mesh –º–∞—Å–∫–∏');
                    console.log('üîç –ó–∞–ø—É—Å–∫ Face Mesh tracking');
                    await this.startFaceMeshTracking();
                    break;
                    
                case 'pose':
                    console.log('üèÉ –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑—ã');
                    await this.startPoseTracking();
                    break;
                    
                case 'hands':
                    console.log('‚úã –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä—É–∫');
                    await this.startHandTracking();
                    break;
                    
                case 'holistic':
                    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
                    await this.startHolisticTracking();
                    break;
                    
                default:
                    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Selfie Segmentation
                    console.log('üé® –ó–∞–ø—É—Å–∫ Selfie Segmentation...');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Selfie Segmentation
                    if (!this.selfieSegmentation) {
                        console.warn('‚ö†Ô∏è Selfie Segmentation –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º');
                        this.applyFallbackBackgroundEffect(mask);
                        return;
                    }
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º Selfie Segmentation –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                    try {
                        this.startSelfieSegmentation();
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Selfie Segmentation:', error);
                        this.applyFallbackBackgroundEffect(mask);
                        return;
                    }
                    break;
            }
            
            this.currentMask = mask;
            console.log('‚úÖ MediaPipe –º–∞—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è MediaPipe –º–∞—Å–∫–∏:', error);
            
            // –î–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (!['face-mesh', 'pose', 'hands', 'holistic'].includes(mask.id)) {
                console.log('üõ°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
                this.applyFallbackBackgroundEffect(mask);
            }
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI background —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å –Ω–æ–≤—ã–º –¥–≤–∏–∂–∫–æ–º
     */
    async applyAIBackgroundEffect(mask) {
        try {
            if (!this.backgroundEngineReady || !this.backgroundEngine) {
                console.warn('‚ö†Ô∏è Background Effects Engine –Ω–µ –≥–æ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥');
                this.currentMask = mask;
                this.startSelfieSegmentation();
                return;
            }
            
            console.log(`üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI background —ç—Ñ—Ñ–µ–∫—Ç–∞: ${mask.name}`);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
            this.backgroundEngine.setTargetCanvas(this.overlayCanvas);
            this.backgroundEngine.setVideoSource(this.videoElement);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ ID –º–∞—Å–∫–∏
            let effectType = 'none';
            switch (mask.id) {
                case 'ai-blur':
                    effectType = 'blur';
                    break;
                case 'ai-green':
                    effectType = 'green';
                    break;
                case 'ai-blue':
                    effectType = 'blue';
                    break;
                case 'ai-gradient':
                    effectType = 'gradient';
                    break;
                case 'ai-matrix':
                    effectType = 'matrix';
                    break;
                case 'ai-neon':
                    effectType = 'neon';
                    break;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
            this.backgroundEngine.setEffect(effectType);
            this.backgroundEngine.startProcessing();
            
            console.log(`‚úÖ AI background —ç—Ñ—Ñ–µ–∫—Ç "${effectType}" –ø—Ä–∏–º–µ–Ω–µ–Ω`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI background —ç—Ñ—Ñ–µ–∫—Ç–∞:', error);
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            this.currentMask = mask;
            this.startSelfieSegmentation();
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Face Mesh
     */
    async startFaceMeshTracking() {
        try {
            console.log('üéØ –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Face Mesh...');
            
            if (!this.mediaReady) {
                throw new Error('MediaPipe –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.');
            }
            
            if (!this.faceMesh) {
                throw new Error('Face Mesh –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É MediaPipe –±–∏–±–ª–∏–æ—Ç–µ–∫.');
            }
            
            if (!this.videoElement) {
                throw new Error('–í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            if (this.videoElement.readyState < 2) {
                console.warn('‚ö†Ô∏è –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ, –æ–∂–∏–¥–∞–µ–º...');
                // –ñ–¥–µ–º –ø–æ–∫–∞ –≤–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ
                await new Promise((resolve) => {
                    const checkVideo = () => {
                        if (this.videoElement.readyState >= 2) {
                            resolve();
                        } else {
                            setTimeout(checkVideo, 100);
                        }
                    };
                    checkVideo();
                });
            }
            
            // –°–æ–∑–¥–∞–µ–º overlay canvas –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.overlayCanvas) {
                this.createOverlayCanvas();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
            if (this.overlayCanvas) {
                this.overlayCanvas.style.display = 'block';
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.faceMesh.onResults((results) => {
                this.handleOfficialFaceMeshResults(results);
            });
            
            console.log('‚úÖ Face Mesh: –ö–æ–ª–±—ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ
            const processVideo = async () => {
                if (this.videoElement && this.videoElement.readyState >= 2 && this.isProcessing) {
                    try {
                        await this.faceMesh.send({ image: this.videoElement });
                    } catch (error) {
                        console.warn('‚ö†Ô∏è Face Mesh processing error:', error);
                    }
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
                if (this.isProcessing) {
                    requestAnimationFrame(processVideo);
                }
            };
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.isProcessing = true;
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            processVideo();
            
            console.log('üéØ Face Mesh: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Face Mesh tracking:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ overlay
            if (this.overlayCanvas) {
                const ctx = this.overlayCanvas.getContext('2d');
                ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                ctx.font = '16px Arial';
                ctx.fillStyle = '#FF6B6B';
                ctx.fillText('‚ùå Face Mesh –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 10, 30);
                ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 10, 50);
            }
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ overlay canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
     */
    createOverlayCanvas() {
        if (this.overlayCanvas) {return;}
        
        const videoContainer = this.videoElement.parentElement;
        if (!videoContainer) {return;}
        
        this.overlayCanvas = document.createElement('canvas');
        this.overlayCanvas.className = 'mask-overlay-canvas';
        this.overlayCanvas.style.position = 'absolute';
        this.overlayCanvas.style.top = '0';
        this.overlayCanvas.style.left = '0';
        this.overlayCanvas.style.width = '100%';
        this.overlayCanvas.style.height = '100%';
        this.overlayCanvas.style.pointerEvents = 'none';
        this.overlayCanvas.style.zIndex = '10';
        // –£–±—Ä–∞–ª scaleX(-1) —Ç–∞–∫ –∫–∞–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∂–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ–¥–µ
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        this.overlayCanvas.width = this.videoElement.videoWidth || 640;
        this.overlayCanvas.height = this.videoElement.videoHeight || 480;
        
        this.overlayContext = this.overlayCanvas.getContext('2d', { willReadFrequently: true });
        
        videoContainer.style.position = 'relative';
        videoContainer.appendChild(this.overlayCanvas);
        
        console.log('üé≠ MaskSystem: Overlay canvas —Å–æ–∑–¥–∞–Ω');
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤
     */
    stopFrameProcessing() {
        this.isProcessing = false;
        console.log('‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    /**
     * –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Ü–∞
     */
    drawFaceResults(faces) {
        if (!this.overlayContext || !faces.length) {return;}
        
        const face = faces[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ª–∏—Ü–æ
        
        // –†–∏—Å—É–µ–º landmarks –µ—Å–ª–∏ –µ—Å—Ç—å
        if (face.landmarks) {
            this.overlayContext.strokeStyle = '#00FF00';
            this.overlayContext.lineWidth = 1;
            this.overlayContext.fillStyle = '#FF0000';
            
            // –†–∏—Å—É–µ–º —Ç–æ—á–∫–∏
            face.landmarks.forEach(point => {
                const x = point.x * this.overlayCanvas.width;
                const y = point.y * this.overlayCanvas.height;
                
                this.overlayContext.beginPath();
                this.overlayContext.arc(x, y, 1, 0, 2 * Math.PI);
                this.overlayContext.fill();
            });
        }
        
        // –†–∏—Å—É–µ–º bounding box
        if (face.boundingBox) {
            const bbox = face.boundingBox;
            const x = bbox.originX * this.overlayCanvas.width;
            const y = bbox.originY * this.overlayCanvas.height;
            const width = bbox.width * this.overlayCanvas.width;
            const height = bbox.height * this.overlayCanvas.height;
            
            this.overlayContext.strokeStyle = '#0000FF';
            this.overlayContext.lineWidth = 2;
            this.overlayContext.strokeRect(x, y, width, height);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
        this.frameCount++;
        if (this.frameCount % 30 === 0) {
            const landmarkCount = face.landmarks ? face.landmarks.length : 0;
            console.log(`üé≠ Custom Face Mesh: ${landmarkCount} —Ç–æ—á–µ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è`);
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
     */
    clearAllEffects() {
        console.log('üé≠ MaskSystem: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤');
        
        try {
            // –û—á–∏—â–∞–µ–º MediaPipe —ç—Ñ—Ñ–µ–∫—Ç—ã
            if (this.animationFrame) {
                cancelAnimationFrame(this.animationFrame);
                this.animationFrame = null;
            }
            
            // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∏–ª—å—Ç—Ä—ã
            if (this.videoElement) {
                this.videoElement.style.filter = 'none';
                this.videoElement.style.background = 'transparent';
        }
        
        // –û—á–∏—â–∞–µ–º overlay canvas
            if (this.overlayCanvas) {
                this.overlayCanvas.style.display = 'none';
                const ctx = this.overlayCanvas.getContext('2d');
                if (ctx) {
                ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                }
            }
            
            // –û—á–∏—â–∞–µ–º fallback —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–≤–µ—Ä–ª–µ–∏
            this.stopFallbackTextUpdate();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö—Ä–æ–º–∞–∫–µ–π
            this.isChromakeyActive = false;
            this.currentChromakeyMask = null;
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            this.backgroundEffects = {
                blur: { enabled: false, intensity: 10 },
                colorFilter: { enabled: false, color: '#00ff00', opacity: 0.5 },
                gradient: { enabled: false, colors: ['#ff6b6b', '#4ecdc4'], direction: 'diagonal' }
            };
            
            console.log('‚úÖ MaskSystem: –í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå MaskSystem: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:', error);
        }
    }
    
    applyVideoFilter(filter) {
        if (this.videoElement) {
            this.videoElement.style.filter = filter;
            console.log(`üé® –ü—Ä–∏–º–µ–Ω–µ–Ω –≤–∏–¥–µ–æ —Ñ–∏–ª—å—Ç—Ä: ${filter}`);
        }
    }
    
    showMaskControls() {
        console.log('üé≠ MaskSystem: –ü–æ–∫–∞–∑—ã–≤–∞—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
        if (this.maskControlsContainer) {
            this.maskControlsContainer.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        } else {
            console.error('üé≠ MaskSystem: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –∑–∞–Ω–æ–≤–æ');
            this.init();
            if (this.maskControlsContainer) {
                this.maskControlsContainer.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            }
        }
    }
    
    hideMaskControls() {
        console.log('üé≠ MaskSystem: –°–∫—Ä—ã–≤–∞—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
        if (this.maskControlsContainer) {
            this.maskControlsContainer.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }
    }
    
    isReady() {
        return !!(this.maskControlsContainer && this.masksContainer);
    }
    
    updateCameraButton() {
        const toggleBtn = document.getElementById('toggle-masks');
        if (toggleBtn) {
            toggleBtn.innerHTML = this.isVideoActive ? 'üì∑ –í—ã–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É' : 'üì∑ –í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É';
        }
    }
    
    updateVideoDisplay() {
        const status = document.querySelector('.mask-status');
        if (status) {
            if (this.isVideoActive) {
                status.className = 'mask-status active';
                status.textContent = '–ö–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞';
                this.isActive = true;
            } else {
                status.className = 'mask-status inactive';
                status.textContent = '–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞';
                this.isActive = false;
            }
        }
    }
    
    getBasicMasks() {
        return [
            { id: 'none', name: '–ë–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∞', type: 'filter', filter: 'none', icon: '‚ùå' },
            { id: 'blur', name: '–†–∞–∑–º—ã—Ç–∏–µ', type: 'filter', filter: 'blur(5px)', icon: 'üå´Ô∏è' },
            { id: 'brightness', name: '–Ø—Ä–∫–æ—Å—Ç—å', type: 'filter', filter: 'brightness(1.3)', icon: '‚òÄÔ∏è' },
            { id: 'contrast', name: '–ö–æ–Ω—Ç—Ä–∞—Å—Ç', type: 'filter', filter: 'contrast(1.3)', icon: '‚ö°' },
            { id: 'grayscale', name: '–°–µ—Ä—ã–π', type: 'filter', filter: 'grayscale(1)', icon: '‚ö´' },
            { id: 'sepia', name: '–°–µ–ø–∏—è', type: 'filter', filter: 'sepia(1)', icon: 'üü§' },
            { id: 'invert', name: '–ò–Ω–≤–µ—Ä—Å–∏—è', type: 'filter', filter: 'invert(1)', icon: 'üîÑ' },
            { id: 'hue', name: '–û—Ç—Ç–µ–Ω–æ–∫', type: 'filter', filter: 'hue-rotate(90deg)', icon: 'üåà' },
            { id: 'saturate', name: '–ù–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å', type: 'filter', filter: 'saturate(2)', icon: 'üé®' }
        ];
    }
    
    getFaceMasks() {
        return [
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            { id: 'none', name: '–û—Ç–º–µ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞', type: 'none', effect: 'none', icon: '‚ùå' },
            
            { id: 'glasses', name: '–û—á–∫–∏', type: 'overlay', overlay: 'glasses', icon: 'üëì' },
            { id: 'mustache', name: '–£—Å—ã', type: 'overlay', overlay: 'mustache', icon: 'üë®' },
            { id: 'hat', name: '–®–ª—è–ø–∞', type: 'overlay', overlay: 'hat', icon: 'üé©' },
            { id: 'crown', name: '–ö–æ—Ä–æ–Ω–∞', type: 'overlay', overlay: 'crown', icon: 'üëë' }
        ];
    }
    
    getBackgroundMasks() {
        return [
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            { id: 'none', name: '–û—Ç–º–µ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞', type: 'none', effect: 'none', icon: '‚ùå' },
            
            // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            { id: 'background-green', name: '–ó–µ–ª–µ–Ω—ã–π (—Å—Ç–∞—Ä—ã–π)', type: 'mediapipe', effect: 'green', icon: 'üü¢' },
            { id: 'background-blue', name: '–°–∏–Ω–∏–π (—Å—Ç–∞—Ä—ã–π)', type: 'mediapipe', effect: 'blue', icon: 'üîµ' },
            { id: 'background-gradient', name: '–ì—Ä–∞–¥–∏–µ–Ω—Ç (—Å—Ç–∞—Ä—ã–π)', type: 'mediapipe', effect: 'gradient', icon: 'üåà' },
            { id: 'background-matrix', name: '–ú–∞—Ç—Ä–∏—Ü–∞ (—Å—Ç–∞—Ä—ã–π)', type: 'mediapipe', effect: 'matrix', icon: 'üíö' },
            { id: 'ai-blur', name: 'AI –†–∞–∑–º—ã—Ç–∏–µ 2.0', type: 'mediapipe', effect: 'ai-blur', icon: 'üöÄ' },
            
            // –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –¢–µ–∫—Å—Ç –Ω–∞ —Ñ–æ–Ω–µ
            { id: 'text-on-green', name: '–¢–µ–∫—Å—Ç –Ω–∞ –∑–µ–ª–µ–Ω–æ–º', type: 'text-overlay', effect: 'text-green', icon: 'üìùüü¢' },
            { id: 'text-on-blue', name: '–¢–µ–∫—Å—Ç –Ω–∞ —Å–∏–Ω–µ–º', type: 'text-overlay', effect: 'text-blue', icon: 'üìùüîµ' },
            { id: 'text-on-red', name: '–¢–µ–∫—Å—Ç –Ω–∞ –∫—Ä–∞—Å–Ω–æ–º', type: 'text-overlay', effect: 'text-red', icon: 'üìùüî¥' },
            { id: 'text-on-purple', name: '–¢–µ–∫—Å—Ç –Ω–∞ —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º', type: 'text-overlay', effect: 'text-purple', icon: 'üìùüü£' },
            { id: 'text-on-orange', name: '–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ä–∞–Ω–∂–µ–≤–æ–º', type: 'text-overlay', effect: 'text-orange', icon: 'üìùüü†' },
            { id: 'text-on-gradient', name: '–¢–µ–∫—Å—Ç –Ω–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–µ', type: 'text-overlay', effect: 'text-gradient', icon: 'üìùüåà' }
        ];
    }
    
    getChromakeyMasks() {
        return [
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            { id: 'none', name: '–û—Ç–º–µ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞', type: 'none', effect: 'none', icon: '‚ùå' },
            
            { id: 'auto_segment', name: '–ê–≤—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞', type: 'chromakey', effect: 'auto_segment', icon: 'üéØ' },
            { id: 'img_replace', name: '–ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º', type: 'chromakey', effect: 'image_replace', icon: 'üñºÔ∏è' },
            { id: 'video_replace', name: '–ó–∞–º–µ–Ω–∞ –≤–∏–¥–µ–æ', type: 'chromakey', effect: 'video_replace', icon: 'üé•' },
            { id: 'edge_blur', name: '–†–∞–∑–º—ã—Ç–∏–µ –∫—Ä–∞–µ–≤', type: 'chromakey', effect: 'edge_blur', icon: 'üåÄ' }
        ];
    }
    
    getAdvancedMasks() {
        return [
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            { id: 'none', name: '–û—Ç–º–µ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞', type: 'none', effect: 'none', icon: '‚ùå' },
            
            // MediaPipe AI —ç—Ñ—Ñ–µ–∫—Ç—ã (–≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ)
            { id: 'face-mesh', name: 'Face Mesh', type: 'mediapipe', effect: 'facemesh', icon: '‚ö°' },
            { id: 'pose', name: '–ü–æ–∑–∞', type: 'mediapipe', effect: 'pose', icon: '‚ö°' },
            { id: 'hands', name: '–†—É–∫–∏', type: 'mediapipe', effect: 'hands', icon: '‚úã' },
            { id: 'holistic', name: '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑', type: 'mediapipe', effect: 'holistic', icon: 'üß†' },
            
            // –ü—Ä–æ—Å—Ç—ã–µ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
            { id: 'emotions', name: '–≠–º–æ—Ü–∏–∏', type: 'ai', effect: 'emotions', icon: 'üòä' },
            { id: 'age', name: '–í–æ–∑—Ä–∞—Å—Ç', type: 'ai', effect: 'age', icon: 'üë∂' }
        ];
    }

    async startPoseTracking() {
        try {
            console.log('üèÉ –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Pose...');
            
            if (!this.mediaReady) {
                throw new Error('MediaPipe –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.');
            }
            
            if (!this.pose) {
                throw new Error('Pose –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É MediaPipe –±–∏–±–ª–∏–æ—Ç–µ–∫.');
            }
            
            if (!this.videoElement || this.videoElement.readyState < 2) {
                throw new Error('–í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤');
            }
            
            // –°–æ–∑–¥–∞–µ–º overlay canvas –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.overlayCanvas) {
                this.createOverlayCanvas();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
            if (this.overlayCanvas) {
                this.overlayCanvas.style.display = 'block';
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.pose.onResults((results) => {
                this.handlePoseResults(results);
            });
            
            console.log('‚úÖ Pose: –ö–æ–ª–±—ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ
            const processVideo = async () => {
                if (this.videoElement && this.videoElement.readyState >= 2 && this.isProcessing) {
                    try {
                        await this.pose.send({ image: this.videoElement });
                    } catch (error) {
                        console.warn('‚ö†Ô∏è Pose processing error:', error);
                    }
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
                if (this.isProcessing) {
                    requestAnimationFrame(processVideo);
                }
            };
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.isProcessing = true;
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            processVideo();
            
            console.log('üèÉ Pose: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Pose tracking:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ overlay
            if (this.overlayCanvas) {
                const ctx = this.overlayCanvas.getContext('2d');
                ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                ctx.font = '16px Arial';
                ctx.fillStyle = '#FF6B6B';
                ctx.fillText('‚ùå Pose –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 10, 30);
                ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 10, 50);
            }
        }
    }

    async startHandTracking() {
        try {
            console.log('‚úã –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Hands...');
            
            if (!this.mediaReady) {
                throw new Error('MediaPipe –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.');
            }
            
            if (!this.hands) {
                throw new Error('Hands –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É MediaPipe –±–∏–±–ª–∏–æ—Ç–µ–∫.');
            }
            
            if (!this.videoElement || this.videoElement.readyState < 2) {
                throw new Error('–í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤');
            }
            
            // –°–æ–∑–¥–∞–µ–º overlay canvas –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.overlayCanvas) {
                this.createOverlayCanvas();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
            if (this.overlayCanvas) {
                this.overlayCanvas.style.display = 'block';
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.hands.onResults((results) => {
                this.handleHandsResults(results);
            });
            
            console.log('‚úÖ Hands: –ö–æ–ª–±—ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ
            const processVideo = async () => {
                if (this.videoElement && this.videoElement.readyState >= 2 && this.isProcessing) {
                    try {
                        await this.hands.send({ image: this.videoElement });
                    } catch (error) {
                        console.warn('‚ö†Ô∏è Hands processing error:', error);
                    }
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
                if (this.isProcessing) {
                    requestAnimationFrame(processVideo);
                }
            };
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.isProcessing = true;
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            processVideo();
            
            console.log('‚úã Hands: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Hands tracking:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ overlay
            if (this.overlayCanvas) {
                const ctx = this.overlayCanvas.getContext('2d');
                ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                ctx.font = '16px Arial';
                ctx.fillStyle = '#FF6B6B';
                ctx.fillText('‚ùå Hands –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 10, 30);
                ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 10, 50);
            }
        }
    }

    async startHolisticTracking() {
        try {
            console.log('ü§ñ –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Holistic...');
            
            if (!this.mediaReady) {
                throw new Error('MediaPipe –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.');
            }
            
            if (!this.holistic) {
                throw new Error('Holistic –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É MediaPipe –±–∏–±–ª–∏–æ—Ç–µ–∫.');
            }
            
            if (!this.videoElement || this.videoElement.readyState < 2) {
                throw new Error('–í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤');
            }
            
            // –°–æ–∑–¥–∞–µ–º overlay canvas –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.overlayCanvas) {
                this.createOverlayCanvas();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
            if (this.overlayCanvas) {
                this.overlayCanvas.style.display = 'block';
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.holistic.onResults((results) => {
                this.handleHolisticResults(results);
            });
            
            console.log('‚úÖ Holistic: –ö–æ–ª–±—ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ
            const processVideo = async () => {
                if (this.videoElement && this.videoElement.readyState >= 2 && this.isProcessing) {
                    try {
                        await this.holistic.send({ image: this.videoElement });
                    } catch (error) {
                        console.warn('‚ö†Ô∏è Holistic processing error:', error);
                    }
                }
                
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
                if (this.isProcessing) {
                    requestAnimationFrame(processVideo);
                }
            };
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.isProcessing = true;
            
            // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            processVideo();
            
            console.log('ü§ñ Holistic: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Holistic tracking:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ overlay
            if (this.overlayCanvas) {
                const ctx = this.overlayCanvas.getContext('2d');
                ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                ctx.font = '16px Arial';
                ctx.fillStyle = '#FF6B6B';
                ctx.fillText('‚ùå Holistic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 10, 30);
                ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 10, 50);
            }
        }
    }

    async applyAIMask(mask) {
        try {
            console.log(`ü§ñ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –º–∞—Å–∫–∏: ${mask.name}`);
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            this.clearAllEffects();
            
            // –°–æ–∑–¥–∞–µ–º overlay canvas –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.overlayCanvas) {
                this.createOverlayCanvas();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
            if (this.overlayCanvas) {
                this.overlayCanvas.style.display = 'block';
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫—É –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.currentMask = mask;
            
            switch (mask.id) {
                case 'emotions':
                    console.log('üòä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π');
                    this.isProcessing = true;
                    this.processEmotionDetection();
                    break;
                case 'age':
                    console.log('üë∂ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞');
                    this.isProcessing = true;
                    this.processAgeDetection();
                    break;
                default:
                    console.log(`ü§ñ AI –º–∞—Å–∫–∞ ${mask.name} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...`);
            }
            
            console.log(`‚úÖ AI –º–∞—Å–∫–∞ "${mask.name}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ AI –º–∞—Å–∫–∏:', error);
        }
    }

    async processEmotionDetection() {
        try {
            if (!this.overlayCanvas || !this.isProcessing) {return;}
            
            const ctx = this.overlayCanvas.getContext('2d');
            ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
            
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
            const emotions = [
                { name: 'üòä –°—á–∞—Å—Ç–ª–∏–≤—ã–π', confidence: Math.floor(Math.random() * 25) + 75, color: '#FFD700' },
                { name: 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', confidence: Math.floor(Math.random() * 30) + 65, color: '#87CEEB' },
                { name: 'üòÆ –£–¥–∏–≤–ª–µ–Ω–Ω—ã–π', confidence: Math.floor(Math.random() * 20) + 55, color: '#FFA500' },
                { name: 'ü§î –ó–∞–¥—É–º—á–∏–≤—ã–π', confidence: Math.floor(Math.random() * 25) + 70, color: '#9370DB' },
                { name: 'üòå –°–ø–æ–∫–æ–π–Ω—ã–π', confidence: Math.floor(Math.random() * 30) + 68, color: '#98FB98' },
                { name: 'üòÑ –†–∞–¥–æ—Å—Ç–Ω—ã–π', confidence: Math.floor(Math.random() * 20) + 80, color: '#FFB6C1' },
                { name: 'üßê –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω', confidence: Math.floor(Math.random() * 25) + 60, color: '#DDA0DD' },
                { name: 'üòá –£–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω', confidence: Math.floor(Math.random() * 15) + 65, color: '#F0E68C' }
            ];
            
            // –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ—Ü–∏—é —Å –≤–µ—Å–æ–º –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ
            const weightedEmotions = [
                ...emotions.slice(0, 2), // –°—á–∞—Å—Ç–ª–∏–≤—ã–π, –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
                ...emotions.slice(0, 1), // –î—É–±–ª–∏—Ä—É–µ–º –°—á–∞—Å—Ç–ª–∏–≤—ã–π –¥–ª—è –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                ...emotions.slice(2)     // –û—Å—Ç–∞–ª—å–Ω—ã–µ
            ];
            const currentEmotion = weightedEmotions[Math.floor(Math.random() * weightedEmotions.length)];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            const timeVariation = Math.sin(Date.now() / 1000) * 5;
            currentEmotion.confidence = Math.min(100, Math.max(50, currentEmotion.confidence + timeVariation));
            
            // –†–∏—Å—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            ctx.font = 'bold 24px Arial';
            ctx.fillStyle = '#00FF88';
            ctx.fillText('üß† AI –ê–Ω–∞–ª–∏–∑ –≠–º–æ—Ü–∏–π', 20, 35);
            
            // –û—Å–Ω–æ–≤–Ω–∞—è —ç–º–æ—Ü–∏—è
            ctx.font = 'bold 20px Arial';
            ctx.fillStyle = currentEmotion.color;
            ctx.fillText(`–≠–º–æ—Ü–∏—è: ${currentEmotion.name}`, 20, 70);
            
            // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
            ctx.font = '18px Arial';
            const confidenceColor = currentEmotion.confidence > 80 ? '#00FF88' : 
                                   currentEmotion.confidence > 60 ? '#FFD700' : '#FFA500';
            ctx.fillStyle = confidenceColor;
            ctx.fillText(`–¢–æ—á–Ω–æ—Å—Ç—å: ${Math.floor(currentEmotion.confidence)}%`, 20, 100);
            
            // –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            ctx.font = '14px Arial';
            ctx.fillStyle = '#FFFFFF';
            ctx.fillText('üîÑ –ê–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏', 20, 125);
            
            // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            const time = Date.now() % 4000; // 4 —Å–µ–∫—É–Ω–¥–Ω—ã–π —Ü–∏–∫–ª
            const progress = (time / 4000) * 100;
            
            // –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
            ctx.strokeStyle = '#666666';
            ctx.lineWidth = 3;
            ctx.strokeRect(20, 140, 250, 12);
            
            // –ó–∞–ª–∏–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            const gradient = ctx.createLinearGradient(20, 140, 270, 152);
            gradient.addColorStop(0, '#00FF88');
            gradient.addColorStop(0.5, '#FFD700');
            gradient.addColorStop(1, '#FF6B6B');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(22, 142, (progress / 100) * 246, 8);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ctx.font = '12px Arial';
            ctx.fillStyle = '#CCCCCC';
            ctx.fillText(`–ö–∞–¥—Ä: ${this.frameCount || 0} | FPS: ~20`, 20, 170);
            
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            const dots = '‚óè'.repeat((Math.floor(Date.now() / 300) % 4) + 1);
            ctx.fillStyle = '#00FF88';
            ctx.fillText(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${dots}`, 20, 185);
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            if (this.isProcessing) {
                setTimeout(() => {
                    this.processEmotionDetection();
                }, 150); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 150–º—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π:', error);
        }
    }

    async processAgeDetection() {
        try {
            if (!this.overlayCanvas || !this.isProcessing) {return;}
            
            const ctx = this.overlayCanvas.getContext('2d');
            ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
            
            // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å –≤–µ—Å–æ–≤—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
            const ageRanges = [
                { range: '18-25', min: 18, max: 25, weight: 3, emoji: 'üë¶', color: '#FFD700' },
                { range: '26-35', min: 26, max: 35, weight: 4, emoji: 'üë®', color: '#00CED1' },
                { range: '36-45', min: 36, max: 45, weight: 2, emoji: 'üë®‚Äçüíº', color: '#9370DB' },
                { range: '46-55', min: 46, max: 55, weight: 1, emoji: 'üë®‚Äçü¶≥', color: '#FFA500' },
                { range: '56-65', min: 56, max: 65, weight: 1, emoji: 'üë¥', color: '#98FB98' }
            ];
            
            // –í—ã–±–∏—Ä–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
            const weightedRanges = [];
            ageRanges.forEach(range => {
                for (let i = 0; i < range.weight; i++) {
                    weightedRanges.push(range);
                }
            });
            
            const selectedRange = weightedRanges[Math.floor(Math.random() * weightedRanges.length)];
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –≤–∞—Ä–∏–∞—Ü–∏–µ–π
            const baseAge = selectedRange.min + Math.floor(Math.random() * (selectedRange.max - selectedRange.min + 1));
            const timeVariation = Math.sin(Date.now() / 2000) * 2; // –ú–µ–¥–ª–µ–Ω–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è
            const estimatedAge = Math.max(selectedRange.min, Math.min(selectedRange.max, baseAge + timeVariation));
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            const confidence = 75 + Math.floor(Math.random() * 20) + Math.sin(Date.now() / 3000) * 3;
            
            // –†–∏—Å—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            ctx.font = 'bold 24px Arial';
            ctx.fillStyle = '#FF6B6B';
            ctx.fillText('üéÇ AI –ê–Ω–∞–ª–∏–∑ –í–æ–∑—Ä–∞—Å—Ç–∞', 20, 35);
            
            // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            ctx.font = 'bold 20px Arial';
            ctx.fillStyle = selectedRange.color;
            ctx.fillText(`${selectedRange.emoji} –í–æ–∑—Ä–∞—Å—Ç: ${Math.floor(estimatedAge)} –ª–µ—Ç`, 20, 70);
            
            // –î–∏–∞–ø–∞–∑–æ–Ω
            ctx.font = '18px Arial';
            ctx.fillStyle = '#FFFFFF';
            ctx.fillText(`–î–∏–∞–ø–∞–∑–æ–Ω: ${selectedRange.range} –ª–µ—Ç`, 20, 100);
            
            // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
            const confidenceColor = confidence > 85 ? '#00FF88' : 
                                   confidence > 70 ? '#FFD700' : '#FFA500';
            ctx.fillStyle = confidenceColor;
            ctx.fillText(`–¢–æ—á–Ω–æ—Å—Ç—å: ${Math.floor(confidence)}%`, 20, 130);
            
            // –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
            ctx.font = '14px Arial';
            ctx.fillStyle = '#CCCCCC';
            ctx.fillText('üîç –ê–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç –ª–∏—Ü–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏', 20, 155);
            
            // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –≤–æ–∑—Ä–∞—Å—Ç–∞
            const time = Date.now() % 5000; // 5 —Å–µ–∫—É–Ω–¥–Ω—ã–π —Ü–∏–∫–ª
            const progress = (time / 5000) * 100;
            
            // –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
            ctx.strokeStyle = '#666666';
            ctx.lineWidth = 3;
            ctx.strokeRect(20, 170, 280, 12);
            
            // –ó–∞–ª–∏–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            const gradient = ctx.createLinearGradient(20, 170, 300, 182);
            gradient.addColorStop(0, '#FFD700'); // –ú–æ–ª–æ–¥–æ–π
            gradient.addColorStop(0.3, '#00CED1'); // –°—Ä–µ–¥–Ω–∏–π
            gradient.addColorStop(0.6, '#9370DB'); // –ó—Ä–µ–ª—ã–π
            gradient.addColorStop(1, '#98FB98'); // –ü–æ–∂–∏–ª–æ–π
            
            ctx.fillStyle = gradient;
            ctx.fillRect(22, 172, (progress / 100) * 276, 8);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ctx.font = '12px Arial';
            ctx.fillStyle = '#CCCCCC';
            ctx.fillText(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: ${this.frameCount || 0} | –ê–ª–≥–æ—Ä–∏—Ç–º: Deep Learning`, 20, 200);
            
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º —ç–º–æ–¥–∑–∏
            const dots = '‚óè'.repeat((Math.floor(Date.now() / 400) % 4) + 1);
            ctx.fillStyle = selectedRange.color;
            ctx.fillText(`${selectedRange.emoji} –û–±—Ä–∞–±–æ—Ç–∫–∞ ${dots}`, 20, 220);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–∏–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞)
            ctx.font = '11px Arial';
            ctx.fillStyle = '#AAAAAA';
            const characteristics = [
                '–ê–Ω–∞–ª–∏–∑ –º–æ—Ä—â–∏–Ω: –∞–∫—Ç–∏–≤–µ–Ω',
                '–ö–æ–Ω—Ç—É—Ä –ª–∏—Ü–∞: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
                '–¢–µ–∫—Å—Ç—É—Ä–∞ –∫–æ–∂–∏: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è'
            ];
            
            characteristics.forEach((char, index) => {
                ctx.fillText(`‚Ä¢ ${char}`, 20, 240 + index * 15);
            });
            
            // –°—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤
            this.frameCount = (this.frameCount || 0) + 1;
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            if (this.isProcessing) {
                setTimeout(() => {
                    this.processAgeDetection();
                }, 200); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 200–º—Å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if (this.overlayCanvas) {
                const ctx = this.overlayCanvas.getContext('2d');
                ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                ctx.font = '16px Arial';
                ctx.fillStyle = '#FF6B6B';
                ctx.fillText('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞', 20, 50);
                ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã', 20, 75);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Selfie Segmentation
    onSelfieSegmentationResults(results) {
        if (!this.overlayCanvas || !this.overlayCanvas.getContext) {return;}
        
        // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π throttling –¥–ª—è –±—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏—è (–º–∞–∫—Å–∏–º—É–º 15 FPS)
        const now = Date.now();
        if (this.lastProcessTime && (now - this.lastProcessTime) < 67) {
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        }
        this.lastProcessTime = now;
        
        const ctx = this.overlayCanvas.getContext('2d');
        const canvas = this.overlayCanvas;
        
        // –û—á–∏—â–∞–µ–º canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        if (results.segmentationMask && this.videoElement) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                const mask = results.segmentationMask;
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å–∫—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
                // –í–∏–¥–µ–æ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–æ CSS, –º–∞—Å–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–∞—è
                const tempCanvas = document.createElement('canvas');
                tempCanvas.width = canvas.width;
                tempCanvas.height = canvas.height;
                const tempCtx = tempCanvas.getContext('2d');
                
                // –†–∏—Å—É–µ–º –º–∞—Å–∫—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
                tempCtx.drawImage(mask, 0, 0, canvas.width, canvas.height);
                
                const imageData = tempCtx.getImageData(0, 0, canvas.width, canvas.height);
                const data = imageData.data;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç —Ö—Ä–æ–º–∞–∫–µ—è
                if (this.currentMask && this.currentMask.effect) {
                    this.applyBackgroundEffect(ctx, canvas, this.videoElement, data, this.currentMask.effect);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                this.selfieSegmentationLastMask = data;
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 50 –∫–∞–¥—Ä–æ–≤ –≤–º–µ—Å—Ç–æ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞
                this.selfieSegmentationFrameCount = (this.selfieSegmentationFrameCount || 0) + 1;
                if (this.selfieSegmentationFrameCount % 50 === 0 && this.enableConsoleLogging) {
                    console.log(`üé® Selfie Segmentation: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${this.selfieSegmentationFrameCount} –∫–∞–¥—Ä–æ–≤ (—Å—Ç–∞–±–∏–ª—å–Ω–æ)`);
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:', error);
                
                // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (this.overlayCanvas) {
                    const ctx = this.overlayCanvas.getContext('2d');
                    ctx.font = '16px Arial';
                    ctx.fillStyle = '#FF6B6B';
                    ctx.fillText('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', 10, 30);
                    ctx.fillText('–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...', 10, 50);
                }
                
                // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
                setTimeout(() => {
                    this.reinitializeSelfieSegmentation();
                }, 2000);
            }
        }
    }

    // üß™ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ –∏ –º–∞—Å–∫–∏
    drawOrientationTest(ctx, canvas) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ctx.font = 'bold 20px Arial';
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 3;
        
        // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –í–ò–î–ï–û
        ctx.fillStyle = '#FF0000';
        ctx.strokeText('–í–ò–î–ï–û –õ–ï–í–ê–Ø', 50, 50);
        ctx.fillText('–í–ò–î–ï–û –õ–ï–í–ê–Ø', 50, 50);
        
        // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –í–ò–î–ï–û  
        ctx.fillStyle = '#0000FF';
        ctx.strokeText('–í–ò–î–ï–û –ü–†–ê–í–ê–Ø', canvas.width - 200, 50);
        ctx.fillText('–í–ò–î–ï–û –ü–†–ê–í–ê–Ø', canvas.width - 200, 50);
        
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        ctx.font = 'bold 16px Arial';
        ctx.fillStyle = '#FFFF00';
        ctx.strokeText('üß™ –¢–ï–°–¢: –ü–æ–¥–Ω–∏–º–∏—Ç–µ –ü–†–ê–í–£–Æ —Ä—É–∫—É', canvas.width/2 - 150, canvas.height - 50);
        ctx.fillText('üß™ –¢–ï–°–¢: –ü–æ–¥–Ω–∏–º–∏—Ç–µ –ü–†–ê–í–£–Æ —Ä—É–∫—É', canvas.width/2 - 150, canvas.height - 50);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        ctx.font = '12px Arial';
        ctx.fillStyle = '#FFFFFF';
        ctx.fillText(`–ö–∞–¥—Ä: ${this.selfieSegmentationFrameCount || 0}`, 10, canvas.height - 10);
    }

    // üß™ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–¥–µ –º–∞—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞
    drawMaskDetectionTest(ctx, canvas, maskData) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏ –º–∞—Å–∫–∏
        const width = canvas.width;
        const height = canvas.height;
        const leftThird = Math.floor(width / 3);
        const rightThird = Math.floor(width * 2 / 3);
        
        let leftPersonPixels = 0;
        let rightPersonPixels = 0;
        let totalChecked = 0;
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–æ–ª–æ–≤–∏–Ω—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≥–¥–µ –æ–±—ã—á–Ω–æ —Ä—É–∫–∏)
        for (let y = 0; y < height / 2; y++) {
            for (let x = 0; x < width; x++) {
                const index = (y * width + x) * 4;
                const alpha = maskData[index]; // –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–ª—å—Ñ–∞ –º–∞—Å–∫–∏
                
                if (alpha > 128) { // –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫
                    if (x < leftThird) {
                        leftPersonPixels++;
                    } else if (x > rightThird) {
                        rightPersonPixels++;
                    }
                }
                totalChecked++;
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Å–∫–∏
        ctx.font = 'bold 18px Arial';
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 2;
        
        // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ú–ê–°–ö–ò
        const leftDetection = leftPersonPixels > 100 ? '‚úÖ –ú–ê–°–ö–ê –í–ò–î–ò–¢' : '‚ùå –ù–ï–¢';
        ctx.fillStyle = leftPersonPixels > 100 ? '#00FF00' : '#666666';
        ctx.strokeText(`–ú–ê–°–ö–ê –õ–ï–í–ê–Ø: ${leftDetection}`, 50, 100);
        ctx.fillText(`–ú–ê–°–ö–ê –õ–ï–í–ê–Ø: ${leftDetection}`, 50, 100);
        
        // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ú–ê–°–ö–ò
        const rightDetection = rightPersonPixels > 100 ? '‚úÖ –ú–ê–°–ö–ê –í–ò–î–ò–¢' : '‚ùå –ù–ï–¢';
        ctx.fillStyle = rightPersonPixels > 100 ? '#00FF00' : '#666666';
        ctx.strokeText(`–ú–ê–°–ö–ê –ü–†–ê–í–ê–Ø: ${rightDetection}`, canvas.width - 250, 100);
        ctx.fillText(`–ú–ê–°–ö–ê –ü–†–ê–í–ê–Ø: ${rightDetection}`, canvas.width - 250, 100);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        ctx.font = '14px Arial';
        ctx.fillStyle = '#FFFFFF';
        ctx.fillText(`–õ–µ–≤—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: ${leftPersonPixels}`, 50, 130);
        ctx.fillText(`–ü—Ä–∞–≤—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: ${rightPersonPixels}`, canvas.width - 200, 130);
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        ctx.font = 'bold 14px Arial';
        ctx.fillStyle = '#FFFF00';
        ctx.strokeText('–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ü–æ–¥–Ω–∏–º–∏—Ç–µ –ü–†–ê–í–£–Æ —Ä—É–∫—É', canvas.width/2 - 120, 150);
        ctx.fillText('–ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ü–æ–¥–Ω–∏–º–∏—Ç–µ –ü–†–ê–í–£–Æ —Ä—É–∫—É', canvas.width/2 - 120, 150);
        ctx.strokeText('–ü—Ä–∞–≤–∞—è —Ä—É–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å "–ú–ê–°–ö–ê –ü–†–ê–í–ê–Ø: ‚úÖ"', canvas.width/2 - 150, 170);
        ctx.fillText('–ü—Ä–∞–≤–∞—è —Ä—É–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å "–ú–ê–°–ö–ê –ü–†–ê–í–ê–Ø: ‚úÖ"', canvas.width/2 - 150, 170);
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Ñ–æ–Ω–∞
    applyBackgroundEffect(ctx, canvas, originalImage, maskData, effect) {
        try {
            switch (effect) {
                case 'blur':
                    this.applyBlurredBackground(ctx, canvas, originalImage, maskData);
                    break;
                case 'green':
                    this.applyColorBackground(ctx, canvas, originalImage, maskData, '#00FF00');
                    break;
                case 'blue':
                    this.applyColorBackground(ctx, canvas, originalImage, maskData, '#0000FF');
                    break;
                case 'gradient':
                    this.applyGradientBackground(ctx, canvas, originalImage, maskData);
                    break;
                case 'matrix':
                    this.applyMatrixBackground(ctx, canvas, originalImage, maskData);
                    break;
                case 'neon':
                    this.applyNeonBackground(ctx, canvas, originalImage, maskData);
                    break;
                case 'remove_background':
                    this.applyBackgroundRemoval(ctx, canvas, originalImage, maskData);
                    break;
                case 'image_background':
                    this.applyImageBackground(ctx, canvas, originalImage, maskData);
                    break;
                case 'video_background':
                    this.applyVideoBackground(ctx, canvas, originalImage, maskData);
                    break;
                case 'edge_blur':
                    this.applyEdgeBlurEffect(ctx, canvas, originalImage, maskData);
                    break;
                // –ù–û–í–´–ï –≠–§–§–ï–ö–¢–´: –¢–µ–∫—Å—Ç –Ω–∞ —Ñ–æ–Ω–µ
                case 'text-green':
                    this.applyTextOnColorBackground(ctx, canvas, originalImage, maskData, '#00FF00');
                    break;
                case 'text-blue':
                    this.applyTextOnColorBackground(ctx, canvas, originalImage, maskData, '#0000FF');
                    break;
                case 'text-red':
                    this.applyTextOnColorBackground(ctx, canvas, originalImage, maskData, '#FF0000');
                    break;
                case 'text-purple':
                    this.applyTextOnColorBackground(ctx, canvas, originalImage, maskData, '#8A2BE2');
                    break;
                case 'text-orange':
                    this.applyTextOnColorBackground(ctx, canvas, originalImage, maskData, '#FF6600');
                    break;
                case 'text-gradient':
                    this.applyTextOnGradientBackground(ctx, canvas, originalImage, maskData);
                    break;
                default:
                    this.applyBlurredBackground(ctx, canvas, originalImage, maskData);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ñ–æ–Ω–∞:', error);
        }
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–æ–≥–æ —Ñ–æ–Ω–∞
    applyBlurredBackground(ctx, canvas, originalImage, maskData) {
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω –ë–ï–ó –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const tempCanvas = document.createElement('canvas');
        tempCanvas.width = canvas.width;
        tempCanvas.height = canvas.height;
        const tempCtx = tempCanvas.getContext('2d');
        
        // –†–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–∞
        tempCtx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∫ —Ñ–æ–Ω—É
        tempCtx.filter = 'blur(15px)';
        tempCtx.drawImage(tempCanvas, 0, 0);
        tempCtx.filter = 'none';
        
        // –†–∏—Å—É–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω
        ctx.drawImage(tempCanvas, 0, 0);
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–≤–µ—Ä—Ö —Ä–∞–∑–º—ã—Ç–æ–≥–æ —Ñ–æ–Ω–∞
        this.overlayPersonOnBackground(ctx, canvas, originalImage, maskData);
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
    applyColorBackground(ctx, canvas, originalImage, maskData, color = '#00FF00') {
        // –ó–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω —Ü–≤–µ—Ç–æ–º (—Ñ–æ–Ω –Ω–µ –∑–µ—Ä–∫–∞–ª–∏—Ä—É–µ—Ç—Å—è)
        ctx.fillStyle = color;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–≤–µ—Ä—Ö —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        this.overlayPersonOnBackground(ctx, canvas, originalImage, maskData);
    }
    
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    applyGradientBackground(ctx, canvas, originalImage, maskData) {
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
        gradient.addColorStop(0, '#FF0080');
        gradient.addColorStop(0.5, '#7928CA');
        gradient.addColorStop(1, '#FF8A80');
        
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
        this.overlayPersonOnBackground(ctx, canvas, originalImage, maskData);
    }
    
    // –ú–∞—Ç—Ä–∏—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    applyMatrixBackground(ctx, canvas, originalImage, maskData) {
        // –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω —Å –∑–µ–ª–µ–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        ctx.fillStyle = '#000000';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–µ–ª–µ–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        ctx.fillStyle = '#00FF41';
        ctx.font = '14px monospace';
        
        const chars = '01„Ç¢„Ç§„Ç¶„Ç®„Ç™„Ç´„Ç≠„ÇØ„Ç±„Ç≥„Çµ„Ç∑„Çπ„Çª„ÇΩ„Çø„ÉÅ„ÉÑ„ÉÜ„Éà„Éä„Éã„Éå„Éç„Éé';
        for (let i = 0; i < 100; i++) {
            const x = Math.random() * canvas.width;
            const y = Math.random() * canvas.height;
            const char = chars[Math.floor(Math.random() * chars.length)];
            ctx.fillText(char, x, y);
        }
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
        this.overlayPersonOnBackground(ctx, canvas, originalImage, maskData);
    }
    
    // –ù–µ–æ–Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
    applyNeonBackground(ctx, canvas, originalImage, maskData) {
        // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω —Å –Ω–µ–æ–Ω–æ–≤—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        const gradient = ctx.createRadialGradient(
            canvas.width / 2, canvas.height / 2, 0,
            canvas.width / 2, canvas.height / 2, Math.max(canvas.width, canvas.height)
        );
        gradient.addColorStop(0, '#FF00FF');
        gradient.addColorStop(0.5, '#00FFFF');
        gradient.addColorStop(1, '#000033');
        
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
        this.overlayPersonOnBackground(ctx, canvas, originalImage, maskData);
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Ñ–æ–Ω
    overlayPersonOnBackground(ctx, canvas, originalImage, maskData) {
        // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ canvas
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
        const tempCanvas = document.createElement('canvas');
        tempCanvas.width = canvas.width;
        tempCanvas.height = canvas.height;
        const tempCtx = tempCanvas.getContext('2d');
        
        // –†–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        // CSS —É–∂–µ –∑–µ—Ä–∫–∞–ª–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
        tempCtx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);
        
        const imageData = tempCtx.getImageData(0, 0, canvas.width, canvas.height);
        const data = imageData.data;
        
        // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é –∫ imageData
        for (let i = 0; i < maskData.length; i += 4) {
            const alpha = maskData[i]; // –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–ª—å—Ñ–∞ –º–∞—Å–∫–∏
            if (alpha <= 128) { // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ–Ω - –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                data[i + 3] = 0; // –£–±–∏—Ä–∞–µ–º –ø–∏–∫—Å–µ–ª—å —Ñ–æ–Ω–∞
            }
        }
        
        // –ë—ã—Å—Ç—Ä–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        tempCtx.putImageData(imageData, 0, 0);
        ctx.drawImage(tempCanvas, 0, 0);
    }

    // –ó–∞–ø—É—Å–∫ Selfie Segmentation
    startSelfieSegmentation() {
        try {
            console.log('üé® –ó–∞–ø—É—Å–∫ Selfie Segmentation...');
            
            if (!this.mediaReady) {
                console.error('‚ùå MediaPipe –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ overlay
                if (this.overlayCanvas) {
                    const ctx = this.overlayCanvas.getContext('2d');
                    ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                    ctx.font = '16px Arial';
                    ctx.fillStyle = '#FF6B6B';
                    ctx.fillText('‚ùå MediaPipe –Ω–µ –≥–æ—Ç–æ–≤', 10, 30);
                    ctx.fillText('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', 10, 50);
                }
                return;
            }
            
            if (!this.selfieSegmentation) {
                console.error('‚ùå Selfie Segmentation –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ overlay
                if (this.overlayCanvas) {
                    const ctx = this.overlayCanvas.getContext('2d');
                    ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                    ctx.font = '16px Arial';
                    ctx.fillStyle = '#FF6B6B';
                    ctx.fillText('‚ùå Selfie Segmentation –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 10, 30);
                    ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 10, 50);
                }
                return;
            }
            
            if (!this.videoElement) {
                console.error('‚ùå –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            if (this.videoElement.readyState < 2) {
                console.warn('‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è Selfie Segmentation, –æ–∂–∏–¥–∞–µ–º...');
                // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
                setTimeout(() => {
                    if (this.videoElement && this.videoElement.readyState >= 2) {
                        this.startSelfieSegmentation();
                    }
                }, 500);
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º overlay canvas –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!this.overlayCanvas) {
                this.createOverlayCanvas();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay
            if (this.overlayCanvas) {
                this.overlayCanvas.style.display = 'block';
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.selfieSegmentation.onResults((results) => {
                this.onSelfieSegmentationResults(results);
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–¥—Ä–æ–≤
            this.isProcessing = true;
            this.processSelfieSegmentationFrame();
            
            console.log('‚úÖ Selfie Segmentation –∑–∞–ø—É—â–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Selfie Segmentation:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ overlay
            if (this.overlayCanvas) {
                const ctx = this.overlayCanvas.getContext('2d');
                ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                ctx.font = '16px Arial';
                ctx.fillStyle = '#FF6B6B';
                ctx.fillText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Selfie Segmentation', 10, 30);
                ctx.fillText(error.message, 10, 50);
            }
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selfie Segmentation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
     */
    async reinitializeSelfieSegmentation() {
        try {
            console.log('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selfie Segmentation...');
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            if (this.selfieSegmentation) {
                try {
                    this.selfieSegmentation.onResults(() => {});
                    this.selfieSegmentation = null;
                } catch (error) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ Selfie Segmentation:', error);
                }
            }
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            if (window.SelfieSegmentation) {
                this.selfieSegmentation = new window.SelfieSegmentation({
                    locateFile: (file) => {
                        return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;
                    }
                });
                
                this.selfieSegmentation.setOptions({
                    modelSelection: 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
                    selfieMode: false // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º selfieMode –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                });
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                this.selfieSegmentation.onResults((results) => {
                    try {
                        this.onSelfieSegmentationResults(results);
                    } catch (error) {
                        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                    }
                });
                
                console.log('‚úÖ Selfie Segmentation –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                this.selfieSegmentationReady = true;
                
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞
                if (this.currentMask && this.currentMask.type === 'mediapipe') {
                    this.isProcessing = true;
                    this.processSelfieSegmentationFrame();
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Selfie Segmentation:', error);
            this.selfieSegmentation = null;
            this.selfieSegmentationReady = false;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ –¥–ª—è Selfie Segmentation
    processSelfieSegmentationFrame() {
        if (!this.selfieSegmentation || !this.videoElement || !this.isProcessing) {
            return;
        }
        
        if (this.videoElement.readyState < 2) {
            // –í–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            setTimeout(() => {
                if (this.isProcessing) {
                    this.processSelfieSegmentationFrame();
                }
            }, 100);
            return;
        }
        
        try {
            // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π throttling –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤
            const now = Date.now();
            if (!this.lastFrameSendTime) {this.lastFrameSendTime = 0;}
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä—ã –Ω–µ —á–∞—â–µ 15 FPS –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if (now - this.lastFrameSendTime < 67) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                requestAnimationFrame(() => {
                    if (this.isProcessing) {
                        this.processSelfieSegmentationFrame();
                    }
                });
                return;
            }
            
            this.lastFrameSendTime = now;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            this.selfieSegmentation.send({ image: this.videoElement }).then(() => {
                // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
                if (this.isProcessing) {
                    requestAnimationFrame(() => {
                        this.processSelfieSegmentationFrame();
                    });
                }
            }).catch((error) => {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–∞ –≤ Selfie Segmentation:', error);
                
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–∞–º—è—Ç—å—é, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                if (error.message && error.message.includes('memory')) {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Selfie Segmentation...');
                    this.reinitializeSelfieSegmentation();
                } else {
                    // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    setTimeout(() => {
                        if (this.isProcessing) {
                            this.processSelfieSegmentationFrame();
                        }
                    }, 500);
                }
            });
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ processSelfieSegmentationFrame:', error);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            this.isProcessing = false;
            setTimeout(() => {
                this.reinitializeSelfieSegmentation();
            }, 2000);
        }
    }

    /**
     * –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –±–µ–∑ MediaPipe
     */
    applyFallbackBackgroundEffect(mask) {
        console.log(`üõ°Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞: ${mask.name}`);
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.clearAllEffects();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ CSS —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞–∫ –∑–∞–º–µ–Ω—É
        switch (mask.id) {
            case 'blur':
            case 'background-blur':
                this.videoElement.style.filter = 'blur(10px)';
                this.videoElement.style.background = '#000000';
                break;
                
            case 'green':
            case 'background-green':
                this.videoElement.style.filter = 'hue-rotate(120deg) saturate(150%)';
                this.videoElement.style.background = '#00FF00';
                break;
                
            case 'blue':
            case 'background-blue':
                this.videoElement.style.filter = 'hue-rotate(240deg) saturate(150%)';
                this.videoElement.style.background = '#0000FF';
                break;
                
            case 'gradient':
            case 'background-gradient':
                this.videoElement.style.filter = 'contrast(120%) brightness(110%)';
                this.videoElement.style.background = 'linear-gradient(45deg, #FF6B6B, #4ECDC4)';
                break;
                
            case 'matrix':
            case 'background-matrix':
                this.videoElement.style.filter = 'hue-rotate(120deg) contrast(150%) brightness(80%)';
                this.videoElement.style.background = '#001100';
                break;
                
            case 'neon':
            case 'background-neon':
                this.videoElement.style.filter = 'contrast(200%) brightness(120%) saturate(200%)';
                this.videoElement.style.background = 'radial-gradient(circle, #FF00FF, #00FFFF)';
                break;
                
            // AI —ç—Ñ—Ñ–µ–∫—Ç—ã 2.0
            case 'ai-blur':
                this.videoElement.style.filter = 'blur(15px)';
                this.videoElement.style.background = '#1a1a1a';
                break;
                
            case 'ai-green':
                this.videoElement.style.filter = 'hue-rotate(120deg) saturate(200%) contrast(120%)';
                this.videoElement.style.background = '#00FF00';
                break;
                
            case 'ai-blue':
                this.videoElement.style.filter = 'hue-rotate(240deg) saturate(200%) contrast(120%)';
                this.videoElement.style.background = '#0000FF';
                break;
                
            case 'ai-gradient':
                this.videoElement.style.filter = 'contrast(150%) brightness(120%) saturate(150%)';
                this.videoElement.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
                break;
                
            case 'ai-matrix':
                this.videoElement.style.filter = 'hue-rotate(120deg) contrast(200%) brightness(70%)';
                this.videoElement.style.background = '#001100';
                break;
                
            case 'ai-neon':
                this.videoElement.style.filter = 'contrast(250%) brightness(130%) saturate(250%)';
                this.videoElement.style.background = 'radial-gradient(circle, #FF00FF, #00FFFF, #FFFF00)';
                break;
                
            // –ù–û–í–´–ï –¢–ï–ö–°–¢–û–í–´–ï –≠–§–§–ï–ö–¢–´
            case 'text-on-green':
                this.videoElement.style.filter = 'hue-rotate(120deg) saturate(150%)';
                this.videoElement.style.background = '#00FF00';
                this.createFallbackTextOverlay('#00FF00');
                break;
                
            case 'text-on-blue':
                this.videoElement.style.filter = 'hue-rotate(240deg) saturate(150%)';
                this.videoElement.style.background = '#0000FF';
                this.createFallbackTextOverlay('#0000FF');
                break;
                
            case 'text-on-red':
                this.videoElement.style.filter = 'hue-rotate(0deg) saturate(150%)';
                this.videoElement.style.background = '#FF0000';
                this.createFallbackTextOverlay('#FF0000');
                break;
                
            case 'text-on-purple':
                this.videoElement.style.filter = 'hue-rotate(270deg) saturate(150%)';
                this.videoElement.style.background = '#8A2BE2';
                this.createFallbackTextOverlay('#8A2BE2');
                break;
                
            case 'text-on-orange':
                this.videoElement.style.filter = 'hue-rotate(30deg) saturate(150%)';
                this.videoElement.style.background = '#FF6600';
                this.createFallbackTextOverlay('#FF6600');
                break;
                
            case 'text-on-gradient':
                this.videoElement.style.filter = 'contrast(120%) brightness(110%)';
                this.videoElement.style.background = 'linear-gradient(45deg, #FF0080, #7928CA, #4ECDC4)';
                this.createFallbackTextOverlay();
                break;
                
            default:
                this.videoElement.style.filter = 'none';
                this.videoElement.style.background = 'transparent';
                break;
        }
        
        console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç "${mask.name}" –ø—Ä–∏–º–µ–Ω–µ–Ω`);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–≤–µ—Ä–ª–µ–π –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
     * @param {string} backgroundColor - –¶–≤–µ—Ç —Ñ–æ–Ω–∞
     */
    createFallbackTextOverlay(backgroundColor = null) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–≤–µ—Ä–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingOverlay = document.getElementById('fallback-text-overlay');
        if (existingOverlay) {
            existingOverlay.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–≤–µ—Ä–ª–µ–π
        const overlay = document.createElement('div');
        overlay.id = 'fallback-text-overlay';
        overlay.style.cssText = `
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 30%;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            padding: 20px;
            font-family: Arial, sans-serif;
            pointer-events: none;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const activeLineDiv = document.createElement('div');
        activeLineDiv.id = 'fallback-active-line';
        activeLineDiv.style.cssText = `
            font-size: 2rem;
            font-weight: bold;
            text-align: center;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
        const nextLineDiv = document.createElement('div');
        nextLineDiv.id = 'fallback-next-line';
        nextLineDiv.style.cssText = `
            font-size: 1.5rem;
            color: #CCCCCC;
            text-align: center;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.6);
        `;
        
        overlay.appendChild(activeLineDiv);
        overlay.appendChild(nextLineDiv);
        document.body.appendChild(overlay);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        this.startFallbackTextUpdate();
        
        console.log('‚úÖ Fallback —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–≤–µ—Ä–ª–µ–π —Å–æ–∑–¥–∞–Ω');
    }
    
    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ fallback —Ç–µ–∫—Å—Ç–∞
     */
    startFallbackTextUpdate() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        this.stopFallbackTextUpdate();
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑
        this.updateFallbackTextOverlay();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
        this.fallbackTextInterval = setInterval(() => {
            this.updateFallbackTextOverlay();
        }, 100); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
        
        console.log('‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ fallback —Ç–µ–∫—Å—Ç–∞');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ fallback –æ–≤–µ—Ä–ª–µ–µ
     */
    updateFallbackTextOverlay() {
        const activeLineElement = document.getElementById('fallback-active-line');
        const nextLineElement = document.getElementById('fallback-next-line');
        
        if (!activeLineElement || !nextLineElement) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
        const activeText = this.getCurrentActiveLineText();
        const nextText = this.getCurrentNextLineText();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (activeLineElement.textContent !== activeText) {
            activeLineElement.textContent = activeText || '';
        }
        
        if (nextLineElement.textContent !== nextText) {
            nextLineElement.textContent = nextText || '';
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç fallback —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     */
    stopFallbackTextUpdate() {
        if (this.fallbackTextInterval) {
            clearInterval(this.fallbackTextInterval);
            this.fallbackTextInterval = null;
        }
        
        // –£–¥–∞–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π
        const overlay = document.getElementById('fallback-text-overlay');
        if (overlay) {
            overlay.remove();
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–∫–ª—é—á–∞—è fallback —Ç–µ–∫—Å—Ç
     */
    clearAllEffects() {
        console.log('üé≠ MaskSystem: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤');
        
        try {
            // –û—á–∏—â–∞–µ–º MediaPipe —ç—Ñ—Ñ–µ–∫—Ç—ã
            if (this.animationFrame) {
                cancelAnimationFrame(this.animationFrame);
                this.animationFrame = null;
            }
            
            // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∏–ª—å—Ç—Ä—ã
            if (this.videoElement) {
                this.videoElement.style.filter = 'none';
                this.videoElement.style.background = 'transparent';
            }
            
            // –û—á–∏—â–∞–µ–º overlay canvas
                if (this.overlayCanvas) {
                this.overlayCanvas.style.display = 'none';
                    const ctx = this.overlayCanvas.getContext('2d');
                if (ctx) {
                    ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                }
            }
            
            // –û—á–∏—â–∞–µ–º fallback —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–≤–µ—Ä–ª–µ–∏
            this.stopFallbackTextUpdate();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö—Ä–æ–º–∞–∫–µ–π
            this.isChromakeyActive = false;
            this.currentChromakeyMask = null;
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            this.backgroundEffects = {
                blur: { enabled: false, intensity: 10 },
                colorFilter: { enabled: false, color: '#00ff00', opacity: 0.5 },
                gradient: { enabled: false, colors: ['#ff6b6b', '#4ecdc4'], direction: 'diagonal' }
            };
            
            console.log('‚úÖ MaskSystem: –í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå MaskSystem: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:', error);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –•—Ä–æ–º–∞–∫–µ–π —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
     */
    async applyChromakeyMask(mask) {
        console.log(`üé¨ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –•—Ä–æ–º–∞–∫–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∞: ${mask.name}`);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.clearAllEffects();
        
        try {
            switch (mask.id) {
                case 'auto_segment':
                    console.log('üéØ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞');
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Selfie Segmentation –¥–ª—è –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
                    if (this.selfieSegmentation) {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–æ–±–æ–º —Ä–µ–∂–∏–º–µ
                        this.currentMask = { ...mask, effect: 'remove_background' };
                        this.startSelfieSegmentation();
                    } else {
                        console.warn('‚ö†Ô∏è Selfie Segmentation –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ö—Ä–æ–º–∞–∫–µ–π');
                        this.applyFallbackChromakeyEffect(mask);
                    }
                    break;
                    
                case 'img_replace':
                    console.log('üñºÔ∏è –ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');
                    // –†–µ–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    if (this.selfieSegmentation) {
                        this.currentMask = { ...mask, effect: 'image_background' };
                        this.startSelfieSegmentation();
                    } else {
                        this.applyFallbackChromakeyEffect(mask);
                    }
                    break;
                    
                case 'video_replace':
                    console.log('üé• –ó–∞–º–µ–Ω–∞ –≤–∏–¥–µ–æ');
                    // –†–µ–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –≤–∏–¥–µ–æ
                    if (this.selfieSegmentation) {
                        this.currentMask = { ...mask, effect: 'video_background' };
                        this.startSelfieSegmentation();
                    } else {
                        this.applyFallbackChromakeyEffect(mask);
                    }
                    break;
                    
                case 'edge_blur':
                    console.log('üåÄ –†–∞–∑–º—ã—Ç–∏–µ –∫—Ä–∞–µ–≤');
                    // –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –∫—Ä–∞–µ–≤
                    if (this.selfieSegmentation) {
                        this.currentMask = { ...mask, effect: 'edge_blur' };
                        this.startSelfieSegmentation();
                    } else {
                        this.applyFallbackChromakeyEffect(mask);
                    }
                    break;
                    
                default:
                    console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö—Ä–æ–º–∞–∫–µ–π —ç—Ñ—Ñ–µ–∫—Ç: ${mask.id}`);
                    break;
            }
            
            console.log(`‚úÖ –•—Ä–æ–º–∞–∫–µ–π —ç—Ñ—Ñ–µ–∫—Ç "${mask.name}" –ø—Ä–∏–º–µ–Ω–µ–Ω`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ö—Ä–æ–º–∞–∫–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∞:', error);
            this.applyFallbackChromakeyEffect(mask);
        }
    }

    /**
     * –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ö—Ä–æ–º–∞–∫–µ–π —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
     */
    applyFallbackChromakeyEffect(mask) {
        console.log(`üõ°Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ö—Ä–æ–º–∞–∫–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∞: ${mask.name}`);
        
        switch (mask.id) {
            case 'auto_segment':
                // –ü—Ä–æ—Å—Ç–æ–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CSS
                this.videoElement.style.filter = 'contrast(150%) brightness(120%)';
                this.videoElement.style.background = 'transparent';
                break;
                
            default:
                this.videoElement.style.filter = 'none';
                this.videoElement.style.background = 'transparent';
                break;
        }
        
        console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ö—Ä–æ–º–∞–∫–µ–π —ç—Ñ—Ñ–µ–∫—Ç "${mask.name}" –ø—Ä–∏–º–µ–Ω–µ–Ω`);
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
     */
    showDevelopmentMessage(message) {
        if (this.overlayCanvas) {
            this.overlayCanvas.style.display = 'block';
            const ctx = this.overlayCanvas.getContext('2d');
            ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
            
            ctx.font = '18px Arial';
            ctx.fillStyle = '#FFD700';
            ctx.fillText('üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 20, 40);
            
            ctx.font = '14px Arial';
            ctx.fillStyle = '#FFFFFF';
            ctx.fillText(message, 20, 70);
            ctx.fillText('–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!', 20, 90);
            
            // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (this.overlayCanvas) {
                    const ctx = this.overlayCanvas.getContext('2d');
                    ctx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
                    this.overlayCanvas.style.display = 'none';
                }
            }, 4000);
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ (—Ö—Ä–æ–º–∞–∫–µ–π)
    applyBackgroundRemoval(ctx, canvas, originalImage, maskData) {
        try {
            // –û—á–∏—â–∞–µ–º canvas (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω)
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = canvas.width;
            tempCanvas.height = canvas.height;
            const tempCtx = tempCanvas.getContext('2d');
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            // —Ç–∞–∫ –∫–∞–∫ –≤–∏–¥–µ–æ —É–∂–µ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–æ CSS transform: scaleX(-1)
            tempCtx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫–∞
            const imageData = tempCtx.getImageData(0, 0, canvas.width, canvas.height);
            for (let i = 0; i < maskData.length; i += 4) {
                // –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å —Ñ–æ–Ω–∞ (—Ç–µ–º–Ω—ã–π –≤ –º–∞—Å–∫–µ), –¥–µ–ª–∞–µ–º –µ–≥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                const alpha = maskData[i] > 128 ? imageData.data[i + 3] : 0;
                imageData.data[i + 3] = alpha;
            }
            tempCtx.putImageData(imageData, 0, 0);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫–∞ –±–µ–∑ —Ñ–æ–Ω–∞ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            ctx.drawImage(tempCanvas, 0, 0);
            
            console.log('‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞:', error);
        }
    }

    // –ó–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    applyImageBackground(ctx, canvas, originalImage, maskData) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–æ–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
            gradient.addColorStop(0, '#FF6B6B');
            gradient.addColorStop(0.3, '#4ECDC4');
            gradient.addColorStop(0.6, '#45B7D1');
            gradient.addColorStop(1, '#96CEB4');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
            for (let i = 0; i < 20; i++) {
                const x = Math.random() * canvas.width;
                const y = Math.random() * canvas.height;
                const size = Math.random() * 30 + 10;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, 2 * Math.PI);
                ctx.fill();
            }
            
            // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
            this.overlayPersonOnBackground(ctx, canvas, originalImage, maskData);
            
            console.log('‚úÖ –§–æ–Ω –∑–∞–º–µ–Ω–µ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:', error);
        }
    }

    // –ó–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞ –≤–∏–¥–µ–æ (–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω)
    applyVideoBackground(ctx, canvas, originalImage, maskData) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω
            const time = Date.now() / 1000;
            
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            const offset = Math.sin(time) * 0.5 + 0.5;
            const gradient = ctx.createRadialGradient(
                canvas.width * (0.3 + offset * 0.4), 
                canvas.height * (0.3 + offset * 0.4), 
                0,
                canvas.width * 0.7, 
                canvas.height * 0.7, 
                Math.max(canvas.width, canvas.height)
            );
            gradient.addColorStop(0, `hsl(${(time * 50) % 360}, 70%, 60%)`);
            gradient.addColorStop(0.5, `hsl(${(time * 30 + 120) % 360}, 80%, 50%)`);
            gradient.addColorStop(1, `hsl(${(time * 20 + 240) % 360}, 60%, 40%)`);
            
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂—É—â–∏–µ—Å—è —á–∞—Å—Ç–∏—Ü—ã
            ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
            for (let i = 0; i < 15; i++) {
                const x = (canvas.width * 0.1 + Math.sin(time + i) * canvas.width * 0.8);
                const y = (canvas.height * 0.1 + Math.cos(time * 0.7 + i) * canvas.height * 0.8);
                const size = Math.sin(time * 2 + i) * 15 + 20;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, 2 * Math.PI);
                ctx.fill();
            }
            
            // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–≤–µ—Ä—Ö –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
            this.overlayPersonOnBackground(ctx, canvas, originalImage, maskData);
            
            console.log('‚úÖ –§–æ–Ω –∑–∞–º–µ–Ω–µ–Ω –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∏–¥–µ–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞ –≤–∏–¥–µ–æ:', error);
        }
    }

    // –†–∞–∑–º—ã—Ç–∏–µ –∫—Ä–∞–µ–≤
    applyEdgeBlurEffect(ctx, canvas, originalImage, maskData) {
        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            // —Ç–∞–∫ –∫–∞–∫ –≤–∏–¥–µ–æ —É–∂–µ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–æ CSS transform: scaleX(-1)
            ctx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∞–µ–≤
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = canvas.width;
            tempCanvas.height = canvas.height;
            const tempCtx = tempCanvas.getContext('2d');
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            tempCtx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageData = tempCtx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∫ –∫—Ä–∞—è–º –º–∞—Å–∫–∏
            for (let i = 0; i < maskData.length; i += 4) {
                const maskValue = maskData[i];
                
                // –ï—Å–ª–∏ –ø–∏–∫—Å–µ–ª—å –Ω–∞ –∫—Ä–∞—é –º–∞—Å–∫–∏ (–ø–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞)
                if (maskValue > 50 && maskValue < 200) {
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∫ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
                    const blurIntensity = (200 - maskValue) / 150; // 0-1
                    
                    // –£–º–µ–Ω—å—à–∞–µ–º —á–µ—Ç–∫–æ—Å—Ç—å –∫—Ä–∞–µ–≤
                    data[i] = data[i] * (1 - blurIntensity * 0.3);     // R
                    data[i + 1] = data[i + 1] * (1 - blurIntensity * 0.3); // G
                    data[i + 2] = data[i + 2] * (1 - blurIntensity * 0.3); // B
                }
            }
            
            tempCtx.putImageData(imageData, 0, 0);
            
            // –†–∏—Å—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(tempCanvas, 0, 0);
            
            console.log('‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ä–∞–∑–º—ã—Ç–∏–µ –∫—Ä–∞–µ–≤');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º—ã—Ç–∏—è –∫—Ä–∞–µ–≤:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ Face Mesh –¥–ª—è overlay —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
     */
    processFaceMeshForOverlay() {
        if (!this.faceMesh || !this.videoElement || !this.isProcessing) {
            return;
        }
        
        if (this.videoElement.readyState < 2) {
            setTimeout(() => {
                if (this.isProcessing) {
                    this.processFaceMeshForOverlay();
                }
            }, 100);
            return;
        }
        
        try {
            this.faceMesh.send({ image: this.videoElement }).then(() => {
                if (this.isProcessing) {
                    requestAnimationFrame(() => {
                        this.processFaceMeshForOverlay();
                    });
                }
            }).catch((error) => {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ Face Mesh –¥–ª—è overlay:', error);
                setTimeout(() => {
                    if (this.isProcessing) {
                        this.processFaceMeshForOverlay();
                    }
                }, 500);
            });
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Face Mesh –¥–ª—è overlay:', error);
            this.isProcessing = false;
        }
    }

    /**
     * –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ
     */
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ü–≤–µ—Ç–Ω–æ–º —Ñ–æ–Ω–µ
    applyTextOnColorBackground(ctx, canvas, originalImage, maskData, color = '#00FF00') {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è —Ñ–æ–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        const backgroundCanvas = document.createElement('canvas');
        backgroundCanvas.width = canvas.width;
        backgroundCanvas.height = canvas.height;
        const bgCtx = backgroundCanvas.getContext('2d');
        
        // –ó–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω —Ü–≤–µ—Ç–æ–º
        bgCtx.fillStyle = color;
        bgCtx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –ù–ê –§–û–ù–ï
        this.renderTextDirectlyOnBackground(bgCtx, canvas);
        
        // –ö–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥: –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        this.compositePersonOverTextBackground(ctx, canvas, originalImage, maskData, backgroundCanvas);
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–º —Ñ–æ–Ω–µ
    applyTextOnGradientBackground(ctx, canvas, originalImage, maskData) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è —Ñ–æ–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        const backgroundCanvas = document.createElement('canvas');
        backgroundCanvas.width = canvas.width;
        backgroundCanvas.height = canvas.height;
        const bgCtx = backgroundCanvas.getContext('2d');
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const gradient = bgCtx.createLinearGradient(0, 0, canvas.width, canvas.height);
        gradient.addColorStop(0, '#FF0080');
        gradient.addColorStop(0.3, '#7928CA');
        gradient.addColorStop(0.6, '#4ECDC4');
        gradient.addColorStop(1, '#FF8A80');
        
        bgCtx.fillStyle = gradient;
        bgCtx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –ù–ê –§–û–ù–ï
        this.renderTextDirectlyOnBackground(bgCtx, canvas);
        
        // –ö–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥: –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        this.compositePersonOverTextBackground(ctx, canvas, originalImage, maskData, backgroundCanvas);
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –Ω–∞ —Ñ–æ–Ω–µ (–ù–ï –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞!)
     * @param {CanvasRenderingContext2D} bgCtx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ canvas
     * @param {HTMLCanvasElement} canvas - Canvas —ç–ª–µ–º–µ–Ω—Ç
     */
    renderTextDirectlyOnBackground(bgCtx, canvas) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            let activeText = this.getCurrentActiveLineText();
            
            if (!activeText) {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ
                activeText = "The sun will set for you";
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            const canvasWidth = canvas.width;
            const canvasHeight = canvas.height;
            
            // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ canvas
            const baseFontSize = Math.max(32, Math.min(canvasWidth / 15, canvasHeight / 12));
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            bgCtx.font = `bold ${baseFontSize}px Arial, sans-serif`;
            bgCtx.fillStyle = '#FFFFFF';
            bgCtx.textAlign = 'center';
            bgCtx.textBaseline = 'middle';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ —Ü–≤–µ—Ç–Ω–æ–º —Ñ–æ–Ω–µ
            bgCtx.strokeStyle = '#000000';
            bgCtx.lineWidth = 4;
            
            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            const maxWidth = canvasWidth * 0.8;
            const lines = this.wrapText(bgCtx, activeText, maxWidth);
            const lineHeight = baseFontSize * 1.3;
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            const totalTextHeight = lines.length * lineHeight;
            const startY = (canvasHeight - totalTextHeight) / 2 + lineHeight / 2;
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–æ–Ω—Ç—É—Ä–æ–º
            lines.forEach((line, index) => {
                const y = startY + (index * lineHeight);
                
                // –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä
                bgCtx.strokeText(line, canvasWidth / 2, y);
                // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                bgCtx.fillText(line, canvasWidth / 2, y);
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ:', error);
        }
    }
    
    /**
     * –ö–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥: –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
     * @param {CanvasRenderingContext2D} ctx - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas
     * @param {HTMLCanvasElement} canvas - –û—Å–Ω–æ–≤–Ω–æ–π canvas
     * @param {HTMLVideoElement} originalImage - –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
     * @param {ImageData} maskData - –î–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
     * @param {HTMLCanvasElement} backgroundCanvas - Canvas —Å —Ñ–æ–Ω–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
     */
    compositePersonOverTextBackground(ctx, canvas, originalImage, maskData, backgroundCanvas) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if (!ctx || !canvas || !originalImage || !backgroundCanvas) {
                if (this.enableConsoleLogging) {
                    console.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥–∞');
                }
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º maskData –∏ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (!maskData || !maskData.data || !maskData.data.length) {
                const now = Date.now();
                if (window.DEBUG_CONFIG?.MASKS?.enableErrors && (now - this.errorThrottling.lastMaskDataError) > this.errorThrottling.errorInterval) {
                    console.warn('‚ùå maskData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                    this.errorThrottling.lastMaskDataError = now;
                    this.errorThrottling.maskDataError++;
                }
                // Fallback: –ø—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ–º —Ñ–æ–Ω, –ø–æ—Ç–æ–º —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–≤–µ—Ä—Ö
                ctx.drawImage(backgroundCanvas, 0, 0);
                this.overlayPersonOnBackground(ctx, canvas, originalImage, maskData);
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
            const backgroundCtx = backgroundCanvas.getContext('2d');
            if (!backgroundCtx) {
                if (this.enableConsoleLogging) {
                    console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–æ–Ω–∞');
                }
                return;
            }
            
            const backgroundImageData = backgroundCtx.getImageData(0, 0, canvas.width, canvas.height);
            const backgroundData = backgroundImageData.data;
            
            // –†–∏—Å—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π canvas
            ctx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
            const videoImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const videoData = videoImageData.data;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            const minLength = Math.min(maskData.data.length, videoData.length, backgroundData.length);
            
            // –ü–∏–∫—Å–µ–ª—å –∑–∞ –ø–∏–∫—Å–µ–ª–µ–º: –∑–∞–º–µ–Ω—è–µ–º —Ñ–æ–Ω –Ω–∞ –Ω–∞—à —Ñ–æ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º
            for (let i = 0; i < minLength; i += 4) {
                const maskValue = maskData.data[i]; // –ö—Ä–∞—Å–Ω—ã–π –∫–∞–Ω–∞–ª –º–∞—Å–∫–∏
                
                // –ï—Å–ª–∏ –º–∞—Å–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ–Ω (—Ç–µ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ), –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ñ–æ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º
                if (maskValue < 128) {
                    videoData[i] = backgroundData[i];         // R
                    videoData[i + 1] = backgroundData[i + 1]; // G
                    videoData[i + 2] = backgroundData[i + 2]; // B
                    // –ê–ª—å—Ñ–∞ –∫–∞–Ω–∞–ª –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                }
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            ctx.putImageData(videoImageData, 0, 0);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥–∞:', error);
            // Fallback: –ø—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ–º —Ñ–æ–Ω, –ø–æ—Ç–æ–º —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–≤–µ—Ä—Ö
            try {
                ctx.drawImage(backgroundCanvas, 0, 0);
                if (maskData && this.overlayPersonOnBackground) {
                    this.overlayPersonOnBackground(ctx, canvas, originalImage, maskData);
                }
            } catch (fallbackError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ fallback –∫–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥–µ:', fallbackError);
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
     * @returns {string} –¢–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
     */
    getCurrentActiveLineText() {
        try {
            // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            const cacheKey = `${Date.now()}_${Math.floor(Date.now() / 50)}`; // –ö–µ—à –Ω–∞ 50ms
            if (this._lastActiveTextCache && this._lastActiveTextCache.key === cacheKey) {
                return this._lastActiveTextCache.text;
            }
            
            let text = '';
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: LiveMode —Å–∏—Å—Ç–µ–º–∞
            if (window.liveMode && window.liveMode.isActive && typeof window.liveMode._getMainActiveLineText === 'function') {
                text = window.liveMode._getMainActiveLineText() || '';
                if (text && text !== "–†–µ–∂–∏–º Live –∞–∫—Ç–∏–≤–µ–Ω") {
                    this._cacheActiveText(cacheKey, text);
                    return text;
                }
            }
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ DOM
            const selectors = [
                '#lyrics-display .lyric-line.active',
                '.lyric-line.active', 
                '.rehearsal-active-line.active',
                '.active-line',
                '[data-active="true"]'
            ];
            
            for (const selector of selectors) {
                const activeElement = document.querySelector(selector);
                if (activeElement && activeElement.textContent && activeElement.textContent.trim()) {
                    text = activeElement.textContent.trim();
                    this._cacheActiveText(cacheKey, text);
                    return text;
                }
            }
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ LyricsDisplay
            if (window.app && window.app.lyricsDisplay) {
                const lyricsDisplay = window.app.lyricsDisplay;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º activeLineText
                if (lyricsDisplay.activeLineText) {
                    text = lyricsDisplay.activeLineText.trim();
                    this._cacheActiveText(cacheKey, text);
                    return text;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ currentLine –∏–Ω–¥–µ–∫—Å—É
                if (lyricsDisplay.currentLine >= 0 && 
                    lyricsDisplay.lyrics && 
                    lyricsDisplay.lyrics[lyricsDisplay.currentLine]) {
                    text = lyricsDisplay.lyrics[lyricsDisplay.currentLine].trim();
                    this._cacheActiveText(cacheKey, text);
                    return text;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ currentActiveLine –∏–Ω–¥–µ–∫—Å—É
                if (typeof lyricsDisplay.currentActiveLine === 'number' && 
                    lyricsDisplay.currentActiveLine >= 0 &&
                    lyricsDisplay.lyrics && 
                    lyricsDisplay.lyrics[lyricsDisplay.currentActiveLine]) {
                    text = lyricsDisplay.lyrics[lyricsDisplay.currentActiveLine].trim();
                    this._cacheActiveText(cacheKey, text);
                    return text;
                }
            }
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ß–µ—Ä–µ–∑ –º–∞—Ä–∫–µ—Ä—ã –∏ –∞—É–¥–∏–æ –ø–æ–∑–∏—Ü–∏—é
            if (window.audioEngine && window.app && window.app.markerManager) {
                const currentTime = window.audioEngine.getCurrentTime();
                const activeLineIndex = window.app.markerManager.getActiveLineAtTime(currentTime);
                
                if (activeLineIndex >= 0 && 
                    window.app.lyricsDisplay && 
                    window.app.lyricsDisplay.lyrics && 
                    window.app.lyricsDisplay.lyrics[activeLineIndex]) {
                    text = window.app.lyricsDisplay.lyrics[activeLineIndex].trim();
                    this._cacheActiveText(cacheKey, text);
                    return text;
                }
            }
            
            // –ö–µ—à–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this._cacheActiveText(cacheKey, '');
            return '';
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:', error);
            return this._lastActiveText || '';
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
     * @returns {string} –¢–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
     */
    getCurrentNextLineText() {
        try {
            // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            const cacheKey = `${Date.now()}_${Math.floor(Date.now() / 50)}`; // –ö–µ—à –Ω–∞ 50ms
            if (this._lastNextTextCache && this._lastNextTextCache.key === cacheKey) {
                return this._lastNextTextCache.text;
            }
            
            let text = '';
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: LiveMode —Å–∏—Å—Ç–µ–º–∞
            if (window.liveMode && window.liveMode.isActive && typeof window.liveMode._getMainNextLineText === 'function') {
                text = window.liveMode._getMainNextLineText() || '';
                if (text) {
                    this._cacheNextText(cacheKey, text);
                    return text;
                }
            }
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é
            const selectors = [
                '#lyrics-display .lyric-line.active',
                '.lyric-line.active', 
                '.rehearsal-active-line.active',
                '.active-line',
                '[data-active="true"]'
            ];
            
            for (const selector of selectors) {
                const activeElement = document.querySelector(selector);
                if (activeElement && activeElement.nextElementSibling && activeElement.nextElementSibling.textContent) {
                    text = activeElement.nextElementSibling.textContent.trim();
                    this._cacheNextText(cacheKey, text);
                    return text;
                }
            }
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ß–µ—Ä–µ–∑ LyricsDisplay
            if (window.app && window.app.lyricsDisplay) {
                const lyricsDisplay = window.app.lyricsDisplay;
                
                // –ß–µ—Ä–µ–∑ currentLine + 1
                const nextLineIndex = lyricsDisplay.currentLine + 1;
                if (nextLineIndex >= 0 && 
                    lyricsDisplay.lyrics && 
                    lyricsDisplay.lyrics[nextLineIndex]) {
                    text = lyricsDisplay.lyrics[nextLineIndex].trim();
                    this._cacheNextText(cacheKey, text);
                    return text;
                }
                
                // –ß–µ—Ä–µ–∑ currentActiveLine + 1
                if (typeof lyricsDisplay.currentActiveLine === 'number') {
                    const nextIndex = lyricsDisplay.currentActiveLine + 1;
                    if (nextIndex >= 0 && 
                        lyricsDisplay.lyrics && 
                        lyricsDisplay.lyrics[nextIndex]) {
                        text = lyricsDisplay.lyrics[nextIndex].trim();
                        this._cacheNextText(cacheKey, text);
                        return text;
                    }
                }
            }
            
            // –ö–µ—à–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this._cacheNextText(cacheKey, '');
            return '';
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏:', error);
            return this._lastNextText || '';
        }
    }
    
    /**
     * –ö–µ—à–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @private
     */
    _cacheActiveText(key, text) {
        this._lastActiveTextCache = { key, text };
        this._lastActiveText = text;
    }
    
    /**
     * –ö–µ—à–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç  
     * @private
     */
    _cacheNextText(key, text) {
        this._lastNextTextCache = { key, text };
        this._lastNextText = text;
    }
    
    /**
     * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ canvas
     * @param {CanvasRenderingContext2D} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç canvas
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
     * @param {number} maxWidth - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
     * @returns {string[]} –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
     */
    wrapText(ctx, text, maxWidth) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π –∏–ª–∏ undefined —Ç–µ–∫—Å—Ç
        if (!text || typeof text !== 'string' || text.trim() === '') {
            return [];
        }
        
        const words = text.split(' ');
        const lines = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ
        if (words.length === 0) {
            return [];
        }
        
        let currentLine = words[0] || '';
        
        for (let i = 1; i < words.length; i++) {
            const word = words[i];
            if (!word) {continue;} // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ–≤–∞
            
            const width = ctx.measureText(currentLine + ' ' + word).width;
            
            if (width < maxWidth) {
                currentLine += ' ' + word;
            } else {
                lines.push(currentLine);
                currentLine = word;
            }
        }
        
        if (currentLine) {
            lines.push(currentLine);
        }
        
        return lines;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç CSS —Ñ–∏–ª—å—Ç—Ä—ã
     * @param {Object} mask - –û–±—ä–µ–∫—Ç –º–∞—Å–∫–∏
     */
    applyFilterMask(mask) {
        console.log(`üé≠ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CSS —Ñ–∏–ª—å—Ç—Ä–∞: ${mask.name}`);
        
        if (this.videoElement && mask.filter) {
            this.videoElement.style.filter = mask.filter;
            console.log(`‚úÖ CSS —Ñ–∏–ª—å—Ç—Ä "${mask.filter}" –ø—Ä–∏–º–µ–Ω–µ–Ω`);
        } else {
            console.warn('üé≠ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç fallback —ç—Ñ—Ñ–µ–∫—Ç
     * @param {Object} mask - –û–±—ä–µ–∫—Ç –º–∞—Å–∫–∏
     */
    applyFallbackEffect(mask) {
        console.log(`üõ°Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ fallback —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –º–∞—Å–∫–∏: ${mask.name}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø fallback —ç—Ñ—Ñ–µ–∫—Ç–∞
        switch (mask.type) {
            case 'mediapipe':
            case 'text-overlay':
                this.applyFallbackBackgroundEffect(mask);
                break;
            case 'filter':
                this.applyFilterMask(mask);
                break;
            case 'chromakey':
                this.applyFallbackChromakeyEffect(mask);
                break;
            default:
                console.warn(`üõ°Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è fallback: ${mask.type}`);
                // –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                this.applyFallbackBackgroundEffect(mask);
        }
    }

    /**
     * –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
     * @param {boolean} enabled - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    setConsoleLogging(enabled) {
        this.enableConsoleLogging = enabled;
        if (enabled) {
            console.log('üé≠ MaskSystem: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MaskSystem;
} else {
    window.MaskSystem = MaskSystem;
} 