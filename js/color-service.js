/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —Å—Ö–µ–º–∞–º–∏ –≤–æ–ª–Ω
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∏ –≤–æ–∫–∞–ª—å–Ω–æ–π –≤–æ–ª–Ω
 */
class ColorService {
    constructor() {
        // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –¥—É—ç—Ç—ã
        this.colorSchemes = [
            {
                id: 'classic',
                name: 'Classic Blue & Gold',
                instrumental: '#2196F3',
                vocals: '#FFD700'
            },
            {
                id: 'neon',
                name: 'Neon Cyber',
                instrumental: '#00FFFF',
                vocals: '#FF00FF'
            },
            {
                id: 'sunset',
                name: 'Sunset Vibes',
                instrumental: '#FF6B35',
                vocals: '#FFE66D',
                instrumentalAlpha: 0.8,
                vocalsAlpha: 0.6
            },
            {
                id: 'ocean',
                name: 'Ocean Deep',
                instrumental: '#0077BE',
                vocals: '#00CED1',
                instrumentalAlpha: 0.7,
                vocalsAlpha: 0.8
            },
            {
                id: 'forest',
                name: 'Forest Fire',
                instrumental: '#4CAF50',
                vocals: '#FF5722',
                instrumentalAlpha: 0.8,
                vocalsAlpha: 0.7
            },
            {
                id: 'royal',
                name: 'Royal Purple',
                instrumental: '#9C27B0',
                vocals: '#E91E63',
                instrumentalAlpha: 0.7,
                vocalsAlpha: 0.8
            },
            {
                id: 'mono',
                name: 'Monochrome',
                instrumental: '#607D8B',
                vocals: '#90A4AE',
                instrumentalAlpha: 0.8,
                vocalsAlpha: 0.8
            }
        ];

        // –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞
        this.currentScheme = this.loadFromStorage() || this.colorSchemes[0];
        
        // –°–ª—É—à–∞—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        this.listeners = [];
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Å—Ö–µ–º—É –∫ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
        this.applyCSSVariables();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
     */
    getColorSchemes() {
        return this.colorSchemes;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
     * @returns {Object} –¢–µ–∫—É—â–∞—è —Å—Ö–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     */
    getCurrentScheme() {
        return this.colorSchemes.find(scheme => scheme.id === this.currentScheme.id) || this.colorSchemes[0];
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –ø–æ ID
     */
    setColorScheme(schemeId) {
        const scheme = this.colorSchemes.find(s => s.id === schemeId);
        if (scheme) {
            this.currentScheme = scheme;
            this.saveToStorage();
            this.applyCSSVariables();
            this.notifyListeners();
            console.log(`üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${scheme.name}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ ('instrumental' –∏–ª–∏ 'vocals')
     * @returns {string} HEX —Ü–≤–µ—Ç
     */
    getColor(source) {
        if (source === 'instrumental') {
            return this.currentScheme.instrumental;
        } else if (source === 'vocals') {
            return this.currentScheme.vocals;
        }
        return this.currentScheme.instrumental; // fallback
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –≤–æ–ª–Ω—ã
     */
    getInstrumentalColor() {
        return this.currentScheme.instrumental;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤–æ–∫–∞–ª—å–Ω–æ–π –≤–æ–ª–Ω—ã
     */
    getVocalsColor() {
        return this.currentScheme.vocals;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –º–∞—Å—Ç–µ—Ä –∫–Ω–æ–ø–∫–∏
     */
    getMasterGradient() {
        return `linear-gradient(45deg, ${this.currentScheme.instrumental}, ${this.currentScheme.vocals})`;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞ –∫ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
     */
    applyCSSVariables() {
        const root = document.documentElement;
        root.style.setProperty('--instrumental-color', this.currentScheme.instrumental);
        root.style.setProperty('--vocals-color', this.currentScheme.vocals);
        root.style.setProperty('--master-gradient', this.getMasterGradient());
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
     */
    addListener(callback) {
        this.listeners.push(callback);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è
     */
    removeListener(callback) {
        this.listeners = this.listeners.filter(l => l !== callback);
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
     */
    notifyListeners() {
        this.listeners.forEach(callback => {
            try {
                callback(this.currentScheme);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ ColorService:', error);
            }
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
     */
    saveToStorage() {
        try {
            localStorage.setItem('waveform-color-scheme', JSON.stringify({
                id: this.currentScheme.id,
                timestamp: Date.now()
            }));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
     */
    loadFromStorage() {
        try {
            const saved = localStorage.getItem('waveform-color-scheme');
            if (saved) {
                const data = JSON.parse(saved);
                return this.colorSchemes.find(s => s.id === data.id);
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É:', error);
        }
        return null;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é –≤–æ–ª–Ω—ã –¥–ª—è —Å—Ö–µ–º—ã (–¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é)
     */
    createPreviewCanvas(scheme, width = 60, height = 30) {
        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d');

        // –ü—Ä–æ—Å—Ç–∞—è –≤–æ–ª–Ω–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
        const points = 20;
        const instrumentalData = [];
        const vocalsData = [];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ª–Ω
        for (let i = 0; i < points; i++) {
            instrumentalData.push(Math.sin(i * 0.5) * 0.8 + Math.random() * 0.2);
            vocalsData.push(Math.sin(i * 0.3 + 1) * 0.6 + Math.random() * 0.3);
        }

        // –†–∏—Å—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –≤–æ–ª–Ω—É
        ctx.globalAlpha = 0.7;
        ctx.fillStyle = scheme.instrumental;
        ctx.beginPath();
        ctx.moveTo(0, height / 2);
        
        for (let i = 0; i < points; i++) {
            const x = (i / points) * width;
            const y = height / 2 + instrumentalData[i] * (height / 4);
            ctx.lineTo(x, y);
        }
        ctx.lineTo(width, height / 2);
        ctx.closePath();
        ctx.fill();

        // –†–∏—Å—É–µ–º –≤–æ–∫–∞–ª—å–Ω—É—é –≤–æ–ª–Ω—É
        ctx.fillStyle = scheme.vocals;
        ctx.beginPath();
        ctx.moveTo(0, height / 2);
        
        for (let i = 0; i < points; i++) {
            const x = (i / points) * width;
            const y = height / 2 + vocalsData[i] * (height / 4);
            ctx.lineTo(x, y);
        }
        ctx.lineTo(width, height / 2);
        ctx.closePath();
        ctx.fill();

        return canvas;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
window.colorService = new ColorService(); 