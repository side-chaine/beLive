/**
 * Main App for beLive application
 * Connects all components and handles main functionality
 * 
 * Required components:
 * - DragBoundaryController (js/drag-boundary-controller.js)
 * - BlockLoopControl (js/block-loop-control.js)
 * - AudioEngine, LyricsDisplay, TrackCatalog, etc.
 */

class App {
    constructor() {
        console.log('Initializing beLive App');
        
        // --- –≠–¢–ê–ü 1: –ò–ù–™–ï–ö–¶–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ---
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º StateManager –∏ ViewManager –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        
        if (window.StateManager) {
            this.stateManager = new window.StateManager();
            console.log('StateManager component ready');
        } else {
            console.error('FATAL: StateManager class not found');
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        }

        if (window.ViewManager) {
            this.viewManager = new window.ViewManager();
            this.viewManager.init(this.stateManager, this); // –ò–Ω—ä–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            console.log('ViewManager component ready');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
            this.viewManager.initEventHandlers();
            console.log('üéØ ViewManager event handlers initialized');
        } else {
            console.error('FATAL: ViewManager class not found');
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        }
        // --- –ö–û–ù–ï–¶ –≠–¢–ê–ü–ê 1 ---
        
        this.initComplete = false;
        this.lyricsEnabled = true;
        this.isSyncing = false; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.currentMode = 'concert'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.previousMode = null;
        
        // BPM –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏
        this.currentBPM = 100; // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é BPM
        this.bpmControl = {
            currentRate: 1.0, // 100% - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            minRate: 0.5,     // 50% - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            maxRate: 2.0,     // 200% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            step: 0.05        // 5% - —à–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        };
        
        // Ensure all required components exist
        if (!window.audioEngine || !window.lyricsDisplay || !window.trackCatalog) {
            console.error('Required components not loaded');
            return;
        }
        
        // Save component references
        this.audioEngine = window.audioEngine;
        this.lyricsDisplay = window.lyricsDisplay;
        this.trackCatalog = window.trackCatalog;
        
        // Initialize MarkerManager if available
        if (window.markerManager) {
            this.markerManager = window.markerManager;
        } else {
            console.warn('MarkerManager not found, creating placeholder');
            this.markerManager = { setMarkers: () => console.warn('MarkerManager not available') };
        }
        
        // Initialize WordAligner
        if (window.WordAlignerV2) {
            this.wordAligner = new window.WordAlignerV2();
            // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            window.wordAligner = this.wordAligner;
            // Subscribe to progress events from WordAligner
            this.wordAligner.addEventListener('model-loading-progress', (event) => {
                this._handleWordAlignmentProgress(event.detail);
            });
        } else {
            console.warn('WordAlignerV2 not found, creating placeholder');
            this.wordAligner = { alignWords: () => Promise.reject(new Error('WordAlignerV2 not available')) };
            window.wordAligner = this.wordAligner;
        }
        
        // Initialize WaveformEditor reference
        if (window.waveformEditor) {
            this.waveformEditor = window.waveformEditor;
        } else {
            console.warn('WaveformEditor not found, creating placeholder');
            this.waveformEditor = { show: () => console.warn('WaveformEditor not available'), setMarkers: () => {} };
        }
        
        // Create UI helper object for notifications
        this.ui = {
            showNotification: (message, type = 'info') => {
                console.log(`App: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
                if (window.liveMode && typeof window.liveMode.showNotification === 'function') {
                    window.liveMode.showNotification(message, type);
                } else if (typeof showNotification === 'function') {
                    showNotification(message, type);
                } else {
                    console.warn('No notification system available');
                }
            }
        };
        
        // Initialize UI
        this._initUI();
        
        // Initialize event listeners
        this._setupEventListeners();
        
        // Setup audio update interval
        this._setupAudioUpdateInterval();
        
        // Initialize reload button
        this._initReloadButton();
        
        // Initialize marker editor button
        this._initMarkerEditorButton();
        
        // Initialize style manager
        this._initStyleManager();
        this.textStyleManager = window.textStyleManager;
        
        // Initialize LiveMode when the page is ready
        window.addEventListener('DOMContentLoaded', () => {
            this._initLiveMode();
        });
        
        // Initialize microphone controls
        this._initMicrophoneControls();

        // LoopBlockManager (legacy) –æ—Ç–∫–ª—é—á–µ–Ω. –ö–Ω–æ–ø–∫–∞ Loop –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ (–ø–æ–∑–∂–µ).
        // Initialize BlockLoopControl
        if (window.BlockLoopControl && window.markerManager) {
            this.blockLoopControl = new BlockLoopControl(this.audioEngine, this.lyricsDisplay, window.markerManager);
            console.log('BlockLoopControl component ready');
        } else {
            console.warn('BlockLoopControl class or MarkerManager not found');
        }

        // Initialize MaskSystem
        if (window.MaskSystem) {
            this.maskSystem = new MaskSystem();
            // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
            this.maskSystem.setConsoleLogging(false);
            window.maskSystem = this.maskSystem;
            console.log('üé≠ MaskSystem component ready');
        } else {
            console.warn('MaskSystem class not found');
        }

        // Initialize LoopBlock controls
        this._initLoopBlockControls();
        
        // Initialize mask controls
        this._initMaskControls();
        
        // –õ–µ–Ω—Ç—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∏–ª–∏ –ø–æ –∫–ª–∏–∫—É beLIVE
        window.addEventListener('warmup:done', () => {
            try {
                if (!window.__liveFeedInit) {
        this._initLiveFeedConcept();
                    window.__liveFeedInit = true;
                }
            } catch(_) {}
        });

        // –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–∞–º–µ—Ä—ã ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º Live –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ö–∞—Ç–∞–ª–æ–≥
        window.addEventListener('camera-permission-resolved', async (e) => {
            // –¶–µ–ª—å –ø–æ—Å–ª–µ Live: –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ live)
            window.__forceAfterLiveMode = 'catalog';
            // –ñ–¥—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ live, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å
            const waitForActive = async () => {
                const start = Date.now();
                while (Date.now() - start < 1500) {
                    if (window.liveMode && window.liveMode.isActive) return true;
                    await new Promise(r => setTimeout(r, 50));
                }
                return false;
            };
            try { await waitForActive(); } catch(_) {}
            try {
                if (window.liveMode && window.liveMode.isActive) {
                    await window.liveMode.deactivate();
                } else {
                    // –ï—Å–ª–∏ Live –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è ‚Äî –≤—Ä—É—á–Ω—É—é –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
                    try { this._enableResidualLiveOverlay(true); } catch(_) {}
                    try { window.openCatalog?.(); } catch(_) {}
                }
            } catch(_) {}
        }, { once: true });
        
        this.initComplete = true;
        console.log('beLive App initialized');
        
        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä app –≥–ª–æ–±–∞–ª—å–Ω–æ
        window.app = this;
        
        // –ü–æ–∫–∞–∂–µ–º Welcome (–±–µ–∑ –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ª–µ–Ω—Ç—É)
        this._showWelcomeIfNoTracks();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–æ–Ω–∞ –¥–ª—è –∫–∞—Ä–∞–æ–∫–µ
        const karaokeImages = [
            'Karaoke/pexels-isabella-mendes-107313-332688.jpg',
            'Karaoke/pexels-mccutcheon-1191710.jpg',
            'Karaoke/pexels-trinitykubassek-341858.jpg',
            'Karaoke/pexels-maumascaro-1154189.jpg',
            'Karaoke/pexels-marcin-dampc-807808-1684187.jpg',
            'Karaoke/yichen-wang-aBeTfQ65ycQ-unsplash.jpg',
            'Karaoke/boliviainteligente-NFY0BeronrE-unsplash.jpg',
            'Karaoke/prince-abid-LeZItQhwFks-unsplash.jpg',
            'Karaoke/bruno-cervera-Gi6-m_t_W-E-unsplash.jpg',
            'Karaoke/kane-reinholdtsen-LETdkk7wHQk-unsplash.jpg',
            'Karaoke/pexels-amit-batra-3062797-4658541.jpg',
            'Karaoke/pexels-clemlep-13659549.jpg',
            'Karaoke/pexels-capturexpression-26530062.jpg',
            'Karaoke/pexels-pixabay-164960.jpg',
            'Karaoke/pexels-katriengrevendonck-2101487.jpg',
            'Karaoke/pexels-suvan-chowdhury-37305-144429.jpg',
            'Karaoke/pexels-pixabay-164879.jpg'
        ];
        this.karaokeBackgroundManager = new KaraokeBackgroundManager(karaokeImages);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ (—Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ñ–æ–Ω, –±–µ–∑ —Å–ª–∞–π–¥—à–æ—É)
        const rehearsalImages = [
            'Rehearsal/pexels-conojeghuo-375893.jpg',
            'Rehearsal/pexels-david-bartus-43782-844928.jpg',
            'Rehearsal/pexels-pixabay-164938.jpg',
            'Rehearsal/pexels-pixabay-164716.jpg',
            'Rehearsal/pexels-didsss-1653090.jpg',
            'Rehearsal/pexels-nikita-khandelwal-178978-632656.jpg',
            'Rehearsal/pexels-pixabay-270288.jpg',
            'Rehearsal/pexels-pixabay-164853.jpg',
            'Rehearsal/pexels-pixabay-210766.jpg',
            'Rehearsal/pexels-pixabay-159613.jpg',
            'Rehearsal/pexels-pixabay-164769.jpg',
            'Rehearsal/pexels-reneterp-1327430.jpg',
            'Rehearsal/pexels-bclarkphoto-1135995.jpg',
            'Rehearsal/pexels-pixabay-290660.jpg',
            'Rehearsal/pexels-everson-mayer-478307-1481309.jpg',
            'Rehearsal/pexels-antonh-145707.jpg',
            'Rehearsal/pexels-pixabay-159376.jpg',
            'Rehearsal/pexels-joshsorenson-995301.jpg',
            'Rehearsal/pexels-pixabay-257904.jpg',
            'Rehearsal/4b8023db-3000-4084-bef9-b7aec2a804da.jpg',
            'Rehearsal/soty_obem_zheleznyj_167098_2560x1440.jpg',
            'Rehearsal/dvoichnyj_kod_kod_tsifry_147523_2560x1440.jpg',
            'Rehearsal/fotoapparat_obektiv_remeshok_145518_1600x900.jpg',
            'Rehearsal/vinilovaia_plastinka_tonarm_kartridzh_107810_2560x1440.jpg',
            'Rehearsal/didzhej_muzyka_diskoteka_160929_2560x1440.jpg',
            'Rehearsal/krolik_naushniki_muzyka_130283_2560x1440.jpg',
            'Rehearsal/noty_griaznyj_bumaga_124163_2560x1440.jpg',
            'Rehearsal/gitara_bas_gitara_struny_106722_2560x1440.jpg',
            'Rehearsal/dj_naushniki_ustanovka_122020_2560x1440.jpg',
            'Rehearsal/muzykalnyj_instrument_muzyka_udarnye_106370_2560x1440.jpg',
            'Rehearsal/naushniki_knigi_obrazovanie_121501_2560x1600.jpg',
            'Rehearsal/naushniki_ustanovka_muzyka_104587_1280x1024.jpg'
        ];
        this.rehearsalBackgroundManager = new RehearsalBackgroundManager(rehearsalImages, 0);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞ (—Å–ª–∞–π–¥—à–æ—É)
        const concertImages = [
            'Concert/pexels-teddy-2263436.jpg',
            'Concert/pexels-markusspiske-92078.jpg',
            'Concert/pexels-wendywei-1677710.jpg',
            'Concert/pexels-rahulp9800-1652353.jpg',
            'Concert/pexels-apasaric-2078071.jpg',
            'Concert/pexels-jackgittoes-761543.jpg',
            'Concert/pexels-picjumbo-com-55570-196652.jpg',
            'Concert/pexels-thibault-trillet-44912-167491.jpg',
            'Concert/pexels-mark-angelo-sampan-738078-1587927.jpg',
            'Concert/pexels-wendywei-1190297.jpg'
        ];
        this.concertBackgroundManager = new ConcertBackgroundManager(concertImages, 60000);
    }

    /**
     * –£–ø—Ä–∞–≤–ª—è–µ—Ç ¬´–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π¬ª –ø–ª–∞—à–∫–æ–π Live (#live-lyrics-container)
     * @param {boolean} show
     * @private
     */
    _enableResidualLiveOverlay(show) {
        try {
            const liveLayer = document.getElementById('live-lyrics-container');
            if (!liveLayer) { return; }
            liveLayer.style.pointerEvents = 'none';
            liveLayer.style.zIndex = '9200';
            if (show) {
                liveLayer.classList.remove('hidden');
                liveLayer.style.display = '';
            } else {
                liveLayer.classList.add('hidden');
                liveLayer.style.display = 'none';
            }
        } catch(_) {}
    }

    /**
     * –°–∫—Ä—ã—Ç—ã–π –ø—Ä–æ–≥—Ä–µ–≤ Live, –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –ø–ª–∞—à–∫—É
     * @private
     */
    async _bootstrapLiveWarmup() {
        try {
            if (window.__liveBootstrapped) { return; }
            window.__liveBootstrapped = true;
            // –ü–æ–∫–∞–∑–∞–Ω Welcome, –¥–∞—ë–º —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
            await new Promise(r => setTimeout(r, 300));
            // –ü—Ä—è—á–µ–º UI live
            try { document.getElementById('live-video-container')?.classList.add('hidden'); } catch(_) {}
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Live (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫–∞–º–µ—Ä—ã)
            this._activateLiveMode();
            // –ñ–¥—ë–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            const started = await (async () => {
                const start = Date.now();
                while (Date.now() - start < 2500) {
                    if (window.liveMode && window.liveMode.isActive) return true;
                    await new Promise(r => setTimeout(r, 50));
                }
                return false;
            })();
            if (started) await new Promise(r => setTimeout(r, 150));
            // –°—Ä–∞–∑—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–æ–Ω—Ü–µ—Ä—Ç) –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–π
            if (window.liveMode && window.liveMode.isActive) {
                try { await window.liveMode.deactivate(); } catch(_) {}
            }
            // –í–∫–ª—é—á–∏–º –æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –ø–ª–∞—à–∫—É –Ω–∞ –±—É–¥—É—â–µ–µ
            this._enableResidualLiveOverlay(true);
            // –í–ê–ñ–ù–û: –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ Welcome (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–µ–Ω—Ç—É)
            try {
                this._hideLiveFeedConcept();
                this._showWelcomeIfNoTracks();
            } catch(_) {}
            // –°–∏–≥–Ω–∞–ª –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–µ–Ω—Ç—ã
            try { window.dispatchEvent(new CustomEvent('warmup:done')); } catch(_) {}
        } catch (e) {
            console.warn('bootstrapLiveWarmup failed:', e);
        }
    }
    
    initCatalogV2() {
        if (window.CatalogV2) {
            window.catalogV2 = new CatalogV2();
        } else {
            console.error("CatalogV2 class not found. Make sure catalog-v2.js is loaded before app.js");
        }
    }
    
    _initUI() {
        // Set play/pause button state
        this.playPauseBtn = document.getElementById('play-pause');
        
        // Set volume sliders
        this.instrumentalVolumeSlider = document.getElementById('instrumental-volume');
        this.vocalsVolumeSlider = document.getElementById('vocals-volume');
        
        // Get time display and progress bar elements
        this.timeDisplay = document.getElementById('time-display');
        this.progressBarContainer = document.getElementById('progress-bar-container');
        this.progressBar = document.getElementById('progress-bar');
        this.progressTooltip = document.getElementById('progress-tooltip');
        
        // Initialize volume values
        if (this.instrumentalVolumeSlider) {
            this.instrumentalVolumeSlider.value = 100;
        }
        
        if (this.vocalsVolumeSlider) {
            this.vocalsVolumeSlider.value = 100;
        }
        
        // Initialize progress bar
        this._initProgressBar();

        // Scale controls
        this.scaleDownBtn = document.getElementById('scale-down');
        this.scaleUpBtn = document.getElementById('scale-up');
        this.scaleValueBtn = document.getElementById('scale-value'); // Renamed from scaleValue
        
        // BPM controls (—Ä–µ–∂–∏–º —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏) - –ò–°–ü–†–ê–í–õ–ï–ù–û: bpm –≤–º–µ—Å—Ç–æ bmp
        this.bpmDownBtn = document.getElementById('bpm-down');
        this.bpmUpBtn = document.getElementById('bpm-up');
        this.bpmValueBtn = document.getElementById('bpm-value');
        this.bpmControls = document.getElementById('bpm-controls');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BPM —Å–∏—Å—Ç–µ–º—ã
        this.currentBPM = 100; // 100% - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        this._updateBPMDisplay();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É Monitor
        try { this._initMonitorButton(); } catch(e) { console.warn('Monitor button init failed', e); }
    }
    
    _setupEventListeners() {
        document.addEventListener('model-loading-progress', (e) => {
            const progress = e.detail;
            const button = document.getElementById('sync-words-btn');
            if (!button) {
                console.error('APP: sync-words-btn not found!');
                return;
            }

            if ((progress.status === 'download' || progress.status === 'progress') && typeof progress.progress === 'number') {
                const percentage = progress.progress.toFixed(2);
                button.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞... ${percentage}%`;
            } else if (progress.status === 'ready' || progress.status === 'done') {
                button.textContent = '‚ú® Sync Words';
            }
        });

        const syncWordsBtn = document.getElementById('sync-words-btn');
        if (syncWordsBtn) {
            syncWordsBtn.addEventListener('click', () => this._handleWordAlignment());
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', (event) => this._handleKeyboardShortcut(event));
        
        // Play button
        if (this.playPauseBtn) {
            this.playPauseBtn.addEventListener('click', this._togglePlayPause.bind(this));
        }
        
        // Mode buttons
        document.querySelectorAll('.mode-button').forEach(button => {
            button.addEventListener('click', () => {
                const mode = button.dataset.mode;
                this._handleModeChange(mode);
            });
        });
        
        // Volume sliders
        if (this.instrumentalVolumeSlider) {
            this.instrumentalVolumeSlider.addEventListener('input', () => {
                this.audioEngine.setInstrumentalVolume(this.instrumentalVolumeSlider.value / 100);
                // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏
                try {
                    if (document.body.classList.contains('mode-rehearsal')) {
                        localStorage.setItem('rehearsal:instrumentalVolume', String(this.instrumentalVolumeSlider.value));
                    }
                } catch(_) {}
            });
        }
        
        if (this.vocalsVolumeSlider) {
            this.vocalsVolumeSlider.addEventListener('input', () => {
                this.audioEngine.setVocalsVolume(this.vocalsVolumeSlider.value / 100);
                // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏
                try {
                    if (document.body.classList.contains('mode-rehearsal')) {
                        localStorage.setItem('rehearsal:vocalsVolume', String(this.vocalsVolumeSlider.value));
                    }
                } catch(_) {}
            });
        }
        
        // Scale controls listeners
        if (this.scaleDownBtn) {
            this.scaleDownBtn.addEventListener('click', () => {
                if (this._isScalingAllowed()) {
                    window.textStyleManager.decreaseScale();
                    this._updateScaleDisplay();
                }
            });
        }

        if (this.scaleUpBtn) {
            this.scaleUpBtn.addEventListener('click', () => {
                if (this._isScalingAllowed()) {
                    window.textStyleManager.increaseScale();
                    this._updateScaleDisplay();
                }
            });
        }
        
        if (this.scaleValueBtn) {
            this.scaleValueBtn.addEventListener('click', () => {
                if (this._isScalingAllowed()) {
                    window.textStyleManager.resetScale();
                    this._updateScaleDisplay();
                }
            });
        }
        
        // Global keyboard shortcuts
        document.addEventListener('keydown', this._handleKeyboardShortcut.bind(this));
        
        // Add listener for when a track is fully loaded
        document.addEventListener('track-loaded', this._handleTrackLoaded.bind(this));
        
        // Word Alignment Button  
        const alignBtn = document.getElementById('word-align-btn');
        if (alignBtn) {
            alignBtn.addEventListener('click', () => this._handleWordAlignment());
        }

        // –í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è Sync: –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é ¬´–∫–∞—Ä–∞—Ç–µ-–∏–º–∏—Ç–∞—Ü–∏—é¬ª
        document.addEventListener('sync-editor-closed', () => {
            try {
                // –ï—Å–ª–∏ Sync –∑–∞–∫—Ä—ã–ª–∏ –≤ –∫–∞—Ä–∞–æ–∫–µ –∏ –º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–ª–∏ –≤–æ–∫–∞–ª ‚Äî –≤–µ—Ä–Ω—ë–º 0%
                if (document.body.classList.contains('mode-karaoke') && this._karaokeTempVocalsEnabled) {
                    try { this.audioEngine.setVocalsVolume(0); } catch(_) {}
                    if (this.vocalsVolumeSlider) { this.vocalsVolumeSlider.value = 0; }
                    this._karaokeTempVocalsEnabled = false;
                }
                if (this._syncCameFromRehearsal) {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏
                    document.body.classList.remove('mode-karaoke');
                    document.body.classList.add('mode-rehearsal');
                    try { this.textStyleManager.setStyle('rehearsal'); } catch(_) {}
                    try { this._setLyricsContainerStyle(null); } catch(_) {}
                    try { this.blockLoopControl && this.blockLoopControl.activate(); } catch(_) {}
                    try {
                        if (this.bpmControls) {this.bpmControls.style.display = 'flex';}
                        this._updateBPMDisplay();
                        if (this.rehearsalBackgroundManager) {this.rehearsalBackgroundManager.start();}
                    } catch(_) {}
                    this._emitModeChanged('karaoke', 'rehearsal');
                    this._syncCameFromRehearsal = false;
                }
            } catch(_) {}
        });

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–ª –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        this._initTransportToggle();

        // üîß –ù–û–í–´–ô: –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è transport controls –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞
        document.addEventListener('track-loaded', () => {
            console.log('üîÑ Track loaded, reinitializing transport controls');
            this._initTransportToggle();
        });

        // BPM controls listeners (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏)
        if (this.bpmDownBtn) {
            this.bpmDownBtn.addEventListener('click', () => {
                this._decreaseBPM();
            });
        }

        if (this.bpmUpBtn) {
            this.bpmUpBtn.addEventListener('click', () => {
                this._increaseBPM();
            });
        }
        
        if (this.bpmValueBtn) {
            this.bpmValueBtn.addEventListener('click', () => {
                this._resetBPM();
            });
        }
    }
    
    _handleKeyboardShortcut(event) {
        // Skip if typing in an input
        if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
            return;
        }
        
        // Skip if modifiers are pressed (to avoid interfering with browser shortcuts)
        if (event.ctrlKey || event.metaKey || event.altKey) {
            return;
        }
        
        switch (event.code) {
            case 'Space':
                // Let the audio engine handle this
                // We don't want both handlers to react to the space bar
                break;
                
            case 'ArrowLeft':
                // Previous track
                this.trackCatalog.playPreviousTrack();
                break;
                
            case 'ArrowRight':
                // Next track
                this.trackCatalog.playNextTrack();
                break;
                
            default:
                // No action for other keys
                break;
        }
        this._updateScaleControlsState();
    }
    
    _togglePlayPause() {
        if (!this.audioEngine) {return;}
        
        if (this.audioEngine.isPlaying) {
            this.audioEngine.pause();
        } else {
            this.audioEngine.play();
        }
    }
    
    _initProgressBar() {
        if (!this.progressBarContainer || !this.progressBar || !this.progressTooltip) {return;}
        
        // Add event listeners for seeking
        this.progressBarContainer.addEventListener('click', (e) => this._handleProgressBarClick(e));
        this.progressBarContainer.addEventListener('mousemove', (e) => this._updateProgressTooltip(e));
        this.progressBarContainer.addEventListener('mouseleave', () => {
            this.progressTooltip.style.opacity = '0';
        });
    }
    
    _handleProgressBarClick(e) {
        if (!this.audioEngine || !this.progressBarContainer) {return;}
        
        // Calculate click position as a percentage of the bar width
        const rect = this.progressBarContainer.getBoundingClientRect();
        const clickPosition = (e.clientX - rect.left) / rect.width;
        
        // Calculate the new time based on the track duration
        const duration = this.audioEngine.duration;
        const newTime = clickPosition * duration;
        
        // Set new position and update UI
        this.audioEngine.setCurrentTime(newTime);
        this._updateProgressBar(newTime, duration);
        
        // Start playback if not already playing
        if (!this.audioEngine.isPlaying) {
            this.audioEngine.play();
        }
    }
    
    _updateProgressTooltip(e) {
        if (!this.audioEngine || !this.progressBarContainer || !this.progressTooltip) {return;}
        
        // Calculate hover position as a percentage of the bar width
        const rect = this.progressBarContainer.getBoundingClientRect();
        const hoverPosition = (e.clientX - rect.left) / rect.width;
        
        // Calculate the time at the hover position
        const duration = this.audioEngine.duration;
        const hoverTime = hoverPosition * duration;
        
        // Update tooltip text with the time
        this.progressTooltip.textContent = this._formatTime(hoverTime);
        
        // Position the tooltip at the hover position
        this.progressTooltip.style.left = `${hoverPosition * 100}%`;
        this.progressTooltip.style.opacity = '1';
    }
    
    _updateProgressBar(currentTime, duration) {
        if (!this.progressBar || !this.timeDisplay) {return;}
        
        // Update progress bar width
        const progressPercentage = (currentTime / duration) * 100;
        this.progressBar.style.width = `${progressPercentage}%`;
        
        // Update time display
        this.timeDisplay.textContent = `${this._formatTime(currentTime)} / ${this._formatTime(duration)}`;
    }
    
    _formatTime(seconds) {
        if (isNaN(seconds) || seconds < 0) {return '0:00';}
        
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60).toString().padStart(2, '0');
        return `${mins}:${secs}`;
    }
    
    _setupAudioUpdateInterval() {
        // Update lyrics position and transport controls every 50ms
        setInterval(() => {
            if (!this.audioEngine || !this.lyricsDisplay) {return;}
            
            // Get current playback time and duration
            const currentTime = this.audioEngine.getCurrentTime();
            const duration = this.audioEngine.duration;
            
            // Update lyrics position
            if (this.lyricsEnabled) {
                this.lyricsDisplay.updateLyricPosition(currentTime);
            }
            
            // Update play/pause button text
            if (this.playPauseBtn) {
                this.playPauseBtn.textContent = this.audioEngine.isPlaying ? 'Pause' : 'Play';
            }
            
            // Update progress bar and time display
            this._updateProgressBar(currentTime, duration);
        }, 50);
    }
    
    _showWelcomeIfNoTracks() {
        // Show welcome message if no tracks in catalog
        const lyricsContainer = document.getElementById('lyrics-display');
        
        if (lyricsContainer && (!this.trackCatalog.tracks || this.trackCatalog.tracks.length === 0)) {
            lyricsContainer.innerHTML = `
                <div class="welcome-message">
                    <h1>Welcome to beLIVE</h1>
                    <p>Your lyrics assistant for live performances</p>
                    <p>Click the Catalog button to start adding tracks</p>
                </div>
            `;
        }
    }
    
    _initReloadButton() {
        // –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ Monitor ‚Äî —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –º–∞–∫–µ—Ç–æ–≤
        const monitorBtn = document.getElementById('monitor-btn') || document.getElementById('reload-app');
        if (monitorBtn) {
            monitorBtn.id = 'monitor-btn';
            monitorBtn.textContent = 'Monitor';
            monitorBtn.title = 'Monitor settings';
            monitorBtn.addEventListener('click', () => {
                try { window.monitorUI?.toggle(); } catch(e) { console.warn('Monitor UI not ready', e); }
            });
        }
    }

    _initMonitorButton() {
        this._initReloadButton();
    }
    
    /**
     * Initialize marker editor button
     */
    _initMarkerEditorButton() {
        const markerEditorBtn = document.getElementById('marker-editor-btn');
        const syncBtn = document.getElementById('sync-btn');

        if (markerEditorBtn) {
            markerEditorBtn.addEventListener('click', () => this._toggleMarkerEditor());
        }

        if (syncBtn) {
            syncBtn.addEventListener('click', async () => {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ currentTrackIndex
                const currentTrack = this.trackCatalog.currentTrackIndex >= 0 && 
                                   this.trackCatalog.currentTrackIndex < this.trackCatalog.tracks.length 
                                   ? this.trackCatalog.tracks[this.trackCatalog.currentTrackIndex] 
                                   : null;
                
                // üîÑ –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–¢–ò–õ–¨–ù–´–ô –ò–ù–î–ò–ö–ê–¢–û–† –ó–ê–ì–†–£–ó–ö–ò
                const originalText = syncBtn.textContent;
                const originalWidth = syncBtn.offsetWidth; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–∏–Ω—É
                syncBtn.disabled = true;
                syncBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
                syncBtn.style.width = `${originalWidth}px`; // –§–∏–∫—Å–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É
                syncBtn.style.cursor = 'wait';
                syncBtn.style.opacity = '0.7';
                syncBtn.style.background = 'linear-gradient(135deg, #1a1a1a, #333)';
                syncBtn.style.boxShadow = 'inset 0 2px 4px rgba(0,0,0,0.3)';
                
                try {
                    if (currentTrack && currentTrack.vocalsData) {
                        console.log(`APP: –°–æ–∑–¥–∞–µ–º –≤–æ–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–∫–∞: ${currentTrack.title}`);
                        
                        // –°–æ–∑–¥–∞–µ–º blob URL –¥–ª—è –≤–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        const vocalsBlob = new Blob([currentTrack.vocalsData], { type: currentTrack.vocalsType });
                        const vocalsUrl = URL.createObjectURL(vocalsBlob);
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
                        await this.waveformEditor.loadAudioForSync(vocalsUrl);
                        console.log("APP: –ê—É–¥–∏–æ –¥–ª—è WaveformEditor –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä.");
                        
                        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        setTimeout(() => URL.revokeObjectURL(vocalsUrl), 1000);
                        
                    } else {
                        console.warn("APP: –ù–µ—Ç –≤–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å mock –¥–∞–Ω–Ω—ã–º–∏.");
                    }
                    
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
                    // –ï—Å–ª–∏ –º—ã –≤ –∫–∞—Ä–∞–æ–∫–µ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º –≤–æ–∫–∞–ª –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    const inKaraoke = document.body.classList.contains('mode-karaoke');
                    if (inKaraoke) {
                        try {
                            this._karaokeTempVocalsEnabled = true;
                            if (this.vocalsVolumeSlider) { this.vocalsVolumeSlider.value = 100; }
                            this.audioEngine.setVocalsVolume(1);
                        } catch(_) {}
                        try {
                            const transportControls = document.getElementById('transport-controls');
                            if (transportControls) { transportControls.classList.add('is-open'); }
                        } catch(_) {}
                    }
                    // –§–ò–ö–°: –ï—Å–ª–∏ –≤—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ–º ¬´–∫–∞—Ä–∞–≤–æ–∫–µ-–≤—Ö–æ–¥¬ª –¥–ª—è —Å—Ç–∏–ª–µ–π/–∫–ª–∞—Å—Å–æ–≤/—Å–∫—Ä–æ–ª–ª–∞
                    const cameFromRehearsal = document.body.classList.contains('mode-rehearsal');
                    if (cameFromRehearsal) {
                        try {
                            this._syncCameFromRehearsal = true;
                            // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å body –Ω–∞ –∫–∞—Ä–∞–æ–∫–µ, —á—Ç–æ–±—ã —Ç–µ–ª–µ–ø—Ä–æ–º–ø—Ç–µ—Ä –≤ Sync –≤–µ–ª —Å–µ–±—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                            document.body.classList.remove('mode-rehearsal');
                            document.body.classList.add('mode-karaoke');
                            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ–¥ –∫–∞—Ä–∞–æ–∫–µ
                            this.textStyleManager.setStyle('karaoke');
                            this._setLyricsContainerStyle('style-karaoke');
                            // –°–æ–æ–±—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è–º –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–º–µ–Ω–µ
                            this._emitModeChanged('rehearsal', 'karaoke');
                        } catch(_) {}
                    }
                    this.waveformEditor.show();
                    
                } catch (error) {
                    console.error("APP: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å mock –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    this.waveformEditor.show();
                } finally {
                    // üéØ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ö–ù–û–ü–ö–£
                    setTimeout(() => {
                        syncBtn.disabled = false;
                        syncBtn.textContent = originalText;
                        syncBtn.style.width = '';
                        syncBtn.style.cursor = '';
                        syncBtn.style.opacity = '';
                        syncBtn.style.background = '';
                        syncBtn.style.boxShadow = '';
                    }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                }
            });
        }
    }
    
    /**
     * Toggle marker editor visibility
     */
    _toggleMarkerEditor() {
        if (window.waveformEditor) {
            window.waveformEditor.toggle();
        }
    }
    
    /**
     * Initialize the text style manager
     */
    _initStyleManager() {
        if (!window.textStyleManager) {
            // Create and initialize text style manager
            window.textStyleManager = new TextStyleManager(this.lyricsDisplay);
            console.log('Text style manager initialized');
        }
        
        // Initialize style selector button
        const styleSelectorBtn = document.getElementById('style-selector-btn');
        if (styleSelectorBtn) {
            styleSelectorBtn.addEventListener('click', () => {
                // The new showStyleSelector handles its own creation and removal
                window.textStyleManager.showStyleSelector();
            });
        }
    }
    
    /**
     * Toggle style selector visibility
     */
    _toggleStyleSelector() {
        // This function is now simplified, as the manager handles the modal lifecycle.
        // The call is made directly from the event listener.
        // Kept for potential future use or debugging, but currently obsolete.
            window.textStyleManager.showStyleSelector();
    }

    /**
     * Initialize microphone controls UI
     * @private
     */
    _initMicrophoneControls() {
        console.log('Initializing Microphone UI...');
        this.micToggleButton = document.getElementById('mic-toggle-btn');
        this.micVolumeSlider = document.getElementById('mic-volume');

        if (!this.micToggleButton || !this.micVolumeSlider) {
            console.error('Microphone UI elements (mic-toggle-btn or mic-volume) not found in the DOM.');
            return;
        }

        this.micToggleButton.addEventListener('click', async () => {
            try {
                const newState = await this.audioEngine.toggleMicrophone();
                this._updateMicToggleButtonState(newState.enabled);
                if(newState.enabled && newState.volume !== undefined) {
                    this.micVolumeSlider.value = newState.volume * 100;
                }
            } catch (e) {
                console.warn('Microphone toggle blocked or failed:', e?.message||e);
            }
        });

        this.micVolumeSlider.addEventListener('input', () => {
            this.audioEngine.setMicrophoneVolume(this.micVolumeSlider.value / 100);
        });
        
        const initialMicState = this.audioEngine.getMicrophoneState ? this.audioEngine.getMicrophoneState() : { enabled: false, volume: 0.7 };
        this._updateMicToggleButtonState(initialMicState.enabled);
        this.micVolumeSlider.value = initialMicState.volume * 100;

        // –°–ª—É—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å UI –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        document.addEventListener('microphone-state-changed', (e) => {
            const det = e.detail || {};
            this._updateMicToggleButtonState(!!det.enabled);
            if (typeof det.volume === 'number') {
                this.micVolumeSlider.value = Math.round(det.volume * 100);
            }
        });

        console.log('Microphone UI initialized using existing DOM elements.');
    }

    /**
     * Update microphone toggle button visual state
     * @param {boolean} isEnabled - Current state of the microphone
     * @private
     */
    _updateMicToggleButtonState(isEnabled) {
        if (this.micToggleButton) {
            this.micToggleButton.classList.toggle('active', isEnabled);
            const micControl = this.micToggleButton.closest('.mic-control');

            if (isEnabled) {
                this.micToggleButton.title = 'Microphone ON - Click to disable';
                if (micControl) {micControl.style.opacity = '1';}
            } else {
                this.micToggleButton.title = 'Microphone OFF - Click to enable';
                if (micControl) {micControl.style.opacity = '0.6';}
            }
        }
    }

    /**
     * Initialize LoopBlock controls UI
     * @private
     */
    _initLoopBlockControls() {
        console.log('Initializing LoopBlock controls');
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LoopBlock
        this.loopBlockBtn = document.getElementById('toggle-loopblock-mode');
        
        if (!this.loopBlockBtn) {
            console.error('LoopBlock button not found in the DOM');
            return;
        }
        
        // –ù–∞—Å–ª–µ–¥–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏.
        this.loopBlockBtn.addEventListener('click', () => {
            try {
                document.dispatchEvent(new CustomEvent('bottom-loop-click'));
            } catch (_) {}
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç LoopBlockManager —Å —Ç–µ–∫—É—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
     * @private
     */
    _initializeLoopBlockManager() { /* legacy disabled */ }

    /**
     * Initialize mask controls
     */
    _initMaskControls() {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–µ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        const maskBtn = document.getElementById('mask-mode-btn');
        if (maskBtn && this.maskSystem) {
            maskBtn.addEventListener('click', () => {
                this._toggleMaskSystem();
            });
            console.log('üé≠ MaskSystem: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else if (!maskBtn) {
            console.warn('üé≠ MaskSystem: –ö–Ω–æ–ø–∫–∞ mask-mode-btn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML');
        } else if (!this.maskSystem) {
            console.warn('üé≠ MaskSystem: –°–∏—Å—Ç–µ–º–∞ –º–∞—Å–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }
    
    /**
     * Toggle mask system visibility
     */
    _toggleMaskSystem() {
        if (this.maskSystem) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫—Ä—ã—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞—Å–æ–∫
            const maskControls = this.maskSystem.maskControlsContainer;
            if (maskControls) {
                const isHidden = maskControls.classList.contains('hidden');
                if (isHidden) {
                    console.log('üé≠ MaskSystem: –ü–æ–∫–∞–∑—ã–≤–∞—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
                    this.maskSystem.showMaskControls();
                    document.getElementById('mask-mode-btn').classList.add('active');
                } else {
                    console.log('üé≠ MaskSystem: –°–∫—Ä—ã–≤–∞—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
                    this.maskSystem.hideMaskControls();
                    document.getElementById('mask-mode-btn').classList.remove('active');
                }
            } else {
                console.warn('üé≠ MaskSystem: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } else {
            console.warn('üé≠ MaskSystem: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞ –¥—Ä—É–≥–æ–π
     * @param {string} newMode - –ù–æ–≤—ã–π —Ä–µ–∂–∏–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
     * @private
     */
    _saveCurrentMode(newMode) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –≤ —Å–≤–æ–π—Å—Ç–≤–µ previousMode
        if (this.currentMode && this.currentMode !== newMode) {
            this.previousMode = this.currentMode;
            console.log(`App: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º: ${this.previousMode}`);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        this.currentMode = newMode;
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
     * @private
     */
    _hideWelcomeScreen() {
        const welcomeScreen = document.querySelector('.welcome-message');
        if (welcomeScreen) {
            welcomeScreen.style.display = 'none';
        }
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
     * @private
     */
    _activateConcertMode() {
        console.log('Activating concert mode');
        // –í–∫–ª—é—á–∞–µ–º ¬´–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é¬ª –ø–ª–∞—à–∫—É –æ—Ç Live
        this._enableResidualLiveOverlay(true);
        const previousMode = this._getCurrentMode?.() || this._detectBodyMode?.() || null;
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º Live —Ä–µ–∂–∏–º –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if (window.liveMode && window.liveMode.isActive) {
            window.liveMode.deactivate();
        }
        
        this.karaokeBackgroundManager.stop();
        if (this.concertBackgroundManager) { this.concertBackgroundManager.stop(); }
        if (this.rehearsalBackgroundManager) { this.rehearsalBackgroundManager.stop(); }
        if (this.concertBackgroundManager) { this.concertBackgroundManager.start(); }
        this.textStyleManager.setStyle('concert');
        this._setLyricsContainerStyle('style-concert');
        this.blockLoopControl.deactivate();
        this._hideLiveFeedConcept();
        
        // –°–∫—Ä—ã–≤–∞–µ–º BPM –∫–æ–Ω—Ç—Ä–æ–ª–∏ –≤ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if (this.bpmControls) {
            this.bpmControls.style.display = 'none';
        }
        
        // CSS –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
        document.body.classList.add('mode-concert');
        document.body.classList.remove('mode-rehearsal', 'mode-karaoke', 'mode-live');
        // –í –ø—Ä–æ—Ñ. —Ä–µ–∂–∏–º–∞—Ö –ø–∞–Ω–µ–ª—å –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        try {
            const transportControls = document.getElementById('transport-controls');
            if (transportControls) { transportControls.classList.add('is-open'); }
        } catch(_) {}
        // –°—Ç–∞—Ä—Ç —Å–ª–∞–π–¥—à–æ—É —Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–∞
        if (this.concertBackgroundManager) { this.concertBackgroundManager.start(); }
        // –ü—Ä–µ—Å–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –∫–∞—Ä–∞–æ–∫–µ
        try { this._applyModeVolumePreset('concert'); } catch(_) {}
        try { this._emitModeChanged(previousMode, 'concert'); } catch(_) {}
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∫–∞—Ä–∞–æ–∫–µ
     * @private
     */
    _activateKaraokeMode() {
        console.log('Activating karaoke mode');
        // –í –∫–∞—Ä–∞–æ–∫–µ –ø–ª–∞—à–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        this._enableResidualLiveOverlay(false);
        const previousMode = this._getCurrentMode?.() || this._detectBodyMode?.() || null;
        
        if (window.liveMode && window.liveMode.isActive) {
            window.liveMode.deactivate();
        }
        
        this.textStyleManager.setStyle('karaoke');
        this._setLyricsContainerStyle('style-karaoke');
        this.blockLoopControl.deactivate();
        if (this.rehearsalBackgroundManager) {this.rehearsalBackgroundManager.stop();}
        if (this.concertBackgroundManager) { this.concertBackgroundManager.stop(); }
        this._hideLiveFeedConcept();
        
        if (this.bpmControls) {
            this.bpmControls.style.display = 'none';
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –∫–ª–∞—Å—Å—ã —Ä–µ–∂–∏–º–∞, –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–∞
        document.body.classList.add('mode-karaoke');
        document.body.classList.remove('mode-concert', 'mode-rehearsal', 'mode-live');
        this.karaokeBackgroundManager.start();
        // –í –∫–∞—Ä–∞–æ–∫–µ –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞
        try {
            const transportControls = document.getElementById('transport-controls');
            if (transportControls) { transportControls.classList.remove('is-open'); }
        } catch(_) {}

        // –ü—Ä–µ—Å–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è –∫–∞—Ä–∞–æ–∫–µ: –≤–æ–∫–∞–ª –≤ –Ω–æ–ª—å, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try { this._applyModeVolumePreset('karaoke'); } catch(_) {}

        // –°–æ–æ–±—â–∞–µ–º –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        try { this._emitModeChanged(previousMode, 'karaoke'); } catch(_) {}
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏
     * @private
     */
    _activateRehearsalMode() {
        console.log('Activating rehearsal mode');
        // –í–∫–ª—é—á–∞–µ–º ¬´–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é¬ª –ø–ª–∞—à–∫—É –æ—Ç Live
        this._enableResidualLiveOverlay(true);
        const previousMode = this._getCurrentMode?.() || this._detectBodyMode?.() || null;
        
        if (window.liveMode && window.liveMode.isActive) {
            window.liveMode.deactivate();
        }
        
        this.karaokeBackgroundManager.stop();
        try { document.body.classList.remove('karaoke-active'); } catch(_) {}

        // –ì–ï–ô–¢–ò–ù–ì: –∂–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞/–º–∞—Ä–∫–µ—Ä–æ–≤, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å ¬´—Å–º–µ—à–∞–Ω–Ω—ã–µ¬ª –±–ª–æ–∫–∏ –ø—Ä–∏ –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è—Ö
        const startTs = Date.now();
        const maxWaitMs = 1500;
        const tryActivate = () => {
            const lyricsReady = Array.isArray(this.lyricsDisplay?.lyrics) && this.lyricsDisplay.lyrics.length > 0;
            const markersCount = (this.markerManager && typeof this.markerManager.getMarkers === 'function') ? (this.markerManager.getMarkers() || []).length : 0;
            const blocksReady = Array.isArray(this.lyricsDisplay?.textBlocks) && this.lyricsDisplay.textBlocks.length > 0;
            if (lyricsReady && (markersCount === 0 || blocksReady)) {
                // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
                try {
                    if (this.lyricsDisplay && Array.isArray(this.lyricsDisplay.textBlocks)) {
                        const sanitized = this.lyricsDisplay._sanitizeBlocks(this.lyricsDisplay.textBlocks);
                        this.lyricsDisplay.textBlocks = sanitized;
                    }
                } catch(_) {}
                this.textStyleManager.setStyle('rehearsal');
                this._setLyricsContainerStyle(null);
                this.blockLoopControl.activate();
                // –°–º–µ–Ω–∞ —Ñ–æ–Ω–∞ –∏ BPM –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
                if (this.bpmControls) { this.bpmControls.style.display = 'flex'; }
                this._updateBPMDisplay();
            } else if (Date.now() - startTs < maxWaitMs) {
                setTimeout(tryActivate, 120);
                return;
            } else {
                // Fallback: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–∞–∂–µ –±–µ–∑ –±–ª–æ–∫–æ–≤, –Ω–æ —Å—Ä–∞–∑—É —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –ø–æ–∑–∂–µ
                this.textStyleManager.setStyle('rehearsal');
                this._setLyricsContainerStyle(null);
                this.blockLoopControl.activate();
                setTimeout(() => {
                    try {
                        if (this.lyricsDisplay && Array.isArray(this.lyricsDisplay.textBlocks)) {
                            const sanitized = this.lyricsDisplay._sanitizeBlocks(this.lyricsDisplay.textBlocks);
                            this.lyricsDisplay.textBlocks = sanitized;
                            if (this.lyricsDisplay.currentStyle?.id === 'rehearsal') {
                                this.lyricsDisplay.activateRehearsalDisplay();
                            }
                        }
                    } catch(_) {}
                }, 200);
            }
        };
        tryActivate();
        this._hideLiveFeedConcept();
        
        if (this.bpmControls) {
            this.bpmControls.style.display = 'flex';
        }
        this._updateBPMDisplay();
        
        // –°–Ω–∞—á–∞–ª–∞ –∫–ª–∞—Å—Å—ã —Ä–µ–∂–∏–º–∞, –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–∞
        document.body.classList.add('mode-rehearsal');
        document.body.classList.remove('mode-concert', 'mode-karaoke', 'mode-live');
        // –í –ø—Ä–æ—Ñ. —Ä–µ–∂–∏–º–∞—Ö –ø–∞–Ω–µ–ª—å –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        try {
            const transportControls = document.getElementById('transport-controls');
            if (transportControls) { transportControls.classList.add('is-open'); }
        } catch(_) {}
        if (this.rehearsalBackgroundManager) {
            this.rehearsalBackgroundManager.start();
            // –ü—Ä–∏–≤—è–∂–µ–º —Å–º–µ–Ω—É —Ñ–æ–Ω–∞ –∫ —Å–º–µ–Ω–µ –±–ª–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ª—É–ø –∏ –Ω–µ seek)
            this.rehearsalBackgroundManager.bindToBlockChanges(this.lyricsDisplay, this.blockLoopControl, this.audioEngine);
        }

        // –°–æ–æ–±—â–∞–µ–º –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        try { this._emitModeChanged(previousMode, 'rehearsal'); } catch(_) {}
        // –ü—Ä–µ—Å–µ—Ç/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏
        try { this._applyModeVolumePreset('rehearsal'); } catch(_) {}
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è Live —Ä–µ–∂–∏–º–∞
     * @private
     */
    _activateLiveMode() {
        console.log('Activating live mode');
        const previousMode = this._getCurrentMode?.() || this._detectBodyMode?.() || null;
        this.karaokeBackgroundManager.stop();
        if (this.rehearsalBackgroundManager) {this.rehearsalBackgroundManager.stop();}
        this.textStyleManager.setStyle('live');
        this._setLyricsContainerStyle('style-live');
        this.blockLoopControl.deactivate();
        this._hideLiveFeedConcept();
        
        // –°–∫—Ä—ã–≤–∞–µ–º BPM –∫–æ–Ω—Ç—Ä–æ–ª–∏ –≤ LIVE —Ä–µ–∂–∏–º–µ
        if (this.bpmControls) {
            this.bpmControls.style.display = 'none';
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LiveMode –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (typeof LiveMode !== 'undefined') {
            this._initLiveMode();
            // –í–ê–ñ–ù–û: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Live —Ä–µ–∂–∏–º —Å –∫–∞–º–µ—Ä–æ–π
        if (window.liveMode) {
                window.liveMode.activate()
                    .then(activated => {
                        if (activated) {
                            console.log('Live —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –∫–∞–º–µ—Ä–æ–π');
        } else {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Live —Ä–µ–∂–∏–º');
                        }
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Live —Ä–µ–∂–∏–º–∞:', error);
                    });
            }
        } else {
            console.warn('LiveMode class not available');
        }
        
        // CSS –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
        document.body.classList.add('mode-live');
        document.body.classList.remove('mode-concert', 'mode-karaoke', 'mode-rehearsal');

        // –ü—Ä–µ—Å–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è Live: –∫–∞–∫ –∫–∞—Ä–∞–æ–∫–µ (–≤–æ–∫–∞–ª 0% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        try { this._applyModeVolumePreset('live'); } catch(_) {}

        // –°–æ–æ–±—â–∞–µ–º –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        try { this._emitModeChanged(previousMode, 'live'); } catch(_) {}
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º
     */
    switchToLastMode() {
        console.log(`App: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º: ${this.previousMode}`);
        // –ü–æ—Å–ª–µ warmup –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ Welcome
        if (window.__liveBootstrapped && !this.initComplete) {
            try {
                this._hideLiveFeedConcept();
                this._showWelcomeIfNoTracks();
                return;
            } catch(_) {}
        }
        this._handleModeChange(this.previousMode || 'concert');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç LiveMode
     * @private
     */
    _initLiveMode() {
        console.log('Initializing LiveMode without camera activation...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫–ª–∞—Å—Å LiveMode
        if (typeof LiveMode === 'undefined') {
            console.warn('LiveMode class not available, skipping initialization');
            return;
        }
        
        try {
            // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LiveMode, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
            if (!window.liveMode) {
                window.liveMode = new LiveMode();
                console.log('LiveMode instance created, but not activated');
            }
            
            // –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞—Ä–∞–Ω–µ–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞
        } catch (error) {
            console.error('Error initializing LiveMode:', error);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ –∫–ª–∞—Å—Å–∞–º body
     * @private
     */
    _detectBodyMode() {
        const b = document.body.classList;
        if (b.contains('mode-rehearsal')) {return 'rehearsal';}
        if (b.contains('mode-karaoke')) {return 'karaoke';}
        if (b.contains('mode-live')) {return 'live';}
        if (b.contains('mode-concert')) {return 'concert';}
        return null;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∂–∏–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥)
     * @private
     */
    _getCurrentMode() {
        try { return this.currentMode || null; } catch(_) { return null; }
    }

    /**
     * –≠–º–∏—Ç–∏—Ç —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
     * @param {string|null} from
     * @param {string} to
     * @private
     */
    _emitModeChanged(from, to) {
        try { this.currentMode = to; } catch(_) {}
        const evt = new CustomEvent('mode-changed', { detail: { from, to } });
        window.dispatchEvent(evt);
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Ä–µ–∂–∏–º–∞
     * @param {string} activeButtonIdOrMode - ID –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Ä–µ–∂–∏–º
     */
    _setActiveButton(activeButtonIdOrMode) {
        document.querySelectorAll('.mode-button').forEach(btn => {
            btn.classList.remove('active');
        });
        
        const button = document.querySelector(`.mode-button[data-mode="${activeButtonIdOrMode}"]`);
        if (button) {
            button.classList.add('active');
        } else {
            // Fallback for ID if data-mode not found
            const buttonById = document.getElementById(activeButtonIdOrMode);
            if (buttonById) {
                buttonById.classList.add('active');
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (error, info, success)
     */
    _showNotification(message, type = 'info') {
        console.log(`App: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): ${message}`);
        
        // –ß–µ—Ä–µ–∑ LyricsDisplay, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (this.lyricsDisplay && this.lyricsDisplay.statusDisplay) {
            this.lyricsDisplay.statusDisplay.updateStatus(message, type);
            return;
        }
        
        // –ß–µ—Ä–µ–∑ LiveMode, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.liveMode && typeof window.liveMode._showErrorMessage === 'function') {
            window.liveMode._showErrorMessage(message, type);
            return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notificationDiv = document.createElement('div');
        notificationDiv.textContent = message;
        notificationDiv.style.position = 'fixed';
        notificationDiv.style.bottom = '20px';
        notificationDiv.style.left = '50%';
        notificationDiv.style.transform = 'translateX(-50%)';
        notificationDiv.style.padding = '10px 20px';
        notificationDiv.style.borderRadius = '5px';
        notificationDiv.style.color = '#fff';
        notificationDiv.style.zIndex = '9999';
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (type) {
            case 'error':
                notificationDiv.style.backgroundColor = 'rgba(220, 53, 69, 0.9)';
                break;
            case 'success':
                notificationDiv.style.backgroundColor = 'rgba(40, 167, 69, 0.9)';
                break;
            default:
                notificationDiv.style.backgroundColor = 'rgba(0, 123, 255, 0.9)';
        }
        
        document.body.appendChild(notificationDiv);
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notificationDiv.parentNode) {
                notificationDiv.parentNode.removeChild(notificationDiv);
            }
        }, 5000);
    }
    
    /**
     * üîß –ù–û–í–´–ô: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–∫–∞–ª—å–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    showVocalError(message) {
        console.warn('üé§ Vocal Error:', message);
        this._showNotification(message, 'error');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–∫–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const vocalIndicator = document.querySelector('.vocal-indicator');
        if (vocalIndicator) {
            vocalIndicator.classList.add('vocal-unavailable');
            vocalIndicator.title = '–í–æ–∫–∞–ª—å–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
        }
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä
        if (this.vocalsVolumeSlider) {
            this.vocalsVolumeSlider.disabled = true;
            this.vocalsVolumeSlider.style.opacity = '0.5';
            this.vocalsVolumeSlider.title = '–í–æ–∫–∞–ª—å–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
        }
    }
    
    /**
     * üîß –ù–û–í–´–ô: –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–∫–∞–ª–∞
     */
    enableVocalControls() {
        console.log('üé§ Activating vocal controls');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä
        if (this.vocalsVolumeSlider) {
            this.vocalsVolumeSlider.disabled = false;
            this.vocalsVolumeSlider.style.opacity = '1';
            this.vocalsVolumeSlider.title = '–ì—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ–∫–∞–ª—å–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–∫–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const vocalIndicator = document.querySelector('.vocal-indicator');
        if (vocalIndicator) {
            vocalIndicator.classList.remove('vocal-unavailable');
            vocalIndicator.classList.add('vocal-available');
            vocalIndicator.title = '–í–æ–∫–∞–ª—å–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this._showNotification('–í–æ–∫–∞–ª—å–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
    }

    /**
     * Initialize Live Feed Concept functionality
     * @private
     */
    _initLiveFeedConcept() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ñ–∏–≤–æ–π –õ–µ–Ω—Ç—ã');
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        const liveFeedConcept = document.getElementById('live-feed-concept');
        const backToHallBtn = document.getElementById('back-to-hall');
        const homeBtn = document.getElementById('home-btn');
        
        if (!liveFeedConcept) {
            console.warn('üöÄ –≠–ª–µ–º–µ–Ω—Ç—ã –ñ–∏–≤–æ–π –õ–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–º–æ–π (–≤–æ–∑–≤—Ä–∞—Ç –≤ –ñ–∏–≤—É—é –õ–µ–Ω—Ç—É)
        if (homeBtn) {
            homeBtn.addEventListener('click', () => {
                this._showLiveFeedConcept();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∑–∞–ª (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É)
        if (backToHallBtn) {
            backToHallBtn.style.display = 'none';
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Ç–æ–∫–æ–≤
        this._initStreamFilters();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this._initLiveFeedInteractions();
        
        console.log('‚úÖ –ñ–∏–≤–∞—è –õ–µ–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    /**
     * Show Live Feed Concept
     * @private
     */
    _showLiveFeedConcept() {
        console.log('üöÄ –ü–æ–∫–∞–∑—ã–≤–∞—é –ñ–∏–≤—É—é –õ–µ–Ω—Ç—É');
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º Live —Ä–µ–∂–∏–º –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if (window.liveMode && window.liveMode.isActive) {
            window.liveMode.deactivate();
        }
        
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (this.blockLoopControl) {
            this.blockLoopControl.deactivate();
        }
        
        const liveFeedConcept = document.getElementById('live-feed-concept');
        const body = document.body;
        
        if (liveFeedConcept) {
            liveFeedConcept.classList.remove('hidden');
            body.classList.add('live-feed-active');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this._startLiveFeedDemo();
            
            console.log('‚úÖ –ñ–∏–≤–∞—è –õ–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        }
        this._setActiveButton(null); // No mode button active for live feed
    }
    
    /**
     * Hide Live Feed Concept
     * @private
     */
    _hideLiveFeedConcept() {
        console.log('üöÄ –°–∫—Ä—ã–≤–∞—é –ñ–∏–≤—É—é –õ–µ–Ω—Ç—É');
        
        const liveFeedConcept = document.getElementById('live-feed-concept');
        const body = document.body;
        
        if (liveFeedConcept) {
            liveFeedConcept.classList.add('hidden');
            body.classList.remove('live-feed-active');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this._stopLiveFeedDemo();
            
            console.log('‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∑–∞–ª');
    }
}

/**
     * Initialize stream filters
     * @private
     */
    _initStreamFilters() {
        const filterTabs = document.querySelectorAll('.filter-tabs .tab');
        
        filterTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
                filterTabs.forEach(t => t.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–º—É —Ç–∞–±—É
                tab.classList.add('active');
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏
                const filter = tab.dataset.filter;
                this._filterStreams(filter);
            });
        });
    }
    
    /**
     * Filter streams by type
     * @param {string} filter - Filter type
     * @private
     */
    _filterStreams(filter) {
        const streamCards = document.querySelectorAll('.stream-card');
        
        streamCards.forEach(card => {
            const cardType = card.dataset.type;
            
            if (filter === 'all' || cardType === filter) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
        
        console.log(`üîç –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω: ${filter}`);
    }
    
    /**
     * Initialize Live Feed interactions
     * @private
     */
    _initLiveFeedInteractions() {
        // Quick action buttons
        const quickBtns = document.querySelectorAll('.quick-btn');
        quickBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const mode = btn.dataset.mode;
                if (mode) {
                    console.log(`üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º: ${mode}`);
                    this._handleModeChange(mode);
        }
            });
        });
        
        // Stream interaction buttons
        const joinBtns = document.querySelectorAll('.join-btn');
        const watchBtns = document.querySelectorAll('.watch-btn');
        
        joinBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                this._showDemoMessage('üéµ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–æ—Ç–æ–∫—É...', 'info');
            });
        });
        
        watchBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                this._showDemoMessage('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Ç–æ–∫–∞...', 'info');
            });
        });
        
        // Friend join buttons
        const friendJoinBtns = document.querySelectorAll('.friend-join-btn');
        friendJoinBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                this._showDemoMessage('üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –¥—Ä—É–≥—É...', 'info');
            });
        });
    }
    
    /**
     * Start Live Feed demo updates
     * @private
     */
    _startLiveFeedDemo() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑—Ä–∏—Ç–µ–ª–µ–π
        this.liveFeedDemoInterval = setInterval(() => {
            const viewerCounts = document.querySelectorAll('.viewer-count');
            viewerCounts.forEach(count => {
                if (count.textContent.includes('K')) {
                    const current = parseFloat(count.textContent.replace('K', ''));
                    const change = (Math.random() - 0.5) * 0.1;
                    const newValue = Math.max(0.1, current + change);
                    count.textContent = newValue.toFixed(1) + 'K';
                } else {
                    const current = parseInt(count.textContent);
                    const change = Math.floor((Math.random() - 0.5) * 20);
                    const newValue = Math.max(1, current + change);
                    count.textContent = newValue.toString();
                }
            });
        }, 3000);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.progressDemoInterval = setInterval(() => {
            const progressText = document.querySelector('.progress-text');
            if (progressText) {
                const current = progressText.textContent.split('/');
                let completed = parseInt(current[0]);
                const total = parseInt(current[1]);
                
                if (Math.random() > 0.7 && completed < total) {
                    completed++;
                    progressText.textContent = `${completed}/${total}`;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª—å—Ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    const ring = document.querySelector('.progress-ring');
                    if (ring) {
                        const percentage = (completed / total) * 360;
                        ring.style.background = `conic-gradient(#ff3366 0deg ${percentage}deg, rgba(255, 255, 255, 0.1) ${percentage}deg 360deg)`;
                    }
                }
            }
        }, 5000);
    }
    
    /**
     * Stop Live Feed demo updates
     * @private
     */
    _stopLiveFeedDemo() {
        if (this.liveFeedDemoInterval) {
            clearInterval(this.liveFeedDemoInterval);
            this.liveFeedDemoInterval = null;
        }
        
        if (this.progressDemoInterval) {
            clearInterval(this.progressDemoInterval);
            this.progressDemoInterval = null;
    }
}

/**
     * Show demo message
     * @param {string} message - Message text
     * @param {string} type - Message type
     * @private
     */
    _showDemoMessage(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'live-feed-notification';
        notification.textContent = message;
        
        notification.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 20px 30px;
            border-radius: 10px;
            font-size: 1.1rem;
            z-index: 10000;
            animation: fadeInOut 2s ease-in-out;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
        if (!document.getElementById('live-feed-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'live-feed-notification-styles';
            style.textContent = `
                @keyframes fadeInOut {
                    0%, 100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
                    10%, 90% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
            if (document.body.contains(notification)) {
                document.body.removeChild(notification);
            }
        }, 2000);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞
     * @param {Object} event - –°–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞
     * @private
     */
    _handleTrackLoaded(event) {
        this._hideLiveFeedConcept();

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞
        if (this.textStyleManager) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, —á—Ç–æ–±—ã –≤—Å–µ –±—ã–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            this.textStyleManager.setStyle(this.currentMode);
        }

        this._updateScaleControlsState(); // –í–∫–ª—é—á–∞–µ–º –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        this._updateScaleDisplay();      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏: –≤–∞–≥–æ–Ω—á–∏–∫–∏ –∏ –∫–Ω–æ–ø–∫–∞ Loop
        try {
            const isRehearsal = document.body.classList.contains('mode-rehearsal');
            if (isRehearsal) {
                if (this.blockLoopControl) {
                    this.blockLoopControl.activate();
                    // –§–æ—Ä—Å–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Loop –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if (typeof this.blockLoopControl._createLoopButtonForCurrentBlock === 'function') {
                        this.blockLoopControl._createLoopButtonForCurrentBlock();
                    }
                }
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –±–ª–æ–∫–∏ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ü–∏–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤
                if (this.lyricsDisplay && typeof this.lyricsDisplay.activateRehearsalDisplay === 'function') {
                    this.lyricsDisplay.activateRehearsalDisplay();
                }
            }
        } catch(_) {}
    }

    /**
     * Checks if font scaling is allowed in the current mode.
     * @returns {boolean}
     * @private
     */
    _isScalingAllowed() {
        // Scaling is allowed if lyrics are loaded and we are not in a mode that disables it
        return this.lyricsDisplay.hasLyrics();
    }

    /**
     * Updates the UI display for the font scale.
     * @private
     */
    _updateScaleDisplay() {
        if (!this.scaleValueBtn) {return;}
        
            const scale = window.textStyleManager.getFontScale();
        this.scaleValueBtn.textContent = `${Math.round(scale * 100)}%`;
    }

    /**
     * Enables or disables scale controls based on the current mode.
     * @private
     */
    _updateScaleControlsState() {
        const allowed = this._isScalingAllowed();
        if (this.scaleDownBtn) {this.scaleDownBtn.disabled = !allowed;}
        if (this.scaleUpBtn) {this.scaleUpBtn.disabled = !allowed;}
        if (this.scaleValueBtn) {this.scaleValueBtn.disabled = !allowed;}
    }

    // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    _setLyricsContainerStyle(styleClass) {
        const container = document.getElementById('lyrics-container');
        if (!container) {
            console.error('Lyrics container not found!');
            return;
        };

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∏–ª–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        const styleClasses = ['style-karaoke', 'style-concert', 'style-rehearsal']; // –∏ –¥—Ä—É–≥–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        styleClasses.forEach(cls => container.classList.remove(cls));

        if (styleClass) {
            container.classList.add(styleClass);
            console.log(`Applied style class to lyrics-container: ${styleClass}`);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –ø—Ä–µ—Å–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏.
     * - karaoke: vocals=0, instrumental=100
     * - rehearsal: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
     * - concert/live: –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª 100, –≤–æ–∫–∞–ª 0)
     */
    _applyModeVolumePreset(mode) {
        const setSlider = (el, v) => { if (el) { el.value = v; } };
        const apply = (inst, voc) => {
            setSlider(this.instrumentalVolumeSlider, inst);
            setSlider(this.vocalsVolumeSlider, voc);
            try { this.audioEngine.setInstrumentalVolume((inst || 0)/100); } catch(_) {}
            try { this.audioEngine.setVocalsVolume((voc || 0)/100); } catch(_) {}
        };

        if (mode === 'karaoke') {
            apply(100, 0);
            return;
        }
        if (mode === 'rehearsal') {
            // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            let inst = 100; let voc = 100;
            try {
                const sInst = localStorage.getItem('rehearsal:instrumentalVolume');
                const sVoc = localStorage.getItem('rehearsal:vocalsVolume');
                if (sInst !== null) { inst = Math.max(0, Math.min(100, parseInt(sInst, 10) || 0)); }
                if (sVoc !== null) { voc = Math.max(0, Math.min(100, parseInt(sVoc, 10) || 0)); }
            } catch(_) {}
            apply(inst, voc);
            return;
        }
        if (mode === 'concert' || mode === 'live') {
            apply(100, 0);
        }
    }

    _handleModeChange(mode) {
        if (this.currentMode === mode) {return;}

        console.log(`Switching to ${mode} mode`);

        if (window.waveformEditor && window.waveformEditor.isVisible) {
            window.waveformEditor.hide();
        }

        this._saveCurrentMode(mode);
        this._setActiveButton(mode);

        switch (mode) {
            case 'concert':
                this._activateConcertMode();
                break;
            case 'karaoke':
                this._activateKaraokeMode();
                break;
            case 'rehearsal':
                this._activateRehearsalMode();
                break;
            case 'live':
                this._activateLiveMode();
                break;
            case 'live-feed':
                 this._showLiveFeedConcept();
                 break;
            default:
                console.warn(`Unknown mode: ${mode}`);
                this._showLiveFeedConcept(); // Fallback to live feed
        }

        this._updateScaleDisplay();
        this._updateScaleControlsState();
    }

    async _handleWordAlignment() {
        if (this.isSyncing) {return;}

        this.isSyncing = true;
        const syncButton = document.getElementById('align-words-btn');
        const originalButtonText = syncButton.innerHTML;
        syncButton.disabled = true;
        syncButton.innerHTML = `<i class="fas fa-spinner fa-spin"></i> –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...`;

        try {
            const track = this.trackCatalog.getCurrentTrack();
            console.log('App: Sync started - track check:', {
                hasTrack: !!track,
                trackTitle: track?.title,
                hasInstrumentalData: !!track?.instrumentalData,
                hasVocalsData: !!track?.vocalsData,
                instrumentalDataSize: track?.instrumentalData?.byteLength,
                vocalsDataSize: track?.vocalsData?.byteLength,
                instrumentalType: track?.instrumentalType,
                vocalsType: track?.vocalsType
            });
            
            if (!track) {
                this.ui.showNotification('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.', 'warning');
                throw new Error('–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.');
            }

            // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–æ–∫–∞–ª—å–Ω–æ–π –¥–æ—Ä–æ–∂–∫–µ –¥–ª—è AI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            let audioData, audioType;
            if (track.vocalsData && track.vocalsType) {
                audioData = track.vocalsData;
                audioType = track.vocalsType;
                console.log('üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–û–ö–ê–õ–¨–ù–£–Æ –¥–æ—Ä–æ–∂–∫—É –¥–ª—è AI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            } else if (track.instrumentalData && track.instrumentalType) {
                audioData = track.instrumentalData;
                audioType = track.instrumentalType;
                console.log('üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –¥–æ—Ä–æ–∂–∫—É (–≤–æ–∫–∞–ª—å–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)');
            } else {
                this.ui.showNotification('–ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.', 'warning');
                throw new Error('–ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
            }

            const lyricsText = this.lyricsDisplay.fullText;
            console.log('App: Lyrics check:', {
                hasLyricsText: !!lyricsText,
                lyricsLength: lyricsText?.length,
                lyricsPreview: lyricsText?.substring(0, 100)
            });
            
            if (!lyricsText) {
                this.ui.showNotification('–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', 'warning');
                throw new Error('–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
            }

            // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
            const audioBlob = new Blob([audioData], { type: audioType });
            console.log(`App: Created audio blob from track data:`, {
                size: audioBlob.size,
                type: audioBlob.type,
                title: track.title,
                source: track.vocalsData ? 'vocals' : 'instrumental'
            });

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            console.log(`üéµ –ê–£–î–ò–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:`, {
                originalArrayBuffer: audioData.byteLength,
                blobSize: audioBlob.size,
                audioType: audioType,
                trackDuration: track.duration || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                sampleRate: track.sampleRate || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                audioSource: track.vocalsData ? 'üé§ –í–û–ö–ê–õ–¨–ù–ê–Ø –î–û–†–û–ñ–ö–ê' : 'üéµ –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –î–û–†–û–ñ–ö–ê'
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ AudioContext
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const arrayBuffer = await audioBlob.arrayBuffer();
                const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
                
                console.log(`üéµ –ê–ù–ê–õ–ò–ó –ê–£–î–ò–û –ë–£–§–ï–†–ê:`, {
                    duration: audioBuffer.duration,
                    sampleRate: audioBuffer.sampleRate,
                    numberOfChannels: audioBuffer.numberOfChannels,
                    length: audioBuffer.length
                });

                // –ê–Ω–∞–ª–∏–∑ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                const channelData = audioBuffer.getChannelData(0);
                let maxAmplitude = 0;
                let rmsSum = 0;
                for (let i = 0; i < channelData.length; i++) {
                    const sample = Math.abs(channelData[i]);
                    maxAmplitude = Math.max(maxAmplitude, sample);
                    rmsSum += sample * sample;
                }
                const rmsAmplitude = Math.sqrt(rmsSum / channelData.length);
                
                console.log(`üìä –ê–ù–ê–õ–ò–ó –ì–†–û–ú–ö–û–°–¢–ò:`, {
                    maxAmplitude: maxAmplitude.toFixed(4),
                    rmsAmplitude: rmsAmplitude.toFixed(4),
                    isSilent: maxAmplitude < 0.001,
                    isQuiet: rmsAmplitude < 0.01
                });

                if (maxAmplitude < 0.001) {
                    this.ui.showNotification('‚ö†Ô∏è –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'warning');
            return;
        }
        
                audioContext.close();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ:', error);
                this.ui.showNotification('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ: ' + error.message, 'error');
            return;
        }
        
            this.ui.showNotification('–ó–∞–ø—É—Å–∫ AI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...', 'info');
            console.log('App: Starting word alignment with:', {
                lyricsLength: lyricsText.length,
                audioBlobSize: audioBlob.size,
                audioBlobType: audioBlob.type
            });
            
            this.wordAligner.addEventListener('result', (event) => {
                const words = event.detail;
                console.log(`App: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, words);

                if (!Array.isArray(words) || words.length === 0) {
                    console.error("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.");
                    this.ui.showNotification("–û—à–∏–±–∫–∞: AI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.", "error");
            return;
        }
        
                // =================================================================
                // üî¨ –†–ï–ñ–ò–ú –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: "–ñ–ò–í–ê–Ø –†–ê–°–®–ò–§–†–û–í–ö–ê"
                // =================================================================
                console.log("üî¨ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: '–ñ–ò–í–ê–Ø –†–ê–°–®–ò–§–†–û–í–ö–ê'");
                this.ui.showNotification("–ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è AI...", "info");

                const wordsPerLine = 7; // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 7 —Å–ª–æ–≤ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                const testLines = [];
                const testMarkers = [];

                for (let i = 0; i < words.length; i += wordsPerLine) {
                    const chunk = words.slice(i, i + wordsPerLine);
                    if (chunk.length > 0) {
                        const lineText = chunk.map(w => w.word).join(' ');
                        const firstWord = chunk.find(w => w && typeof w.start === 'number');
                        
                        if (lineText && firstWord) {
                            const lineIndex = testLines.length;
                            testLines.push(lineText);
                            testMarkers.push({
                                line: lineText,
                                time: firstWord.start,
                                lineIndex: lineIndex,
                                source: 'diag-test',
                                color: '#FFC107' // –Ø—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                            });
                        }
                    }
                }

                console.log(`üî¨ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–æ ${testLines.length} —Å—Ç—Ä–æ–∫ –∏ ${testMarkers.length} –º–∞—Ä–∫–µ—Ä–æ–≤.`);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ –¥–∏—Å–ø–ª–µ–π
                const testBlock = {
                    name: "AI Raw Transcript",
                    lines: testLines,
                    id: `diag-block-${Date.now()}`
                };
                this.lyricsDisplay.loadBlocks([testBlock]);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã
                this.markerManager.setMarkers(testMarkers);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
                this.waveformEditor.show();
                this.ui.showNotification("üî¨ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.", "success");
                
                // =================================================================
                // ‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° "–¢–†–ï–ó–£–ë–ï–¶" ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                // =================================================================
                /*
                console.log(`App: –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${typeof words}`);
                if (typeof words === 'object' && words !== null && !Array.isArray(words)) {
                    console.log(`App: –ö–ª—é—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:`, Object.keys(words));
                }
                if (Array.isArray(words)) {
                     console.log(`App: –ü–æ–ª—É—á–µ–Ω –ø—Ä—è–º–æ–π –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤: ${words.length}`);
                }

                const finalMarkers = this._convertWordsToLineMarkers(words);
                
                this.markerManager.setMarkers(finalMarkers);
                this.visualizeSyncedWords(finalMarkers);

                this.ui.showNotification("‚ú® –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", "success", 4000);
                this.liveMode.notify('‚ú® –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
                this.waveformEditor.show();
                */

            }, {
                once: true
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            this.wordAligner.addEventListener('alignment-error', (event) => {
                console.error('App: Alignment error:', event.detail);
                this._showNotification(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${event.detail.message}`, 'error');
            });

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ 'alignment-complete'
            await this.wordAligner.alignWords(lyricsText, audioBlob);

        } catch (error) {
            console.error('App: Word alignment failed', error);
            this.ui.showNotification(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
        } finally {
            this.isSyncing = false;
                syncButton.disabled = false;
            syncButton.innerHTML = originalButtonText;
        }
    }

    /**
     * Handle progress updates from WordAligner
     * @param {Object} payload - Progress data from worker
     */
    _handleWordAlignmentProgress(payload) {
        const syncButton = document.getElementById('align-words-btn');
        if (!syncButton) {return;}

        console.log('App: WordAlignment progress update:', payload);

        // Update button text based on progress with detailed stages
        if (payload.status === 'loading') {
            const progress = payload.progress || 0;
            syncButton.innerHTML = `<i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞ AI –º–æ–¥–µ–ª–∏: ${Math.round(progress)}%`;
        } else if (payload.status === 'ready') {
            syncButton.innerHTML = `<i class="fas fa-cog fa-spin"></i> –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ...`;
        } else if (payload.status === 'processing') {
            syncButton.innerHTML = `<i class="fas fa-brain fa-pulse"></i> AI –∞–Ω–∞–ª–∏–∑ —Ä–µ—á–∏...`;
        } else if (payload.status === 'aligning') {
            syncButton.innerHTML = `<i class="fas fa-sync fa-spin"></i> –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤...`;
        } else if (payload.status === 'finalizing') {
            syncButton.innerHTML = `<i class="fas fa-check-circle fa-spin"></i> –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`;
        } else {
            // Fallback for unknown status
            syncButton.innerHTML = `<i class="fas fa-spinner fa-spin"></i> –û–±—Ä–∞–±–æ—Ç–∫–∞...`;
        }
    }

    /**
     * "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä" –¥–ª—è —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑.
     * –ü—Ä–∏–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
     * @param {string} text - –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç.
     * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
     */
    _universalNormalizer(text) {
        if (!text) {return '';}
        return text
            .toLowerCase()
            .replace(/'|\'/g, '') // –£–¥–∞–ª—è–µ—Ç –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã (e.g., "it's" -> "its")
            .replace(/[.,\/#!$%\^&\*;:{}=\-_`~()?]/g, ' ') // –ó–∞–º–µ–Ω—è–µ—Ç –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
            .replace(/\s+/g, ' ') // –°–∂–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –æ–¥–∏–Ω
            .trim();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç "–ê—Ç–ª–∞—Å –¢–µ–∫—Å—Ç–∞" - –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç—É –≤—Å–µ—Ö —Ñ—Ä–∞–∑ (n-–≥—Ä–∞–º–º) –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—Å–æ–≤.
     * @param {string[]} lyricsLines - –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏.
     * @returns {Map<string, {score: number, lineIndexes: number[], length: number}>} - –ö–∞—Ä—Ç–∞ —Ñ—Ä–∞–∑.
     */
    _buildTextAtlas(lyricsLines) {
        console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ "–ê—Ç–ª–∞—Å–∞ –¢–µ–∫—Å—Ç–∞"...');
        const phrases = new Map();
        const wordFrequencies = new Map();
        let totalWords = 0;

        const normalizedLines = lyricsLines.map(line => 
            this._universalNormalizer(line).split(' ')
        );

        // 1. –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        normalizedLines.forEach(words => {
            words.forEach(word => {
                if (!word) {return;}
                wordFrequencies.set(word, (wordFrequencies.get(word) || 0) + 1);
                totalWords++;
            });
        });

        // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è N-–≥—Ä–∞–º–º –∏ —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∏—Ö
        const minLength = 2;
        const maxLength = 7;
        normalizedLines.forEach((words, lineIndex) => {
            for (let i = 0; i < words.length; i++) {
                let currentPhrase = '';
                for (let j = i; j < words.length && j < i + maxLength; j++) {
                    currentPhrase = (j === i) ? words[j] : `${currentPhrase} ${words[j]}`;
                    const phraseLength = j - i + 1;
                    if (phraseLength < minLength) {continue;}

                    if (!phrases.has(currentPhrase)) {
                        phrases.set(currentPhrase, { occurrences: [], lineIndexes: new Set() });
                    }
                    phrases.get(currentPhrase).occurrences.push({ lineIndex, wordStartIndex: i });
                    phrases.get(currentPhrase).lineIndexes.add(lineIndex);
                }
            }
        });
        
        // 3. –†–∞—Å—á–µ—Ç "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –î–æ–≤–µ—Ä–∏—è" –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã
        const atlas = new Map();
        phrases.forEach((data, phrase) => {
            const phraseWords = phrase.split(' ');
            const length = phraseWords.length;
            const frequency = data.occurrences.length;

            // –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (—á–µ–º —Ä–µ–∂–µ —Å–ª–æ–≤–∞, —Ç–µ–º –≤—ã—à–µ –±–æ–Ω—É—Å)
            let rarityScore = 0;
            phraseWords.forEach(word => {
                rarityScore += 1 / (wordFrequencies.get(word) || 1);
            });
            const uniquenessBonus = rarityScore / length;

            // –§–æ—Ä–º—É–ª–∞ "Trust Score"
            const score = (Math.pow(length, 2) * (1 + uniquenessBonus)) / (1 + Math.pow(frequency - 1, 2));

            atlas.set(phrase, {
                score: score,
                lineIndexes: Array.from(data.lineIndexes),
                length: length,
                frequency: frequency
            });
        });

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é Trust Score –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏
        const sortedAtlas = new Map([...atlas.entries()].sort((a, b) => b[1].score - a[1].score));

        console.log(`üó∫Ô∏è –ê—Ç–ª–∞—Å —Å–æ–∑–¥–∞–Ω: ${sortedAtlas.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑.`)
        // console.log('–¢–æ–ø-10 —Ñ—Ä–∞–∑:', [...sortedAtlas.entries()].slice(0, 10));

        return sortedAtlas;
    }

    /**
     * –ò—â–µ—Ç —Ñ—Ä–∞–∑—ã —Å –≤—ã—Å–æ–∫–∏–º "Trust Score" (–¢–∏—Ç–∞–Ω–æ–≤) –≤ –ø–æ—Ç–æ–∫–µ —Å–ª–æ–≤ –æ—Ç AI.
     * @param {Array} aiWords - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç AI.
     * @param {Map<string, object>} textAtlas - "–ê—Ç–ª–∞—Å –¢–µ–∫—Å—Ç–∞".
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö "–¢–∏—Ç–∞–Ω–æ–≤".
     */
    _huntForTitans(aiWords, textAtlas) {
        console.log('üèπ –û—Ö–æ—Ç–∞ –Ω–∞ –¢–∏—Ç–∞–Ω–æ–≤ –Ω–∞—á–∞–ª–∞—Å—å...');
        const foundTitans = [];
        const usedWordIndexes = new Set();
        const TITAN_THRESHOLD = 10; // –ü–æ—Ä–æ–≥ "Trust Score" –¥–ª—è –¢–∏—Ç–∞–Ω–æ–≤
        const MAX_PHRASE_LENGTH = 7;
        const MIN_PHRASE_LENGTH = 2;

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–Ω–¥–µ–∫—Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        const wordMap = [];
        aiWords.forEach((originalWordObj, originalIndex) => {
            if (!originalWordObj || typeof originalWordObj.word !== 'string') {return;}

            const normalizedSubWords = this._universalNormalizer(originalWordObj.word.replace(/\\n/g, ' ')).split(' ');
            normalizedSubWords.forEach(subWord => {
                if (subWord) {
                    wordMap.push({
                        text: subWord,
                        originalIndex: originalIndex 
                    });
                }
            });
        });
       
        for (let i = 0; i < wordMap.length; i++) {
            if (usedWordIndexes.has(i)) {continue;}

            // –ò—â–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω—É—é —Ñ—Ä–∞–∑—É, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
            for (let len = MAX_PHRASE_LENGTH; len >= MIN_PHRASE_LENGTH; len--) {
                if (i + len > wordMap.length) {continue;}

                const currentPhrase = wordMap.slice(i, i + len).map(w => w.text).join(' ');
                const phraseData = textAtlas.get(currentPhrase);

                if (phraseData && phraseData.score >= TITAN_THRESHOLD) {
                    // üèÜ –¢–ò–¢–ê–ù –ù–ê–ô–î–ï–ù!
                    const originalWordIndex = wordMap[i].originalIndex;
                    const originalWord = aiWords[originalWordIndex];

                    if (!originalWord || typeof originalWord.start !== 'number') {
                         console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∏—Ç–∞–Ω "${currentPhrase}" –∏–∑-–∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.`);
                         continue;
                    }

                    const startTime = originalWord.start;
                    console.log(`üèÜ –¢–ò–¢–ê–ù –Ω–∞–π–¥–µ–Ω: "${currentPhrase}" [Score: ${phraseData.score.toFixed(2)}] ‚Üí –≤ ${startTime.toFixed(2)}s`);

                    foundTitans.push({
                        phrase: currentPhrase,
                        time: startTime,
                        lineIndexes: phraseData.lineIndexes,
                        score: phraseData.score,
                        source: 'titan'
                    });

                    // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–π —Ñ—Ä–∞–∑–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                    for (let k = 0; k < len; k++) {
                        usedWordIndexes.add(i + k);
                    }
                    
                    // –ú—ã –Ω–∞—à–ª–∏ —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –∏ –ª—É—á—à—É—é —Ñ—Ä–∞–∑—É –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–º—É —Å–ª–æ–≤—É
                    break; 
                }
            }
        }
        
        console.log(`üèπ –û—Ö–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ ${foundTitans.length} —Ç–∏—Ç–∞–Ω–æ–≤.`);
        return foundTitans;
    }

    /**
     * –°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è "–¢–∏—Ç–∞–Ω–æ–≤" –∫–∞–∫ –æ—Å–Ω–æ–≤—É –∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É—è –ø—Ä–æ–±–µ–ª—ã.
     * @param {Array} titans - –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö "–¢–∏—Ç–∞–Ω–æ–≤".
     * @param {Array<string>} lyricsLines - –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏.
     * @param {Array} aiWords - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –æ—Ç AI.
     * @returns {Array} –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤.
     */
    _buildFinalMarkers(titans, lyricsLines) {
        console.log('üèóÔ∏è –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤...');
        const finalMarkers = [];
        const anchorMarkers = [];
        const usedLineIndexes = new Set();
    
        // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã —Ç–∏—Ç–∞–Ω–∞.
        const phrasePositions = new Map();
        titans.forEach(titan => {
            if (!phrasePositions.has(titan.phrase)) {
                const positions = [];
                lyricsLines.forEach((line, index) => {
                    if (this._universalNormalizer(line).includes(titan.phrase)) {
                        positions.push(index);
                    }
                });
                phrasePositions.set(titan.phrase, positions);
            }
        });
    
        let lastLineIndex = -1;
    
        // –®–∞–≥ 2: "–£–º–Ω—ã–π" –ø—Ä–æ—Ö–æ–¥ –ø–æ —Ç–∏—Ç–∞–Ω–∞–º –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∫–æ—Ä–µ–π.
        titans.forEach(titan => {
            const possibleLines = phrasePositions.get(titan.phrase);
            if (!possibleLines || possibleLines.length === 0) {
                // –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —Ç–∏—Ç–∞–Ω—ã —Å—Ç—Ä–æ—è—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.
            return;
        }

            // –ò—â–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —è–∫–æ—Ä—è.
            const targetLineIndex = possibleLines.find(p => p > lastLineIndex && !usedLineIndexes.has(p));
    
            if (targetLineIndex !== undefined) {
                // –Ø–∫–æ—Ä—å –Ω–∞–π–¥–µ–Ω!
                console.log(`‚öì –ú–∞—Ä–∫–µ—Ä-—è–∫–æ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Å—Ç—Ä–æ–∫–∞ ${targetLineIndex} –≤ ${titan.time.toFixed(2)}s –¥–ª—è —Ñ—Ä–∞–∑—ã "${titan.phrase}"`);
                const marker = {
                    line: lyricsLines[targetLineIndex],
                    time: titan.time,
                    lineIndex: targetLineIndex,
                    source: 'titan'
                };
                anchorMarkers.push(marker);
                usedLineIndexes.add(targetLineIndex);
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —è–∫–æ—Ä—è, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –∏—Å–∫–∞–ª—Å—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ.
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —è–∫–æ—Ä–µ–π –ø–æ lineIndex, —á—Ç–æ–±—ã lastLineIndex –≤—Å–µ–≥–¥–∞ –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∏–∑ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö.
                anchorMarkers.sort((a, b) => a.lineIndex - b.lineIndex);
                lastLineIndex = anchorMarkers[anchorMarkers.length-1].lineIndex;
            } else {
                console.log(`üü° –¢–∏—Ç–∞–Ω-–ø—Ä–∏–∑—Ä–∞–∫ –æ—Ç–±—Ä–æ—à–µ–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è "${titan.phrase}" –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ ${lastLineIndex}. –í—Ä–µ–º—è: ${titan.time.toFixed(2)}s`);
            }
        });
    
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —è–∫–æ—Ä–µ–π –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–æ–∫–∏.
        anchorMarkers.sort((a, b) => a.lineIndex - b.lineIndex);
    
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${anchorMarkers.length} –æ–ø–æ—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ —Ç–∏—Ç–∞–Ω–æ–≤.`);
    
        if (anchorMarkers.length === 0) {
            console.warn("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–ø–æ—Ä–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞. –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
            return [];
        }
    
        // –®–∞–≥ 3: –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è. –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —è–∫–æ—Ä—è–º–∏.
        let currentAnchorIndex = 0;
        for (let i = 0; i < lyricsLines.length; i++) {
            const nextAnchor = anchorMarkers.find(a => a.lineIndex === i);
    
            if (nextAnchor) {
                // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞-—è–∫–æ—Ä—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫–∞–∫ –µ—Å—Ç—å.
                finalMarkers.push(nextAnchor);
                currentAnchorIndex = anchorMarkers.indexOf(nextAnchor);
            } else {
                // –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å.
                const prevAnchor = anchorMarkers[currentAnchorIndex];
                const nextAnchorAfter = anchorMarkers[currentAnchorIndex + 1];
    
                if (prevAnchor && nextAnchorAfter) {
                    const linesBetween = nextAnchorAfter.lineIndex - prevAnchor.lineIndex;
                    const timeBetween = nextAnchorAfter.time - prevAnchor.time;
                    const linesFromPrev = i - prevAnchor.lineIndex;
    
                    const estimatedTime = prevAnchor.time + (timeBetween / linesBetween) * linesFromPrev;
    
                    console.log(`... –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${i} –≤ ${estimatedTime.toFixed(2)}s`);
                    finalMarkers.push({
                        line: lyricsLines[i],
                        time: estimatedTime,
                        lineIndex: i,
                        source: 'interpolated'
                    });
                } else {
                   // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —è–∫–æ—Ä—è –∏–ª–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ, –∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –≤—ã—á–∏—Å–ª–∏—Ç—å.
                }
            }
        }
    
        console.log(`üèóÔ∏è –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ ${finalMarkers.length} –º–∞—Ä–∫–µ—Ä–æ–≤.`);
        console.log("–ò—Ç–æ–≥–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã:", finalMarkers);
        return finalMarkers;
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –æ—Ç AI –≤ –º–∞—Ä–∫–µ—Ä—ã —Å—Ç—Ä–æ–∫ –¥–ª—è MarkerManager
     * @param {Array} words - –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
     * @returns {Array} –ú–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
     */
    _convertWordsToLineMarkers(words) {
        if (!Array.isArray(words) || words.length === 0) {
            return [];
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        const lyricsLines = this.lyricsDisplay ? this.lyricsDisplay.lyrics : [];
        if (lyricsLines.length === 0) {
            console.warn('No lyrics lines available for conversion');
            return [];
        }

        // üî± –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ "–ê—Ç–ª–∞—Å–∞ –¢–µ–∫—Å—Ç–∞"
        const textAtlas = this._buildTextAtlas(lyricsLines);
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.table([...textAtlas.entries()].slice(0, 20).map(([phrase, data]) => ({
            "–§—Ä–∞–∑–∞": phrase,
            "Trust Score": data.score.toFixed(2),
            "–î–ª–∏–Ω–∞": data.length,
            "–ß–∞—Å—Ç–æ—Ç–∞": data.frequency,
            "–°—Ç—Ä–æ–∫–∏": data.lineIndexes.join(', ')
        })));

        // üî± –≠–¢–ê–ü 2: "–û—Ö–æ—Ç–∞ –Ω–∞ –¢–∏—Ç–∞–Ω–æ–≤"
        const titans = this._huntForTitans(words, textAtlas);
        console.table(titans.map(t => ({
            "–§—Ä–∞–∑–∞ (–¢–∏—Ç–∞–Ω)": t.phrase,
            "–í—Ä–µ–º—è": t.time.toFixed(2),
            "Score": t.score.toFixed(2),
            "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã (—Å—Ç—Ä–æ–∫–∏)": t.lineIndexes.join(', ')
        })));


        // üî± –≠–¢–ê–ü 3: –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        const finalMarkers = this._buildFinalMarkers(titans, lyricsLines);
        
        console.log("–ò—Ç–æ–≥–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã:", finalMarkers);
        return finalMarkers;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤
     * @param {Array} words - –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤
     * @param {Array} lyricsLines - –°—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
     * @returns {Array} –ú–∞—Ä–∫–µ—Ä—ã —Å—Ç—Ä–æ–∫
     */
    _createTimeBasedMarkers(words, lyricsLines) {
        const markers = [];
        const totalDuration = Math.max(...words.map(w => w.end || w.start + 1));
        const timePerLine = totalDuration / lyricsLines.length;

        lyricsLines.forEach((line, index) => {
            const estimatedTime = index * timePerLine;
            
            // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–ª–æ–≤–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            const nearestWord = words.reduce((closest, word) => {
                const wordTime = word.start || 0;
                const closestTime = closest ? closest.start || 0 : Infinity;
                return Math.abs(wordTime - estimatedTime) < Math.abs(closestTime - estimatedTime) ? word : closest;
            }, null);

            if (nearestWord) {
                markers.push({
                    id: `time-marker-${index}`,
                    lineIndex: index,
                    time: nearestWord.start || estimatedTime,
                    text: line,
                    blockType: 'verse',
                    color: '#FF9800', // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
                    confidence: 0.5,
                    source: 'time-based'
                });
            }
        });

        return markers.sort((a, b) => a.time - b.time);
    }

    /**
     * –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
     * @param {Array} markers - –ú–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
     */
    _visualizeSyncedWords(markers) {
        console.log('üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤:', markers);
        
        if (!markers || !Array.isArray(markers)) {
            console.warn('–ù–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏');
            return;
        }

        const lyricsDisplay = document.getElementById('lyrics-display');
        if (!lyricsDisplay) {return;}

        const lyricLines = lyricsDisplay.querySelectorAll('.lyric-line');
        
        markers.forEach(marker => {
            if (marker.lineIndex >= 0 && marker.lineIndex < lyricLines.length) {
                const line = lyricLines[marker.lineIndex];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                if (marker.source === 'ai') {
                    line.classList.add('ai-synced');
                } else if (marker.source === 'time-based') {
                    line.classList.add('time-based');
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                if (marker.confidence) {
                    const qualityIndicator = document.createElement('div');
                    qualityIndicator.className = 'sync-quality-indicator';
                    
                    if (marker.confidence > 0.8) {
                        qualityIndicator.classList.add('sync-quality-high');
                    } else if (marker.confidence > 0.5) {
                        qualityIndicator.classList.add('sync-quality-medium');
            } else {
                        qualityIndicator.classList.add('sync-quality-low');
                    }
                    
                    line.style.position = 'relative';
                    line.appendChild(qualityIndicator);
                }
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–∞—Ö, –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∏—Ö
                if (marker.words && Array.isArray(marker.words)) {
                    this._highlightWordsInLine(line, marker.words);
                }
            }
        });
        
        console.log('‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    /**
     * –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ
     * @param {HTMLElement} lineElement - –≠–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
     * @param {Array} words - –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
     */
    _highlightWordsInLine(lineElement, words) {
        if (!words || words.length === 0) {return;}
        
        const originalText = lineElement.textContent;
        let highlightedHTML = originalText;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        const sortedWords = words.sort((a, b) => a.start - b.start);
        
        // –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        sortedWords.forEach((word, index) => {
            if (word.text && word.text.trim()) {
                const wordRegex = new RegExp(`\\b${word.text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi');
                highlightedHTML = highlightedHTML.replace(wordRegex, (match) => {
                    return `<span class="word-sync-highlight" data-start="${word.start}" data-end="${word.end}" data-confidence="${word.confidence || 0.5}">${match}</span>`;
                });
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (highlightedHTML !== originalText) {
            lineElement.innerHTML = highlightedHTML;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
            const highlightedWords = lineElement.querySelectorAll('.word-sync-highlight');
            highlightedWords.forEach(wordElement => {
                wordElement.addEventListener('click', (e) => {
                    const startTime = parseFloat(e.target.dataset.start);
                    if (!isNaN(startTime) && this.audioEngine) {
                        this.audioEngine.setCurrentTime(startTime);
                        console.log(`üéØ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Ä–µ–º–µ–Ω–∏: ${startTime}s`);
                    }
                });
                
                wordElement.addEventListener('mouseenter', (e) => {
                    const confidence = parseFloat(e.target.dataset.confidence);
                    const startTime = parseFloat(e.target.dataset.start);
                    const endTime = parseFloat(e.target.dataset.end);
                    
                    e.target.title = `–í—Ä–µ–º—è: ${startTime.toFixed(2)}s - ${endTime.toFixed(2)}s\n–¢–æ—á–Ω–æ—Å—Ç—å: ${(confidence * 100).toFixed(0)}%`;
                });
            });
        }
    }

    /**
     * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è transport toggle —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    _initTransportToggle() {
        const toggleBtn = document.getElementById('transport-toggle');
        const transportControls = document.getElementById('transport-controls');

        if (!toggleBtn || !transportControls) {
            console.error('Transport toggle button or controls panel not found.');
            return;
        }

        // üîß –ó–ê–©–ò–¢–ê: –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        if (this._transportToggleHandler) {
            toggleBtn.removeEventListener('click', this._transportToggleHandler);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è cleanup
        this._transportToggleHandler = () => {
            // –†–∞–∑–º–æ—Ä–æ–∑–∏–ª–∏ –≤ –∫–∞—Ä–∞–æ–∫–µ: –ø–∞–Ω–µ–ª—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤—Ä—É—á–Ω—É—é
            transportControls.classList.toggle('is-open');
            console.log(`üéõÔ∏è Transport controls: ${transportControls.classList.contains('is-open') ? '–æ—Ç–∫—Ä—ã—Ç—ã' : '–∑–∞–∫—Ä—ã—Ç—ã'}`);
        };

        toggleBtn.addEventListener('click', this._transportToggleHandler);
        console.log('üéõÔ∏è Transport toggle –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * üîß –ù–û–í–´–ô: Cleanup –º–µ—Ç–æ–¥ –¥–ª—è transport controls
     */
    _cleanupTransportToggle() {
        const toggleBtn = document.getElementById('transport-toggle');
        if (toggleBtn && this._transportToggleHandler) {
            toggleBtn.removeEventListener('click', this._transportToggleHandler);
            this._transportToggleHandler = null;
            console.log('üßπ Transport toggle –æ—á–∏—â–µ–Ω');
        }
    }

    /**
     * –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è BPM
     */
    
    /**
     * –£–º–µ–Ω—å—à–µ–Ω–∏–µ BPM –Ω–∞ 5%
     * @private
     */
    _decreaseBPM() {
        if (this.currentBPM > 50) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç 50%
            this.currentBPM -= 5;
            this._applyBPMChange();
            this._updateBPMDisplay();
        }
    }
    
    /**
     * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ BPM –Ω–∞ 5%
     * @private
     */
    _increaseBPM() {
        if (this.currentBPM < 200) { // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç 200%
            this.currentBPM += 5;
            this._applyBPMChange();
            this._updateBPMDisplay();
        }
    }
    
    /**
     * –°–±—Ä–æ—Å BPM –∫ 100%
     * @private
     */
    _resetBPM() {
        this.currentBPM = 100;
        this._applyBPMChange();
        this._updateBPMDisplay();
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è BPM –∫ –∞—É–¥–∏–æ –¥–≤–∏–∂–∫—É
     * @private
     */
    _applyBPMChange() {
        if (this.audioEngine && this.audioEngine.setPlaybackRate) {
            const rate = this.currentBPM / 100;
            this.audioEngine.setPlaybackRate(rate);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è BPM
     * @private
     */
    _updateBPMDisplay() {
        if (this.bpmValueBtn) {
            this.bpmValueBtn.textContent = `${this.currentBPM}%`;
        }
    }
}

let initAttempts = 0;
const MAX_INIT_ATTEMPTS = 50; // –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è

// === –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
function diagnoseComponents() {
    console.log('üî¨ === –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===');
    
    const components = {
        audioEngine: window.audioEngine,
        lyricsDisplay: window.lyricsDisplay,
        trackCatalog: window.trackCatalog,
        StateManager: window.StateManager,
        ViewManager: window.ViewManager
    };
    
    for (const [name, component] of Object.entries(components)) {
        console.log(`üîç ${name}:`, {
            exists: !!component,
            type: typeof component,
            constructor: component?.constructor?.name,
            isClass: component?.prototype ? '–î–∞' : '–ù–µ—Ç',
            properties: component ? Object.getOwnPropertyNames(component) : 'N/A',
            // –î–û–ë–ê–í–õ–Ø–ï–ú –¢–û–ß–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï
            exactValue: component,
            // –ü–†–û–í–ï–†–Ø–ï–ú –ë–£–õ–ï–í–û –ó–ù–ê–ß–ï–ù–ò–ï
            booleanCheck: !component ? 'FALSY!' : 'TRUTHY'
        });
    }
    
    // –¢–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–Ø –ò–ó IF-STATEMENT
    console.log('üéØ –¢–û–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–Ø:');
    console.log('!window.audioEngine:', !window.audioEngine);
    console.log('!window.lyricsDisplay:', !window.lyricsDisplay);
    console.log('!window.trackCatalog:', !window.trackCatalog);
    console.log('!window.StateManager:', !window.StateManager);
    console.log('!window.ViewManager:', !window.ViewManager);
    
    const condition = !window.audioEngine || !window.lyricsDisplay || !window.trackCatalog || !window.StateManager || !window.ViewManager;
    console.log('üî• –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–õ–ù–û–ì–û –£–°–õ–û–í–ò–Ø:', condition);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
    console.log('üåê –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ window —Å–æ–¥–µ—Ä–∂–∏—Ç:');
    const relevantKeys = Object.keys(window).filter(key => 
        key.includes('Manager') || key.includes('Engine') || key.includes('Display') || key.includes('Catalog')
    );
    console.log('–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–∏:', relevantKeys);
    
    console.log('üî¨ === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
}

function initializeApp() {
    initAttempts++;
    
    if (initAttempts > MAX_INIT_ATTEMPTS) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ', MAX_INIT_ATTEMPTS, '–ø–æ–ø—ã—Ç–æ–∫');
        console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤');
        
        // –î–û–ë–ê–í–õ–Ø–ï–ú –§–ò–ù–ê–õ–¨–ù–£–Æ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ –ü–ï–†–ï–î –°–î–ê–ß–ï–ô
        console.error('üö® –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–î –ó–ê–í–ï–†–®–ï–ù–ò–ï–ú:');
        diagnoseComponents();
        return;
    }
    
    // Check if all required components are loaded
    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
    if (!window.audioEngine || !window.lyricsDisplay || !window.trackCatalog || !window.StateManager || !window.ViewManager) {
        // –î–û–ë–ê–í–õ–Ø–ï–ú –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ –ù–ê –ö–ê–ñ–î–û–ô –ü–û–ü–´–¢–ö–ï
        if (initAttempts % 10 === 1) { // –ö–∞–∂–¥—ã–µ 10 –ø–æ–ø—ã—Ç–æ–∫
            diagnoseComponents();
        }
        
        console.warn('Components not ready yet, retrying in 100ms (attempt', initAttempts, '/', MAX_INIT_ATTEMPTS, ')');
        console.warn('Missing components:', {
            audioEngine: !!window.audioEngine,
            lyricsDisplay: !!window.lyricsDisplay, 
            trackCatalog: !!window.trackCatalog,
            StateManager: !!window.StateManager,
            ViewManager: !!window.ViewManager
        });
        setTimeout(initializeApp, 100);
        return;
    }
    
    // Additional check for optional components (markerManager —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        if (!window.markerManager) {
        console.warn('MarkerManager not ready, retrying in 300ms (attempt', initAttempts, '/', MAX_INIT_ATTEMPTS, ')');
        setTimeout(initializeApp, 300);
        return;
        }
        
    console.log('All components ready, initializing app...');
    
    try {
        // Initialize the main app
        window.app = new App();
        console.log('App initialized successfully');
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π –ø—Ä–æ–≥—Ä–µ–≤ Live (–æ–¥–∏–Ω —Ä–∞–∑)
        try { window.app._bootstrapLiveWarmup?.(); } catch(_) {}
    } catch (error) {
        console.error('Error initializing app:', error);
    }
}

// Start initialization process after DOM is ready
window.addEventListener('DOMContentLoaded', () => {
    console.log('DOM content loaded, waiting for components');
    // Give components a moment to initialize
    setTimeout(initializeApp, 300);
});

/**
 * Show notification
 * @param {string} message - Notification message
 * @param {string} type - Notification type (info, success, error, warning)
 */
function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // Add close button
    const closeBtn = document.createElement('span');
    closeBtn.className = 'notification-close';
    closeBtn.innerHTML = '&times;';
    closeBtn.addEventListener('click', () => {
        notification.classList.add('notification-hidden');
        setTimeout(() => {
            notification.remove();
        }, 300);
    });
    
    notification.appendChild(closeBtn);
    
    // Add to document
    let notificationsContainer = document.querySelector('.notifications-container');
    if (!notificationsContainer) {
        notificationsContainer = document.createElement('div');
        notificationsContainer.className = 'notifications-container';
        document.body.appendChild(notificationsContainer);
    }
    notificationsContainer.appendChild(notification);
    
    // Auto hide after 5 seconds
    setTimeout(() => {
        notification.classList.add('notification-hidden');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 5000);
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è MaskSystem
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏: toggleMaskLogging(true) –∏–ª–∏ toggleMaskLogging(false)
 */
window.toggleMaskLogging = function(enabled) {
    if (window.app && window.app.maskSystem) {
        window.app.maskSystem.setConsoleLogging(enabled);
        console.log(`üé≠ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ MaskSystem ${enabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
    } else {
        console.warn('MaskSystem –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
window.app = null; 
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
window.addAudioToTrack = function() {
    if (window.trackCatalog) {
        window.trackCatalog.quickAddAudioToLastTrack();
    } else {
        console.error('TrackCatalog –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

window.openCatalog = function() {
    if (window.catalogV2 && typeof window.catalogV2.open === 'function') {
        try { window.trackCatalog?.closeCatalog?.(); } catch(_) {}
        window.catalogV2.open();
    } else if (window.trackCatalog && typeof window.trackCatalog.openCatalog === 'function') {
        window.trackCatalog.openCatalog();
    } else {
        console.error('–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
}; 
