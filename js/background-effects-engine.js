/**
 * üéØ Background Effects Engine v2.0
 * –ú–æ–¥—É–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
 */

class BackgroundEffectsEngine {
    constructor() {
        this.selfieSegmentation = null;
        this.isInitialized = false;
        this.isProcessing = false;
        this.currentEffect = 'none';
        this.frameCount = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.config = {
            modelSelection: 1,
            selfieMode: true,
            enableMirroring: true // –ö–ª—é—á–µ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        };
        
        console.log('üéØ Background Effects Engine v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe Selfie Segmentation
     */
    async initialize() {
        try {
            if (this.isInitialized) {
                console.log('‚ö†Ô∏è Background Effects Engine —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return true;
            }
            
            console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Background Effects Engine...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MediaPipe
            if (typeof SelfieSegmentation === 'undefined') {
                throw new Error('MediaPipe SelfieSegmentation –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Selfie Segmentation
            this.selfieSegmentation = new SelfieSegmentation({
                locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
            await this.selfieSegmentation.setOptions(this.config);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            this.selfieSegmentation.onResults((results) => {
                this.processResults(results);
            });
            
            this.isInitialized = true;
            console.log('‚úÖ Background Effects Engine –≥–æ—Ç–æ–≤');
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Background Effects Engine:', error);
            return false;
        }
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ canvas –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    setTargetCanvas(canvas) {
        this.targetCanvas = canvas;
        this.targetCtx = canvas.getContext('2d', { willReadFrequently: true });
        console.log('üé® Canvas —Ü–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', canvas.width + 'x' + canvas.height);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ canvas –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        this.tempCanvas = document.createElement('canvas');
        this.tempCtx = this.tempCanvas.getContext('2d', { willReadFrequently: true });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        this.backgroundEffects = {
            blur: { enabled: false, intensity: 5 },
            particles: { enabled: false, count: 50 },
            gradient: { enabled: false, colors: ['#1a1a1a', '#333333'] },
            neon: { enabled: false, color: '#00ffff' }
        };
        
        console.log('üé® BackgroundEffectsEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ
     */
    setVideoSource(video) {
        this.videoElement = video;
        console.log('üìπ –í–∏–¥–µ–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç MediaPipe
     */
    processResults(results) {
        if (!this.targetCanvas || !this.targetCtx || !this.videoElement) {
            return;
        }
        
        try {
            // –û—á–∏—â–∞–µ–º canvas
            this.targetCtx.clearRect(0, 0, this.targetCanvas.width, this.targetCanvas.height);
            
            if (results.segmentationMask && this.currentEffect !== 'none') {
                const mask = results.segmentationMask;
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                const maskData = this.extractMaskData(mask);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
                this.applyEffect(this.currentEffect, maskData);
            }
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            this.frameCount++;
            if (this.frameCount % 60 === 0) {
                console.log(`üéØ Background Effects: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${this.frameCount} –∫–∞–¥—Ä–æ–≤ (—ç—Ñ—Ñ–µ–∫—Ç: ${this.currentEffect})`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Background Effects:', error);
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Å–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    extractMaskData(mask) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å–∫–∏
        const tempCanvas = document.createElement('canvas');
        tempCanvas.width = this.targetCanvas.width;
        tempCanvas.height = this.targetCanvas.height;
        const tempCtx = tempCanvas.getContext('2d', { willReadFrequently: true });
        
        if (this.config.enableMirroring) {
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–µ—Ä–∫–∞–ª–∏—Ä—É–µ–º –º–∞—Å–∫—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è CSS-–∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥–µ–æ
            tempCtx.save();
            tempCtx.scale(-1, 1);
            tempCtx.drawImage(mask, -tempCanvas.width, 0, tempCanvas.width, tempCanvas.height);
            tempCtx.restore();
        } else {
            // –ë–µ–∑ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –Ω–µ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–æ)
            tempCtx.drawImage(mask, 0, 0, tempCanvas.width, tempCanvas.height);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
        const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
        return imageData.data;
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
     */
    applyEffect(effect, maskData) {
        switch (effect) {
            case 'blur':
                this.applyBlurEffect(maskData);
                break;
            case 'green':
                this.applyColorEffect(maskData, '#00FF00');
                break;
            case 'blue':
                this.applyColorEffect(maskData, '#0000FF');
                break;
            case 'gradient':
                this.applyGradientEffect(maskData);
                break;
            case 'matrix':
                this.applyMatrixEffect(maskData);
                break;
            case 'neon':
                this.applyNeonEffect(maskData);
                break;
            default:
                console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: ${effect}`);
        }
    }
    
    /**
     * –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–º—ã—Ç–æ–≥–æ —Ñ–æ–Ω–∞
     */
    applyBlurEffect(maskData) {
        const ctx = this.targetCtx;
        const canvas = this.targetCanvas;
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω
        ctx.save();
        ctx.filter = 'blur(15px)';
        ctx.drawImage(this.videoElement, 0, 0, canvas.width, canvas.height);
        ctx.filter = 'none';
        ctx.restore();
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
        this.overlayPerson(maskData);
    }
    
    /**
     * –≠—Ñ—Ñ–µ–∫—Ç —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
     */
    applyColorEffect(maskData, color) {
        const ctx = this.targetCtx;
        const canvas = this.targetCanvas;
        
        // –ó–∞–ª–∏–≤–∞–µ–º —Ñ–æ–Ω —Ü–≤–µ—Ç–æ–º
        ctx.save();
        ctx.fillStyle = color;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.restore();
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
        this.overlayPerson(maskData);
    }
    
    /**
     * –≠—Ñ—Ñ–µ–∫—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
     */
    applyGradientEffect(maskData) {
        const ctx = this.targetCtx;
        const canvas = this.targetCanvas;
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
        gradient.addColorStop(0, '#FF0080');
        gradient.addColorStop(0.5, '#7928CA');
        gradient.addColorStop(1, '#FF8A80');
        
        ctx.save();
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.restore();
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
        this.overlayPerson(maskData);
    }
    
    /**
     * –≠—Ñ—Ñ–µ–∫—Ç Matrix
     */
    applyMatrixEffect(maskData) {
        const ctx = this.targetCtx;
        const canvas = this.targetCanvas;
        
        // –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω
        ctx.save();
        ctx.fillStyle = '#000000';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // –ó–µ–ª–µ–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        ctx.fillStyle = '#00FF41';
        ctx.font = '14px monospace';
        const chars = '01„Ç¢„Ç§„Ç¶„Ç®„Ç™„Ç´„Ç≠„ÇØ„Ç±„Ç≥„Çµ„Ç∑„Çπ„Çª„ÇΩ„Çø„ÉÅ„ÉÑ„ÉÜ„Éà„Éä„Éã„Éå„Éç„Éé';
        for (let i = 0; i < 80; i++) {
            const x = Math.random() * canvas.width;
            const y = Math.random() * canvas.height;
            const char = chars[Math.floor(Math.random() * chars.length)];
            ctx.fillText(char, x, y);
        }
        ctx.restore();
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
        this.overlayPerson(maskData);
    }
    
    /**
     * –ù–µ–æ–Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
     */
    applyNeonEffect(maskData) {
        const ctx = this.targetCtx;
        const canvas = this.targetCanvas;
        
        // –†–∞–¥–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        const gradient = ctx.createRadialGradient(
            canvas.width / 2, canvas.height / 2, 0,
            canvas.width / 2, canvas.height / 2, Math.max(canvas.width, canvas.height)
        );
        gradient.addColorStop(0, '#FF00FF');
        gradient.addColorStop(0.5, '#00FFFF');
        gradient.addColorStop(1, '#000033');
        
        ctx.save();
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.restore();
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —á–µ–ª–æ–≤–µ–∫–∞
        this.overlayPerson(maskData);
    }
    
    /**
     * –ù–∞–ª–æ–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Ñ–æ–Ω
     */
    overlayPerson(maskData) {
        const canvas = this.targetCanvas;
        const ctx = this.targetCtx;
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞
        const tempCanvas = document.createElement('canvas');
        tempCanvas.width = canvas.width;
        tempCanvas.height = canvas.height;
        const tempCtx = tempCanvas.getContext('2d', { willReadFrequently: true });
        
        // –†–∏—Å—É–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        tempCtx.drawImage(this.videoElement, 0, 0, canvas.width, canvas.height);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É
        const imageData = tempCtx.getImageData(0, 0, canvas.width, canvas.height);
        for (let i = 0; i < maskData.length; i += 4) {
            const alpha = maskData[i] > 128 ? imageData.data[i + 3] : 0;
            imageData.data[i + 3] = alpha;
        }
        
        tempCtx.putImageData(imageData, 0, 0);
        
        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π canvas
        ctx.drawImage(tempCanvas, 0, 0);
    }
    
    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
     */
    setEffect(effect) {
        this.currentEffect = effect;
        console.log(`üé® –≠—Ñ—Ñ–µ–∫—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${effect}`);
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤
     */
    async startProcessing() {
        if (!this.isInitialized) {
            console.error('‚ùå Engine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }
        
        if (!this.videoElement) {
            console.error('‚ùå –í–∏–¥–µ–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return false;
        }
        
        this.isProcessing = true;
        this.processFrame();
        console.log('‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞');
        return true;
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤
     */
    stopProcessing() {
        this.isProcessing = false;
        console.log('‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
     */
    async processFrame() {
        if (!this.isProcessing || !this.selfieSegmentation || !this.videoElement) {
            return;
        }
        
        try {
            await this.selfieSegmentation.send({ image: this.videoElement });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞:', error);
        }
        
        if (this.isProcessing) {
            requestAnimationFrame(() => this.processFrame());
        }
    }
    
    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    setMirroring(enabled) {
        this.config.enableMirroring = enabled;
        console.log(`ü™û –ó–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: ${enabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getStatus() {
        return {
            initialized: this.isInitialized,
            processing: this.isProcessing,
            currentEffect: this.currentEffect,
            frameCount: this.frameCount,
            mirroring: this.config.enableMirroring
        };
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        this.stopProcessing();
        this.selfieSegmentation = null;
        this.isInitialized = false;
        console.log('üóëÔ∏è Background Effects Engine –æ—á–∏—â–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BackgroundEffectsEngine;
} else if (typeof window !== 'undefined') {
    window.BackgroundEffectsEngine = BackgroundEffectsEngine;
} 