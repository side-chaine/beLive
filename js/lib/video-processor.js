/**
 * VideoProcessor - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ª–∏—Ü–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –ª–∏—Ü–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */
class VideoProcessor {
    constructor() {
        this.canvas = null;
        this.ctx = null;
        this.video = null;
        this.faceDetector = null;
        this.isProcessing = false;
        this.animationId = null;
        this.overlayCanvas = null;
        this.overlayCtx = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.showFacePoints = true;
        this.showBoundingBox = true;
        this.facePointColor = '#00ff00';
        this.boundingBoxColor = '#ff0000';
        this.pointSize = 2;
        
        console.log('üé• VideoProcessor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
     */
    initialize(video, canvas) {
        this.video = video;
        this.canvas = canvas;
        
        if (this.canvas) {
            this.ctx = this.canvas.getContext('2d');
            this.canvas.width = 640;
            this.canvas.height = 480;
            console.log('VideoProcessor: Canvas dimensions set to 640x480');
        }
        
        // –°–æ–∑–¥–∞–µ–º overlay canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–µ–∫ –ª–∏—Ü–∞
        this.createOverlayCanvas();
        
        return this;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ overlay canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–µ–∫ –ª–∏—Ü–∞
     */
    createOverlayCanvas() {
        this.overlayCanvas = document.createElement('canvas');
        this.overlayCanvas.width = 640;
        this.overlayCanvas.height = 480;
        this.overlayCanvas.style.position = 'absolute';
        this.overlayCanvas.style.top = '0';
        this.overlayCanvas.style.left = '0';
        this.overlayCanvas.style.pointerEvents = 'none';
        this.overlayCanvas.style.zIndex = '10';
        this.overlayCtx = this.overlayCanvas.getContext('2d');
        
        // –î–æ–±–∞–≤–ª—è–µ–º overlay –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É canvas
        if (this.canvas && this.canvas.parentNode) {
            this.canvas.parentNode.style.position = 'relative';
            this.canvas.parentNode.appendChild(this.overlayCanvas);
        }
        
        console.log('üé• VideoProcessor: Overlay canvas —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–µ–∫ –ª–∏—Ü–∞');
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ª–∏—Ü–∞
     */
    setFaceDetector(detector) {
        this.faceDetector = detector;
        console.log('VideoProcessor: Face detector set');
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
     */
    startProcessing() {
        if (this.isProcessing) {return;}
        
        this.isProcessing = true;
        console.log('üé• VideoProcessor: –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ');
        this.processFrame();
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
     */
    stopProcessing() {
        this.isProcessing = false;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
        
        // –û—á–∏—â–∞–µ–º overlay
        if (this.overlayCtx) {
            this.overlayCtx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
        }
        
        console.log('üé• VideoProcessor: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞
     */
    async processFrame() {
        if (!this.isProcessing || !this.video || !this.ctx) {
            return;
        }
        
        try {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ canvas
            this.ctx.drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);
            
            // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—á–µ–∫
            if (this.faceDetector) {
                await this.detectAndDrawFace();
            }
            
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞:', error);
        }
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
        if (this.isProcessing) {
            this.animationId = requestAnimationFrame(() => this.processFrame());
        }
    }
    
    /**
     * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—á–µ–∫
     */
    async detectAndDrawFace() {
        try {
            const faces = await this.faceDetector.detectFaces(this.video, true);
            
            // –û—á–∏—â–∞–µ–º overlay
            this.overlayCtx.clearRect(0, 0, this.overlayCanvas.width, this.overlayCanvas.height);
            
            if (faces && faces.length > 0) {
                const face = faces[0];
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º bounding box
                if (this.showBoundingBox && face.boundingBox) {
                    this.drawBoundingBox(face.boundingBox);
                }
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–∫–∏ –ª–∏—Ü–∞
                if (this.showFacePoints && face.landmarks) {
                    this.drawFacePoints(face.landmarks);
                    console.log(`üé≠ VideoProcessor: –û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ ${face.landmarks.length} —Ç–æ—á–µ–∫ –ª–∏—Ü–∞`);
                }
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ (–≥–ª–∞–∑–∞, –Ω–æ—Å, —Ä–æ—Ç)
                if (face.annotations) {
                    this.drawKeyPoints(face.annotations);
                }
            }
            
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Ü–∞:', error);
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ª–∏—Ü–∞
     */
    drawFacePoints(landmarks) {
        if (!landmarks || !Array.isArray(landmarks)) {return;}
        
        this.overlayCtx.fillStyle = this.facePointColor;
        
        landmarks.forEach(point => {
            if (Array.isArray(point) && point.length >= 2) {
                this.overlayCtx.beginPath();
                this.overlayCtx.arc(point[0], point[1], this.pointSize, 0, 2 * Math.PI);
                this.overlayCtx.fill();
            }
        });
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ bounding box
     */
    drawBoundingBox(boundingBox) {
        this.overlayCtx.strokeStyle = this.boundingBoxColor;
        this.overlayCtx.lineWidth = 2;
        this.overlayCtx.strokeRect(
            boundingBox.x, 
            boundingBox.y, 
            boundingBox.width, 
            boundingBox.height
        );
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ (–≥–ª–∞–∑–∞, –Ω–æ—Å, —Ä–æ—Ç)
     */
    drawKeyPoints(annotations) {
        // –ì–ª–∞–∑–∞ - —Å–∏–Ω–∏–µ —Ç–æ—á–∫–∏
        this.overlayCtx.fillStyle = '#0066ff';
        if (annotations.leftEye) {
            annotations.leftEye.forEach(point => {
                this.overlayCtx.beginPath();
                this.overlayCtx.arc(point[0], point[1], 4, 0, 2 * Math.PI);
                this.overlayCtx.fill();
            });
        }
        
        if (annotations.rightEye) {
            annotations.rightEye.forEach(point => {
                this.overlayCtx.beginPath();
                this.overlayCtx.arc(point[0], point[1], 4, 0, 2 * Math.PI);
                this.overlayCtx.fill();
            });
        }
        
        // –ù–æ—Å - –∂–µ–ª—Ç—ã–µ —Ç–æ—á–∫–∏
        this.overlayCtx.fillStyle = '#ffff00';
        if (annotations.noseTip) {
            annotations.noseTip.forEach(point => {
                this.overlayCtx.beginPath();
                this.overlayCtx.arc(point[0], point[1], 3, 0, 2 * Math.PI);
                this.overlayCtx.fill();
            });
        }
        
        // –†–æ—Ç - —Ä–æ–∑–æ–≤—ã–µ —Ç–æ—á–∫–∏
        this.overlayCtx.fillStyle = '#ff69b4';
        if (annotations.lipsUpperOuter) {
            annotations.lipsUpperOuter.forEach(point => {
                this.overlayCtx.beginPath();
                this.overlayCtx.arc(point[0], point[1], 3, 0, 2 * Math.PI);
                this.overlayCtx.fill();
            });
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ –≤–∏–¥–µ–æ
     */
    applyFilter(filterName, value = 1) {
        if (!this.canvas) {return;}
        
        const filters = {
            blur: `blur(${value}px)`,
            brightness: `brightness(${value})`,
            contrast: `contrast(${value})`,
            grayscale: `grayscale(${value})`,
            sepia: `sepia(${value})`,
            saturate: `saturate(${value})`,
            invert: `invert(${value})`,
            'hue-rotate': `hue-rotate(${value}deg)`
        };
        
        if (filters[filterName]) {
            this.canvas.style.filter = filters[filterName];
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    clearFilters() {
        if (this.canvas) {
            this.canvas.style.filter = 'none';
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    updateSettings(settings) {
        if (settings.showFacePoints !== undefined) {
            this.showFacePoints = settings.showFacePoints;
        }
        if (settings.showBoundingBox !== undefined) {
            this.showBoundingBox = settings.showBoundingBox;
        }
        if (settings.facePointColor) {
            this.facePointColor = settings.facePointColor;
        }
        if (settings.boundingBoxColor) {
            this.boundingBoxColor = settings.boundingBoxColor;
        }
        if (settings.pointSize) {
            this.pointSize = settings.pointSize;
        }
        
        console.log('üé• VideoProcessor: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        this.stopProcessing();
        
        if (this.overlayCanvas && this.overlayCanvas.parentNode) {
            this.overlayCanvas.parentNode.removeChild(this.overlayCanvas);
        }
        
        this.canvas = null;
        this.ctx = null;
        this.video = null;
        this.overlayCanvas = null;
        this.overlayCtx = null;
        
        console.log('üé• VideoProcessor: –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.VideoProcessor = VideoProcessor; 

console.log('‚úÖ VideoProcessor: –ó–∞–≥—Ä—É–∂–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–∏—Ü–∞'); 