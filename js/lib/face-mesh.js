/**
 * FaceMeshDetector - –†–µ–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–∏—Ü–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –∑—Ä–µ–Ω–∏–µ–º
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –∫–∞–¥—Ä—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç—É—Ä—ã –ª–∏—Ü–∞
 */
class FaceMeshDetector {
    constructor() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FaceMeshDetector...');
        
        this.isInitialized = false;
        this.isLoading = false;
        this.model = null;
        this.lastDetectedFaces = [];
        this.lastProcessingTime = 0;
        this.processingTimeHistory = [];
        this.refineLandmarks = true;
        
        // Canvas –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        this.analysisCanvas = document.createElement('canvas');
        this.analysisCtx = this.analysisCanvas.getContext('2d');
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü–∞
        this.skinThreshold = 0.6;
        this.minFaceSize = 50;
        this.maxFaceSize = 400;
        this.confidenceThreshold = 0.5;
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        this.stabilizationThreshold = 25; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
        this.lastValidFace = null;
        this.faceHistory = [];
        this.maxHistoryLength = 3; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        // –§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è (–ø–æ –ø—Ä–∏–º–µ—Ä—É OpenCV)
        this.kalmanFilter = {
            state: null, // [x, y, vx, vy]
            covariance: null,
            processNoise: 0.01,
            measurementNoise: 0.1,
            initialized: false
        };
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.frameSkip = 0;
        this.processEveryNthFrame = 2; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π 2-–π –∫–∞–¥—Ä –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        this.optimizedRegionSize = 0.7; // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å
        
        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        this.skinColorCache = new Map();
        this.regionCache = [];
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.faceDetectionParams = {
            minFaceSize: 50,
            maxFaceSize: 300,
            confidenceThreshold: 0.7,
            scaleFactor: 1.1,
            minNeighbors: 3
        };
        
        console.log('FaceMeshDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏');
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
     * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async initialize() {
        if (this.isInitialized) {
            return true;
        }
        
        if (this.isLoading) {
            return false;
        }
        
        this.isLoading = true;
        
        try {
            console.log('üé≠ FaceMeshDetector: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...');
            
            // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            this.analysisCanvas = document.createElement('canvas');
            this.analysisCanvas.width = 640;
            this.analysisCanvas.height = 480;
            this.analysisCtx = this.analysisCanvas.getContext('2d', { 
                willReadFrequently: true  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∞—Å—Ç–æ–≥–æ —á—Ç–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π
            });
            
            // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            this.faceHistory = [];
            this.maxHistoryLength = 5;
            this.stabilizationThreshold = 30; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            this.isInitialized = true;
            this.isLoading = false;
            console.log('‚úÖ FaceMeshDetector: –†–µ–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤ —Å —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–µ–π');
            
            return true;
        } catch (error) {
            console.error('‚ùå FaceMeshDetector: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.isInitialized = false;
            this.isLoading = false;
            return false;
        }
    }
    
    /**
     * –†–µ–∞–ª—å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∏—Ü —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–∏–∫—Å–µ–ª–µ–π
     * @param {HTMLImageElement|HTMLVideoElement|HTMLCanvasElement} input - –í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ
     * @param {boolean} [withLandmarks=true] - –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª–∏ —Ç–æ—á–∫–∏ –ª–∏—Ü–∞
     * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∏—Ü —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
     */
    async detectFaces(input, withLandmarks = true) {
        if (!this.isInitialized) {
            const initialized = await this.initialize();
            if (!initialized) {
                return [];
            }
        }
        
        if (!input || input.readyState === 0) {
            return [];
        }
        
        try {
            const startTime = performance.now();
            
            // –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–¥—Ä –Ω–∞ analysis canvas
            this.analysisCtx.drawImage(input, 0, 0, this.analysisCanvas.width, this.analysisCanvas.height);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
            const imageData = this.analysisCtx.getImageData(0, 0, this.analysisCanvas.width, this.analysisCanvas.height);
            
            // –ò—â–µ–º –ª–∏—Ü–æ —Å –ø–æ–º–æ—â—å—é –∞–Ω–∞–ª–∏–∑–∞ –ø–∏–∫—Å–µ–ª–µ–π
            const face = this.detectFaceInImageData(imageData);
            
            this.lastProcessingTime = performance.now() - startTime;
            this.lastDetectedFaces = face ? [face] : [];
            
            if (!withLandmarks || !face) {
                return this.lastDetectedFaces.map(f => ({
                    boundingBox: f.boundingBox,
                    probability: f.probability
                }));
            }
            
            return this.lastDetectedFaces;
        } catch (error) {
            console.error('‚ùå FaceMeshDetector: –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            return [];
        }
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ü–∞
     * @param {ImageData} imageData - –î–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
     * @returns {Object|null} - –î–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞ –∏–ª–∏ null
     * @private
     */
    detectFaceInImageData(imageData) {
        const { data, width, height } = imageData;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.frameSkip++;
        if (this.frameSkip % this.processEveryNthFrame !== 0) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –ª–∏—Ü–æ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –ö–∞–ª–º–∞–Ω–∞
            if (this.lastValidFace) {
                const predicted = this.kalmanPredict(
                    this.lastValidFace.centerX, 
                    this.lastValidFace.centerY
                );
                
                return this.createPredictedFace(predicted, this.lastValidFace);
            }
            return null;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–æ–≤ –∫–æ–∂–∏
        const skinMask = this.createOptimizedSkinMask(data, width, height);
        
        // –ò—â–µ–º –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –ø–∏–∫—Å–µ–ª–µ–π –∫–æ–∂–∏
        const faceRegions = this.findOptimizedFaceRegions(skinMask, width, height);
        
        if (faceRegions.length === 0) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ª–∏—Ü–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
            if (this.lastValidFace) {
                return this.createDegradedFace(this.lastValidFace);
            }
            return null;
        }
        
        // –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –æ–±–ª–∞—Å—Ç—å –∫–∞–∫ –ª–∏—Ü–æ
        let mainFace = faceRegions.reduce((max, region) => 
            region.area > max.area ? region : max
        );
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        const smoothedPosition = this.kalmanPredict(mainFace.centerX, mainFace.centerY);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ª–∏—Ü–∞ —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        mainFace.centerX = smoothedPosition.x;
        mainFace.centerY = smoothedPosition.y;
        mainFace.confidence = Math.max(mainFace.confidence, smoothedPosition.confidence);
        
        // –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ª–∏—Ü–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        if (this.lastValidFace) {
            const distance = Math.sqrt(
                Math.pow(mainFace.centerX - this.lastValidFace.centerX, 2) +
                Math.pow(mainFace.centerY - this.lastValidFace.centerY, 2)
            );
            
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –ª–∏—Ü–æ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            if (distance > this.stabilizationThreshold) {
                mainFace = this.smoothFaceTransition(this.lastValidFace, mainFace);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        this.addToFaceHistory(mainFace);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        mainFace = this.applySmoothingFromHistory();
        
        // üé≠ –ù–û–í–ò–ù–ö–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–º–∏–∫—É –ª–∏—Ü–∞
        const expression = this.analyzeFacialExpression(imageData, mainFace);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º landmarks —Å —É—á–µ—Ç–æ–º –º–∏–º–∏–∫–∏
        const landmarks = this.generateAdaptiveLandmarks(mainFace, width, height, expression);
        
        const faceData = {
            boundingBox: {
                x: mainFace.x,
                y: mainFace.y,
                width: mainFace.width,
                height: mainFace.height
            },
            probability: [mainFace.confidence],
            landmarks: landmarks,
            annotations: this.generateAdaptiveAnnotations(landmarks, mainFace, expression),
            expression: expression  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∏–º–∏–∫–∏
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –ª–∏—Ü–æ
        this.lastValidFace = mainFace;
        
        return faceData;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –ª–∏—Ü–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ö–∞–ª–º–∞–Ω–∞
     * @param {Object} predicted - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param {Object} lastFace - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –ª–∏—Ü–æ
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞
     * @private
     */
    createPredictedFace(predicted, lastFace) {
        const predictedFace = {
            ...lastFace,
            centerX: predicted.x,
            centerY: predicted.y,
            confidence: Math.max(0.4, predicted.confidence * 0.9)
        };
        
        return {
            boundingBox: {
                x: predictedFace.x,
                y: predictedFace.y,
                width: predictedFace.width,
                height: predictedFace.height
            },
            probability: [predictedFace.confidence],
            landmarks: this.generateStabilizedLandmarks(predictedFace, 640, 480),
            annotations: this.generateStabilizedAnnotations([], predictedFace)
        };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (OpenCV –ø–æ–¥—Ö–æ–¥)
     * @param {number} x - –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X
     * @param {number} y - –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y
     * @private
     */
    initKalmanFilter(x, y) {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ: [x, y, vx, vy] - –ø–æ–∑–∏—Ü–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
        this.kalmanFilter.state = [x, y, 0, 0];
        
        // –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ (4x4)
        this.kalmanFilter.covariance = [
            [1, 0, 0, 0],
            [0, 1, 0, 0], 
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ];
        
        this.kalmanFilter.initialized = true;
        console.log('üéØ Kalman Filter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏');
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
     * @param {number} measuredX - –ò–∑–º–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è X
     * @param {number} measuredY - –ò–∑–º–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y
     * @returns {Object} - –°–≥–ª–∞–∂–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @private
     */
    kalmanPredict(measuredX, measuredY) {
        if (!this.kalmanFilter.initialized) {
            this.initKalmanFilter(measuredX, measuredY);
            return { x: measuredX, y: measuredY };
        }
        
        const dt = 1.0; // –í—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥
        const state = this.kalmanFilter.state;
        
        // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–º–æ–¥–µ–ª—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏)
        const predictedX = state[0] + state[2] * dt;
        const predictedY = state[1] + state[3] * dt;
        
        // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        const kalmanGain = 0.3; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è –ö–∞–ª–º–∞–Ω–∞
        
        const correctedX = predictedX + kalmanGain * (measuredX - predictedX);
        const correctedY = predictedY + kalmanGain * (measuredY - predictedY);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        state[2] = (correctedX - state[0]) / dt;
        state[3] = (correctedY - state[1]) / dt;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        state[0] = correctedX;
        state[1] = correctedY;
        
        return {
            x: correctedX,
            y: correctedY,
            confidence: this.calculateKalmanConfidence(measuredX, measuredY, correctedX, correctedY)
        };
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ö–∞–ª–º–∞–Ω–∞
     * @param {number} measuredX - –ò–∑–º–µ—Ä–µ–Ω–Ω–∞—è X
     * @param {number} measuredY - –ò–∑–º–µ—Ä–µ–Ω–Ω–∞—è Y  
     * @param {number} predictedX - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è X
     * @param {number} predictedY - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è Y
     * @returns {number} - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
     * @private
     */
    calculateKalmanConfidence(measuredX, measuredY, predictedX, predictedY) {
        const distance = Math.sqrt(
            Math.pow(measuredX - predictedX, 2) + 
            Math.pow(measuredY - predictedY, 2)
        );
        
        // –ß–µ–º –º–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–µ–º –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        return Math.max(0, 1 - distance / 50);
    }
    
    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –∫–æ–∂–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * @param {Uint8ClampedArray} data - –î–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @returns {Uint8Array} - –ú–∞—Å–∫–∞ –∫–æ–∂–∏
     * @private
     */
    createOptimizedSkinMask(data, width, height) {
        const centerX = width / 2;
        const centerY = height / 2;
        const searchRadius = Math.min(width, height) * this.optimizedRegionSize / 2;
        
        const mask = new Uint8Array(width * height);
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        const startX = Math.max(0, Math.floor(centerX - searchRadius));
        const endX = Math.min(width, Math.ceil(centerX + searchRadius));
        const startY = Math.max(0, Math.floor(centerY - searchRadius));
        const endY = Math.min(height, Math.ceil(centerY + searchRadius));
        
        for (let y = startY; y < endY; y += 2) { // –®–∞–≥ 2 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            for (let x = startX; x < endX; x += 2) {
                const pixelIndex = (y * width + x) * 4;
                const r = data[pixelIndex];
                const g = data[pixelIndex + 1];
                const b = data[pixelIndex + 2];
                
                // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–Ω–∞ –∫–æ–∂–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
                if (this.isSkinToneOptimized(r, g, b)) {
                    const maskIndex = y * width + x;
                    mask[maskIndex] = 255;
                    
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
                    if (x + 1 < width) {mask[maskIndex + 1] = 255;}
                    if (y + 1 < height) {mask[(y + 1) * width + x] = 255;}
                }
            }
        }
        
        return mask;
    }
    
    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–Ω–∞ –∫–æ–∂–∏
     * @param {number} r - –ö—Ä–∞—Å–Ω—ã–π –∫–∞–Ω–∞–ª
     * @param {number} g - –ó–µ–ª–µ–Ω—ã–π –∫–∞–Ω–∞–ª  
     * @param {number} b - –°–∏–Ω–∏–π –∫–∞–Ω–∞–ª
     * @returns {boolean} - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–≤–µ—Ç —Ç–æ–Ω–æ–º –∫–æ–∂–∏
     * @private
     */
    isSkinToneOptimized(r, g, b) {
        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤
        const colorKey = (r << 16) | (g << 8) | b;
        if (this.skinColorCache.has(colorKey)) {
            return this.skinColorCache.get(colorKey);
        }
        
        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–æ–Ω–æ–≤ –∫–æ–∂–∏
        const result = (
            r > 95 && g > 40 && b > 20 &&
            Math.max(r, g, b) - Math.min(r, g, b) > 15 &&
            Math.abs(r - g) > 15 && r > g && r > b
        ) || (
            r > 220 && g > 210 && b > 170 &&
            Math.abs(r - g) <= 15 && r > b && g > b
        );
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞)
        if (this.skinColorCache.size < 1000) {
            this.skinColorCache.set(colorKey, result);
        }
        
        return result;
    }
    
    /**
     * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –æ–±–ª–∞—Å—Ç–µ–π –ª–∏—Ü–∞ —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π
     * @param {Uint8Array} skinMask - –ú–∞—Å–∫–∞ –∫–æ–∂–∏
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –ª–∏—Ü–∞
     * @private
     */
    findOptimizedFaceRegions(skinMask, width, height) {
        const visited = new Uint8Array(width * height);
        const regions = [];
        const minRegionSize = (width * height) * 0.002; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞
        
        for (let y = 0; y < height; y += 3) { // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à–∞–≥ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            for (let x = 0; x < width; x += 3) {
                const index = y * width + x;
                
                if (skinMask[index] && !visited[index]) {
                    const region = this.floodFillOptimized(
                        skinMask, visited, x, y, width, height
                    );
                    
                    if (region.pixelCount > minRegionSize) {
                        // –í—ã—á–∏—Å–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞
                        const regionData = this.calculateRegionProperties(region, width, height);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–∞ –ª–∏—Ü–æ (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω)
                        if (this.isLikeFaceRegion(regionData)) {
                            regions.push(regionData);
                        }
                    }
                }
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–µ
        return regions
            .sort((a, b) => b.area - a.area)
            .slice(0, 3); // –ú–∞–∫—Å–∏–º—É–º 3 –ª–∏—Ü–∞
    }
    
    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π flood fill –∞–ª–≥–æ—Ä–∏—Ç–º
     * @param {Uint8Array} mask - –ú–∞—Å–∫–∞
     * @param {Uint8Array} visited - –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
     * @param {number} startX - –ù–∞—á–∞–ª—å–Ω–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} startY - –ù–∞—á–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} width - –®–∏—Ä–∏–Ω–∞
     * @param {number} height - –í—ã—Å–æ—Ç–∞
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞
     * @private
     */
    floodFillOptimized(mask, visited, startX, startY, width, height) {
        const stack = [{ x: startX, y: startY }];
        const region = {
            minX: startX, maxX: startX,
            minY: startY, maxY: startY,
            centerX: 0, centerY: 0,
            pixelCount: 0
        };
        
        let totalX = 0, totalY = 0;
        
        while (stack.length > 0) {
            const { x, y } = stack.pop();
            const index = y * width + x;
            
            if (x < 0 || x >= width || y < 0 || y >= height || 
                visited[index] || !mask[index]) {
                continue;
            }
            
            visited[index] = 1;
            region.pixelCount++;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            region.minX = Math.min(region.minX, x);
            region.maxX = Math.max(region.maxX, x);
            region.minY = Math.min(region.minY, y);
            region.maxY = Math.max(region.maxY, y);
            
            totalX += x;
            totalY += y;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–µ–π (—Ç–æ–ª—å–∫–æ 4-—Å–≤—è–∑–Ω–æ—Å—Ç—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
            stack.push(
                { x: x + 1, y: y },
                { x: x - 1, y: y },
                { x: x, y: y + 1 },
                { x: x, y: y - 1 }
            );
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä
        region.centerX = totalX / region.pixelCount;
        region.centerY = totalY / region.pixelCount;
        
        return region;
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–∞
     * @param {Object} region - –†–µ–≥–∏–æ–Ω
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @returns {Object} - –°–≤–æ–π—Å—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–∞
     * @private
     */
    calculateRegionProperties(region, width, height) {
        const regionWidth = region.maxX - region.minX + 1;
        const regionHeight = region.maxY - region.minY + 1;
        const area = regionWidth * regionHeight;
        const aspectRatio = regionWidth / regionHeight;
        
        // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        const density = region.pixelCount / area;
        
        // –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const centerDistance = Math.sqrt(
            Math.pow(region.centerX - width / 2, 2) +
            Math.pow(region.centerY - height / 2, 2)
        );
        
        return {
            x: region.minX,
            y: region.minY,
            width: regionWidth,
            height: regionHeight,
            centerX: region.centerX,
            centerY: region.centerY,
            area: area,
            aspectRatio: aspectRatio,
            density: density,
            centerDistance: centerDistance,
            confidence: this.calculateRegionConfidence(aspectRatio, density, centerDistance, width, height)
        };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–∞ –ª–∏—Ü–æ
     * @param {Object} regionData - –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞
     * @returns {boolean} - –ü–æ—Ö–æ–∂ –ª–∏ –Ω–∞ –ª–∏—Ü–æ
     * @private
     */
    isLikeFaceRegion(regionData) {
        // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –ª–∏—Ü–∞ –æ–±—ã—á–Ω–æ –æ—Ç 0.7 –¥–æ 1.3
        const aspectRatioOk = regionData.aspectRatio >= 0.7 && regionData.aspectRatio <= 1.3;
        
        // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–æ–π
        const densityOk = regionData.density > 0.3;
        
        // –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º
        const sizeOk = regionData.area > this.minFaceSize * this.minFaceSize && 
                      regionData.area < this.maxFaceSize * this.maxFaceSize;
        
        return aspectRatioOk && densityOk && sizeOk;
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
     * @param {number} aspectRatio - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
     * @param {number} density - –ü–ª–æ—Ç–Ω–æ—Å—Ç—å
     * @param {number} centerDistance - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @returns {number} - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
     * @private
     */
    calculateRegionConfidence(aspectRatio, density, centerDistance, width, height) {
        // –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –ª–∏—Ü–∞
        const aspectScore = 1 - Math.abs(aspectRatio - 1.0);
        
        // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ)
        const densityScore = Math.min(1, density * 2);
        
        // –ë–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–Ω—Ç—Ä—É (–ª–∏—Ü–∞ –æ–±—ã—á–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä–µ)
        const maxDistance = Math.sqrt(width * width + height * height) / 2;
        const centerScore = 1 - (centerDistance / maxDistance);
        
        // –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        return (aspectScore * 0.4 + densityScore * 0.4 + centerScore * 0.2);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–∏—Ü–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ
     * @param {Object} lastFace - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –ª–∏—Ü–æ
     * @returns {Object} - –î–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞
     * @private
     */
    createDegradedFace(lastFace) {
        const degradedFace = {
            ...lastFace,
            confidence: Math.max(0.3, lastFace.confidence * 0.8)
        };
        
        return {
            boundingBox: {
                x: degradedFace.x,
                y: degradedFace.y,
                width: degradedFace.width,
                height: degradedFace.height
            },
            probability: [degradedFace.confidence],
            landmarks: this.generateStabilizedLandmarks(degradedFace, 640, 480),
            annotations: this.generateStabilizedAnnotations([], degradedFace)
        };
    }
    
    /**
     * –°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–∑–∏—Ü–∏—è–º–∏ –ª–∏—Ü–∞
     * @param {Object} oldFace - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ª–∏—Ü–æ
     * @param {Object} newFace - –ù–æ–≤–æ–µ –ª–∏—Ü–æ
     * @returns {Object} - –°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ
     * @private
     */
    smoothFaceTransition(oldFace, newFace) {
        const smoothingFactor = 0.3; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        
        return {
            x: oldFace.x + (newFace.x - oldFace.x) * smoothingFactor,
            y: oldFace.y + (newFace.y - oldFace.y) * smoothingFactor,
            width: oldFace.width + (newFace.width - oldFace.width) * smoothingFactor,
            height: oldFace.height + (newFace.height - oldFace.height) * smoothingFactor,
            centerX: oldFace.centerX + (newFace.centerX - oldFace.centerX) * smoothingFactor,
            centerY: oldFace.centerY + (newFace.centerY - oldFace.centerY) * smoothingFactor,
            area: oldFace.area + (newFace.area - oldFace.area) * smoothingFactor,
            confidence: Math.max(oldFace.confidence, newFace.confidence)
        };
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –ª–∏—Ü–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
     * @param {Object} face - –î–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞
     * @private
     */
    addToFaceHistory(face) {
        this.faceHistory.push(face);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (this.faceHistory.length > this.maxHistoryLength) {
            this.faceHistory.shift();
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ª–∏—Ü
     * @returns {Object} - –°–≥–ª–∞–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ
     * @private
     */
    applySmoothingFromHistory() {
        if (this.faceHistory.length === 0) {return null;}
        if (this.faceHistory.length === 1) {return this.faceHistory[0];}
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
        let totalWeight = 0;
        const smoothed = {
            x: 0, y: 0, width: 0, height: 0,
            centerX: 0, centerY: 0, area: 0, confidence: 0
        };
        
        this.faceHistory.forEach((face, index) => {
            // –ë–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ –∫–∞–¥—Ä—ã –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
            const weight = (index + 1) / this.faceHistory.length;
            totalWeight += weight;
            
            smoothed.x += face.x * weight;
            smoothed.y += face.y * weight;
            smoothed.width += face.width * weight;
            smoothed.height += face.height * weight;
            smoothed.centerX += face.centerX * weight;
            smoothed.centerY += face.centerY * weight;
            smoothed.area += face.area * weight;
            smoothed.confidence += face.confidence * weight;
        });
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –æ–±—â–µ–º—É –≤–µ—Å—É
        Object.keys(smoothed).forEach(key => {
            smoothed[key] /= totalWeight;
        });
        
        return smoothed;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ landmarks
     * @param {Object} face - –î–∞–Ω–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ landmarks
     * @private
     */
    generateStabilizedLandmarks(face, width, height) {
        const landmarks = [];
        const centerX = face.centerX;
        const centerY = face.centerY;
        const faceWidth = face.width;
        const faceHeight = face.height;
        
        // –ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞ (–ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∞–Ω—Ç—Ä–æ–ø–æ–º–µ—Ç—Ä–∏–∏)
        const proportions = {
            // –ö–æ–Ω—Ç—É—Ä –ª–∏—Ü–∞ (0-16) - 17 —Ç–æ—á–µ–∫
            jawline: { start: 0, count: 17, ratio: { w: 1.0, h: 1.2 } },
            
            // –ü—Ä–∞–≤–∞—è –±—Ä–æ–≤—å (17-21) - 5 —Ç–æ—á–µ–∫  
            rightBrow: { start: 17, count: 5, ratio: { w: 0.25, h: 0.15, offsetY: -0.35 } },
            
            // –õ–µ–≤–∞—è –±—Ä–æ–≤—å (22-26) - 5 —Ç–æ—á–µ–∫
            leftBrow: { start: 22, count: 5, ratio: { w: 0.25, h: 0.15, offsetY: -0.35 } },
            
            // –ü–µ—Ä–µ–Ω–æ—Å–∏—Ü–∞ (27-30) - 4 —Ç–æ—á–∫–∏
            noseBridge: { start: 27, count: 4, ratio: { w: 0.08, h: 0.25, offsetY: -0.1 } },
            
            // –ù–æ–∑–¥—Ä–∏ (31-35) - 5 —Ç–æ—á–µ–∫
            nostrils: { start: 31, count: 5, ratio: { w: 0.15, h: 0.08, offsetY: 0.05 } },
            
            // –ü—Ä–∞–≤—ã–π –≥–ª–∞–∑ (36-41) - 6 —Ç–æ—á–µ–∫
            rightEye: { start: 36, count: 6, ratio: { w: 0.12, h: 0.06, offsetX: -0.2, offsetY: -0.15 } },
            
            // –õ–µ–≤—ã–π –≥–ª–∞–∑ (42-47) - 6 —Ç–æ—á–µ–∫  
            leftEye: { start: 42, count: 6, ratio: { w: 0.12, h: 0.06, offsetX: 0.2, offsetY: -0.15 } },
            
            // –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –≥—É–± (48-59) - 12 —Ç–æ—á–µ–∫
            outerLips: { start: 48, count: 12, ratio: { w: 0.25, h: 0.08, offsetY: 0.25 } },
            
            // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –≥—É–± (60-67) - 8 —Ç–æ—á–µ–∫
            innerLips: { start: 60, count: 8, ratio: { w: 0.2, h: 0.04, offsetY: 0.25 } }
        };
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–æ–π –∑–æ–Ω—ã
        Object.entries(proportions).forEach(([zone, config]) => {
            const zonePoints = this.generateZoneLandmarks(
                centerX, centerY, faceWidth, faceHeight, config, zone
            );
            landmarks.push(...zonePoints);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–µ—Ç–∫–∏ (468 —Ç–æ—á–µ–∫)
        const additionalPoints = this.generateAdditionalMeshPoints(
            centerX, centerY, faceWidth, faceHeight, landmarks.length
        );
        landmarks.push(...additionalPoints);
        
        return landmarks.slice(0, 468); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 468 —Ç–æ—á–µ–∫
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–æ–π –∑–æ–Ω—ã
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ Y  
     * @param {number} faceWidth - –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞
     * @param {number} faceHeight - –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–æ–Ω—ã
     * @param {string} zoneName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã
     * @returns {Array} - –¢–æ—á–∫–∏ –∑–æ–Ω—ã
     * @private
     */
    generateZoneLandmarks(centerX, centerY, faceWidth, faceHeight, config, zoneName) {
        const points = [];
        const { count, ratio } = config;
        
        // –†–∞–∑–º–µ—Ä—ã –∑–æ–Ω—ã
        const zoneWidth = faceWidth * ratio.w;
        const zoneHeight = faceHeight * ratio.h;
        
        // –°–º–µ—â–µ–Ω–∏–µ –∑–æ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –ª–∏—Ü–∞
        const offsetX = (config.offsetX || 0) * faceWidth;
        const offsetY = (config.offsetY || 0) * faceHeight;
        
        const zoneCenterX = centerX + offsetX;
        const zoneCenterY = centerY + offsetY;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–æ–Ω
        switch (zoneName) {
            case 'jawline':
                return this.generateJawlinePoints(centerX, centerY, faceWidth, faceHeight, count);
                
            case 'rightBrow':
            case 'leftBrow':
                return this.generateBrowPoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count, zoneName.includes('right'));
                
            case 'rightEye':
            case 'leftEye':
                return this.generateEyePoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count);
                
            case 'outerLips':
            case 'innerLips':
                return this.generateLipPoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count, zoneName === 'outerLips');
                
            case 'noseBridge':
                return this.generateNoseBridgePoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count);
                
            case 'nostrils':
                return this.generateNostrilPoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count);
                
            default:
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫
                for (let i = 0; i < count; i++) {
                    const angle = (i / count) * 2 * Math.PI;
                    const x = zoneCenterX + Math.cos(angle) * zoneWidth / 2;
                    const y = zoneCenterY + Math.sin(angle) * zoneHeight / 2;
                    points.push([x, y, 0]);
                }
                return points;
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—É—Ä–∞ –ª–∏—Ü–∞ (–æ–≤–∞–ª)
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @returns {Array} - –¢–æ—á–∫–∏ –∫–æ–Ω—Ç—É—Ä–∞
     * @private
     */
    generateJawlinePoints(centerX, centerY, width, height, count) {
        const points = [];
        
        for (let i = 0; i < count; i++) {
            // –£–≥–æ–ª –æ—Ç 0 –¥–æ 2œÄ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–≤–∞–ª–∞
            const angle = (i / (count - 1)) * Math.PI; // –ü–æ–ª—É–∫—Ä—É–≥ –¥–ª—è –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞
            
            // –°–æ–∑–¥–∞–µ–º –æ–≤–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –ª–∏—Ü–∞
            const radiusX = width * 0.5;
            const radiusY = height * 0.6;
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä–∞ –ª–∏—Ü–∞
            const adjustedAngle = angle - Math.PI / 2; // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É
            const x = centerX + Math.cos(adjustedAngle) * radiusX;
            const y = centerY + Math.sin(adjustedAngle) * radiusY;
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –±—Ä–æ–≤–µ–π
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X –±—Ä–æ–≤–∏
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y –±—Ä–æ–≤–∏
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –±—Ä–æ–≤–∏
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –±—Ä–æ–≤–∏
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @param {boolean} isRight - –ü—Ä–∞–≤–∞—è –±—Ä–æ–≤—å
     * @returns {Array} - –¢–æ—á–∫–∏ –±—Ä–æ–≤–∏
     * @private
     */
    generateBrowPoints(centerX, centerY, width, height, count, isRight) {
        const points = [];
        
        for (let i = 0; i < count; i++) {
            const t = i / (count - 1);
            
            // –°–æ–∑–¥–∞–µ–º –∏–∑–≥–∏–± –±—Ä–æ–≤–∏ (–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∫—Ä–∏–≤–∞—è)
            const x = centerX + (t - 0.5) * width;
            const browCurve = Math.sin(t * Math.PI) * height * 0.5;
            const y = centerY - browCurve;
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –≥–ª–∞–∑–∞
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X –≥–ª–∞–∑–∞
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y –≥–ª–∞–∑–∞
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –≥–ª–∞–∑–∞
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –≥–ª–∞–∑–∞
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @returns {Array} - –¢–æ—á–∫–∏ –≥–ª–∞–∑–∞
     * @private
     */
    generateEyePoints(centerX, centerY, width, height, count) {
        const points = [];
        
        for (let i = 0; i < count; i++) {
            const angle = (i / count) * 2 * Math.PI;
            
            // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–¥–∞–ª–µ–≤–∏–¥–Ω—É—é —Ñ–æ—Ä–º—É –≥–ª–∞–∑–∞
            const radiusX = width / 2;
            const radiusY = height / 2;
            
            const x = centerX + Math.cos(angle) * radiusX;
            const y = centerY + Math.sin(angle) * radiusY * 0.6; // –°–∂–∏–º–∞–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –≥—É–±
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X –≥—É–±
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y –≥—É–±
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –≥—É–±
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –≥—É–±
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @param {boolean} isOuter - –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä
     * @returns {Array} - –¢–æ—á–∫–∏ –≥—É–±
     * @private
     */
    generateLipPoints(centerX, centerY, width, height, count, isOuter) {
        const points = [];
        const scale = isOuter ? 1.0 : 0.7; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –º–µ–Ω—å—à–µ
        
        for (let i = 0; i < count; i++) {
            const t = i / count;
            const angle = t * 2 * Math.PI;
            
            // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –≥—É–± (—ç–ª–ª–∏–ø—Å —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)
            const radiusX = (width / 2) * scale;
            const radiusY = (height / 2) * scale;
            
            const x = centerX + Math.cos(angle) * radiusX;
            const y = centerY + Math.sin(angle) * radiusY;
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ü—ã
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y
     * @param {number} width - –®–∏—Ä–∏–Ω–∞
     * @param {number} height - –í—ã—Å–æ—Ç–∞
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @returns {Array} - –¢–æ—á–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ü—ã
     * @private
     */
    generateNoseBridgePoints(centerX, centerY, width, height, count) {
        const points = [];
        
        for (let i = 0; i < count; i++) {
            const t = i / (count - 1);
            const x = centerX;
            const y = centerY + (t - 0.5) * height;
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏ –Ω–æ–∑–¥—Ä–µ–π
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y
     * @param {number} width - –®–∏—Ä–∏–Ω–∞
     * @param {number} height - –í—ã—Å–æ—Ç–∞
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @returns {Array} - –¢–æ—á–∫–∏ –Ω–æ–∑–¥—Ä–µ–π
     * @private
     */
    generateNostrilPoints(centerX, centerY, width, height, count) {
        const points = [];
        
        for (let i = 0; i < count; i++) {
            const t = i / (count - 1);
            const x = centerX + (t - 0.5) * width;
            const y = centerY;
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–µ—Ç–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ 468
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y
     * @param {number} faceWidth - –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞
     * @param {number} faceHeight - –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞
     * @param {number} currentCount - –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @returns {Array} - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
     * @private
     */
    generateAdditionalMeshPoints(centerX, centerY, faceWidth, faceHeight, currentCount) {
        const points = [];
        const needed = 468 - currentCount;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É —Ç–æ—á–µ–∫ –≤–Ω—É—Ç—Ä–∏ –ª–∏—Ü–∞
        const gridSize = Math.ceil(Math.sqrt(needed));
        
        for (let i = 0; i < needed; i++) {
            const row = Math.floor(i / gridSize);
            const col = i % gridSize;
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü–∞
            const x = centerX + (col / gridSize - 0.5) * faceWidth * 0.8;
            const y = centerY + (row / gridSize - 0.5) * faceHeight * 0.8;
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     * @param {Array} landmarks - –¢–æ—á–∫–∏ –ª–∏—Ü–∞
     * @param {Object} faceRegion - –û–±–ª–∞—Å—Ç—å –ª–∏—Ü–∞
     * @returns {Object} - –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     * @private
     */
    generateStabilizedAnnotations(landmarks, faceRegion) {
        const { centerX, centerY, width: faceWidth, height: faceHeight } = faceRegion;
        
        return {
            leftEye: [[centerX - faceWidth * 0.2, centerY - faceHeight * 0.15, 0]],
            rightEye: [[centerX + faceWidth * 0.2, centerY - faceHeight * 0.15, 0]],
            noseTip: [[centerX, centerY + faceHeight * 0.05, 0]],
            lipsUpperOuter: [[centerX, centerY + faceHeight * 0.25, 0]]
        };
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –º–∞—Å–æ–∫
     * @param {HTMLImageElement|HTMLVideoElement|HTMLCanvasElement} input - –í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ
     * @returns {Promise<Object>} - –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –º–∞—Å–∫–∏
     */
    async getFaceMaskData(input) {
        const faces = await this.detectFaces(input, true);
        
        if (!faces || faces.length === 0) {
            return null;
        }
        
        const face = faces[0];
        const centerX = face.boundingBox.x + face.boundingBox.width / 2;
        const centerY = face.boundingBox.y + face.boundingBox.height / 2;
        
        return {
            boundingBox: face.boundingBox,
            landmarks: face.landmarks,
            annotations: face.annotations,
            keyPoints: {
                leftEye: { x: centerX - 30, y: centerY - 20, z: 0 },
                rightEye: { x: centerX + 30, y: centerY - 20, z: 0 },
                nose: { x: centerX, y: centerY + 5, z: 0 },
                mouth: { x: centerX, y: centerY + 30, z: 0 },
                faceCenter: { x: centerX, y: centerY, z: 0 },
                faceWidth: face.boundingBox.width,
                faceHeight: face.boundingBox.height
            }
        };
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    updateSettings(options) {
        if (options.refineLandmarks !== undefined) {
            this.refineLandmarks = options.refineLandmarks;
        }
        if (options.confidenceThreshold !== undefined) {
            this.faceDetectionParams.confidenceThreshold = options.confidenceThreshold;
        }
        console.log('üé≠ FaceMeshDetector: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    /**
     * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
     */
    dispose() {
        this.isInitialized = false;
        this.lastDetectedFaces = [];
        this.processingTimeHistory = [];
        this.analysisCanvas = null;
        this.analysisCtx = null;
        console.log('üé≠ FaceMeshDetector: –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @returns {number} - –í—Ä–µ–º—è –≤ –º—Å
     */
    getAverageProcessingTime() {
        return this.lastProcessingTime || 8;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤
     * @returns {number} - FPS
     */
    getEstimatedFPS() {
        const avgTime = this.getAverageProcessingTime();
        return avgTime > 0 ? Math.round(1000 / avgTime) : 30;
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∏–º–∏–∫—É –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–∫–∏
     * @param {ImageData} imageData - –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {Object} face - –î–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ –º–∏–º–∏–∫–∏
     * @private
     */
    analyzeFacialExpression(imageData, face) {
        const { data, width, height } = imageData;
        const { centerX, centerY, width: faceWidth, height: faceHeight } = face;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∏–º–∏–∫–∏
        const eyeRegion = this.analyzeEyeRegion(data, width, height, centerX, centerY, faceWidth, faceHeight);
        const mouthRegion = this.analyzeMouthRegion(data, width, height, centerX, centerY, faceWidth, faceHeight);
        const browRegion = this.analyzeBrowRegion(data, width, height, centerX, centerY, faceWidth, faceHeight);
        const cheekRegion = this.analyzeCheekRegion(data, width, height, centerX, centerY, faceWidth, faceHeight);
        
        return {
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–∑ (0 = –∑–∞–∫—Ä—ã—Ç—ã, 1 = –æ—Ç–∫—Ä—ã—Ç—ã)
            eyesOpen: eyeRegion.openness,
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—Ç–∞ (0 = –∑–∞–∫—Ä—ã—Ç, 1 = –æ—Ç–∫—Ä—ã—Ç)
            mouthOpen: mouthRegion.openness,
            
            // –£–ª—ã–±–∫–∞ (0 = –Ω–µ—Ç, 1 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è)
            smiling: mouthRegion.smileIntensity,
            
            // –ü–æ–¥–Ω—è—Ç—ã–µ –±—Ä–æ–≤–∏ (0 = –Ω–µ—Ç, 1 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥–Ω—è—Ç—ã)
            browRaised: browRegion.elevation,
            
            // –ù–∞–¥—É—Ç—ã–µ —â–µ–∫–∏ (0 = –Ω–µ—Ç, 1 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∞–¥—É—Ç—ã)
            cheeksPuffed: cheekRegion.puffiness,
            
            // –û–±—â–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            expressionIntensity: (eyeRegion.activity + mouthRegion.activity + browRegion.activity) / 3,
            
            // –¢–∏–ø –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            dominantExpression: this.determineDominantExpression(eyeRegion, mouthRegion, browRegion, cheekRegion)
        };
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç—å –≥–ª–∞–∑
     * @param {Uint8ClampedArray} data - –ü–∏–∫—Å–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ Y
     * @param {number} faceWidth - –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞
     * @param {number} faceHeight - –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≥–ª–∞–∑
     * @private
     */
    analyzeEyeRegion(data, width, height, centerX, centerY, faceWidth, faceHeight) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –≥–ª–∞–∑–∞
        const leftEyeX = Math.round(centerX - faceWidth * 0.2);
        const rightEyeX = Math.round(centerX + faceWidth * 0.2);
        const eyeY = Math.round(centerY - faceHeight * 0.15);
        const eyeWidth = Math.round(faceWidth * 0.12);
        const eyeHeight = Math.round(faceHeight * 0.06);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –≥–ª–∞–∑
        const leftEyeIntensity = this.calculateRegionIntensity(data, width, leftEyeX, eyeY, eyeWidth, eyeHeight);
        const rightEyeIntensity = this.calculateRegionIntensity(data, width, rightEyeX, eyeY, eyeWidth, eyeHeight);
        
        // –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≥–ª–∞–∑
        const avgIntensity = (leftEyeIntensity + rightEyeIntensity) / 2;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –≥–ª–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        // –û—Ç–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞ –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç (–±–µ–ª–∫–∏ + –∑—Ä–∞—á–∫–∏)
        const openness = Math.min(1, Math.max(0, (avgIntensity - 80) / 100));
        
        return {
            openness: openness,
            activity: Math.abs(0.7 - openness), // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            leftIntensity: leftEyeIntensity,
            rightIntensity: rightEyeIntensity
        };
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç—å —Ä—Ç–∞
     * @param {Uint8ClampedArray} data - –ü–∏–∫—Å–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ Y
     * @param {number} faceWidth - –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞
     * @param {number} faceHeight - –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Ä—Ç–∞
     * @private
     */
    analyzeMouthRegion(data, width, height, centerX, centerY, faceWidth, faceHeight) {
        const mouthX = Math.round(centerX - faceWidth * 0.125);
        const mouthY = Math.round(centerY + faceHeight * 0.25);
        const mouthWidth = Math.round(faceWidth * 0.25);
        const mouthHeight = Math.round(faceHeight * 0.08);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å —Ä—Ç–∞
        const mouthCenterIntensity = this.calculateRegionIntensity(
            data, width, 
            Math.round(centerX - mouthWidth * 0.2), 
            mouthY, 
            Math.round(mouthWidth * 0.4), 
            mouthHeight
        );
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≥–æ–ª–∫–∏ —Ä—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—ã–±–∫–∏
        const leftCornerIntensity = this.calculateRegionIntensity(
            data, width, 
            Math.round(centerX - faceWidth * 0.125), 
            mouthY, 
            Math.round(faceWidth * 0.05), 
            Math.round(faceHeight * 0.04)
        );
        
        const rightCornerIntensity = this.calculateRegionIntensity(
            data, width, 
            Math.round(centerX + faceWidth * 0.075), 
            mouthY, 
            Math.round(faceWidth * 0.05), 
            Math.round(faceHeight * 0.04)
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å —Ä—Ç–∞ (—Ç–µ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å = –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–æ—Ç)
        const openness = Math.min(1, Math.max(0, (120 - mouthCenterIntensity) / 80));
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ª—ã–±–∫—É –ø–æ –ø–æ–¥–Ω—è—Ç—ã–º —É–≥–æ–ª–∫–∞–º
        const cornerElevation = (leftCornerIntensity + rightCornerIntensity) / 2;
        const smileIntensity = Math.min(1, Math.max(0, (cornerElevation - 100) / 60));
        
        return {
            openness: openness,
            smileIntensity: smileIntensity,
            activity: Math.max(openness, smileIntensity),
            centerIntensity: mouthCenterIntensity,
            cornerIntensity: cornerElevation
        };
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç—å –±—Ä–æ–≤–µ–π
     * @param {Uint8ClampedArray} data - –ü–∏–∫—Å–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ Y
     * @param {number} faceWidth - –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞
     * @param {number} faceHeight - –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –±—Ä–æ–≤–µ–π
     * @private
     */
    analyzeBrowRegion(data, width, height, centerX, centerY, faceWidth, faceHeight) {
        const browY = Math.round(centerY - faceHeight * 0.35);
        const browWidth = Math.round(faceWidth * 0.25);
        const browHeight = Math.round(faceHeight * 0.15);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –±—Ä–æ–≤–∏
        const leftBrowIntensity = this.calculateRegionIntensity(
            data, width, 
            Math.round(centerX - faceWidth * 0.25), 
            browY, 
            browWidth, 
            browHeight
        );
        
        const rightBrowIntensity = this.calculateRegionIntensity(
            data, width, 
            Math.round(centerX), 
            browY, 
            browWidth, 
            browHeight
        );
        
        const avgBrowIntensity = (leftBrowIntensity + rightBrowIntensity) / 2;
        
        // –ü–æ–¥–Ω—è—Ç—ã–µ –±—Ä–æ–≤–∏ —Å–æ–∑–¥–∞—é—Ç –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ —Å –ª–±–æ–º
        const elevation = Math.min(1, Math.max(0, (avgBrowIntensity - 90) / 70));
        
        return {
            elevation: elevation,
            activity: elevation,
            leftIntensity: leftBrowIntensity,
            rightIntensity: rightBrowIntensity
        };
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç—å —â–µ–∫
     * @param {Uint8ClampedArray} data - –ü–∏–∫—Å–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ Y
     * @param {number} faceWidth - –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞
     * @param {number} faceHeight - –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —â–µ–∫
     * @private
     */
    analyzeCheekRegion(data, width, height, centerX, centerY, faceWidth, faceHeight) {
        const cheekY = Math.round(centerY);
        const cheekWidth = Math.round(faceWidth * 0.15);
        const cheekHeight = Math.round(faceHeight * 0.2);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —â–µ–∫–∏
        const leftCheekIntensity = this.calculateRegionIntensity(
            data, width, 
            Math.round(centerX - faceWidth * 0.4), 
            cheekY, 
            cheekWidth, 
            cheekHeight
        );
        
        const rightCheekIntensity = this.calculateRegionIntensity(
            data, width, 
            Math.round(centerX + faceWidth * 0.25), 
            cheekY, 
            cheekWidth, 
            cheekHeight
        );
        
        const avgCheekIntensity = (leftCheekIntensity + rightCheekIntensity) / 2;
        
        // –ù–∞–¥—É—Ç—ã–µ —â–µ–∫–∏ –∏–º–µ—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—É—é —è—Ä–∫–æ—Å—Ç—å
        const puffiness = Math.min(1, Math.max(0, (avgCheekIntensity - 110) / 50));
        
        return {
            puffiness: puffiness,
            activity: puffiness,
            leftIntensity: leftCheekIntensity,
            rightIntensity: rightCheekIntensity
        };
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏
     * @param {Uint8ClampedArray} data - –ü–∏–∫—Å–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–±–ª–∞—Å—Ç–∏
     * @param {number} regionWidth - –®–∏—Ä–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏
     * @param {number} regionHeight - –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏
     * @returns {number} - –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
     * @private
     */
    calculateRegionIntensity(data, width, x, y, regionWidth, regionHeight) {
        let totalIntensity = 0;
        let pixelCount = 0;
        
        for (let dy = 0; dy < regionHeight; dy++) {
            for (let dx = 0; dx < regionWidth; dx++) {
                const pixelX = x + dx;
                const pixelY = y + dy;
                
                if (pixelX >= 0 && pixelX < width && pixelY >= 0) {
                    const index = (pixelY * width + pixelX) * 4;
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º —è—Ä–∫–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª—è (grayscale)
                    const r = data[index];
                    const g = data[index + 1];
                    const b = data[index + 2];
                    const intensity = (r + g + b) / 3;
                    
                    totalIntensity += intensity;
                    pixelCount++;
                }
            }
        }
        
        return pixelCount > 0 ? totalIntensity / pixelCount : 0;
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞
     * @param {Object} eyeRegion - –î–∞–Ω–Ω—ã–µ –≥–ª–∞–∑
     * @param {Object} mouthRegion - –î–∞–Ω–Ω—ã–µ —Ä—Ç–∞
     * @param {Object} browRegion - –î–∞–Ω–Ω—ã–µ –±—Ä–æ–≤–µ–π
     * @param {Object} cheekRegion - –î–∞–Ω–Ω—ã–µ —â–µ–∫
     * @returns {string} - –¢–∏–ø –≤—ã—Ä–∞–∂–µ–Ω–∏—è
     * @private
     */
    determineDominantExpression(eyeRegion, mouthRegion, browRegion, cheekRegion) {
        const expressions = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if (mouthRegion.smileIntensity > 0.6) {
            expressions.push({ type: 'happy', intensity: mouthRegion.smileIntensity });
        }
        
        if (mouthRegion.openness > 0.7) {
            expressions.push({ type: 'surprised', intensity: mouthRegion.openness });
        }
        
        if (browRegion.elevation > 0.6) {
            expressions.push({ type: 'surprised', intensity: browRegion.elevation });
        }
        
        if (eyeRegion.openness < 0.3) {
            expressions.push({ type: 'sleepy', intensity: 1 - eyeRegion.openness });
        }
        
        if (cheekRegion.puffiness > 0.5) {
            expressions.push({ type: 'puffed', intensity: cheekRegion.puffiness });
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–π
        if (expressions.length === 0) {
            return 'neutral';
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º–æ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        const dominant = expressions.reduce((max, expr) => 
            expr.intensity > max.intensity ? expr : max
        );
        
        return dominant.type;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ landmarks –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–º–∏–∫–∏
     * @param {Object} face - –î–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {Object} expression - –î–∞–Ω–Ω—ã–µ –º–∏–º–∏–∫–∏
     * @returns {Array} - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ landmarks
     * @private
     */
    generateAdaptiveLandmarks(face, width, height, expression) {
        const landmarks = [];
        const centerX = face.centerX;
        const centerY = face.centerY;
        const faceWidth = face.width;
        const faceHeight = face.height;
        
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ –º–∏–º–∏–∫—É
        const adaptiveConfig = {
            // –ö–æ–Ω—Ç—É—Ä –ª–∏—Ü–∞ (0-16) - 17 —Ç–æ—á–µ–∫
            jawline: { 
                start: 0, count: 17, 
                ratio: { w: 1.0, h: 1.2 },
                adaptation: { cheeksPuffed: expression.cheeksPuffed * 0.1 }
            },
            
            // –ë—Ä–æ–≤–∏ (17-26) - 10 —Ç–æ—á–µ–∫  
            eyebrows: { 
                start: 17, count: 10, 
                ratio: { w: 0.5, h: 0.15, offsetY: -0.35 },
                adaptation: { browRaised: expression.browRaised * 0.1 }
            },
            
            // –ü–µ—Ä–µ–Ω–æ—Å–∏—Ü–∞ (27-30) - 4 —Ç–æ—á–∫–∏
            noseBridge: { 
                start: 27, count: 4, 
                ratio: { w: 0.08, h: 0.25, offsetY: -0.1 },
                adaptation: {}
            },
            
            // –ù–æ–∑–¥—Ä–∏ (31-35) - 5 —Ç–æ—á–µ–∫
            nostrils: { 
                start: 31, count: 5, 
                ratio: { w: 0.15, h: 0.08, offsetY: 0.05 },
                adaptation: {}
            },
            
            // –ì–ª–∞–∑–∞ (36-47) - 12 —Ç–æ—á–µ–∫
            eyes: { 
                start: 36, count: 12, 
                ratio: { w: 0.4, h: 0.12, offsetY: -0.15 },
                adaptation: { eyesOpen: expression.eyesOpen * 0.1 }
            },
            
            // –ì—É–±—ã (48-67) - 20 —Ç–æ—á–µ–∫
            lips: { 
                start: 48, count: 20, 
                ratio: { w: 0.25, h: 0.12, offsetY: 0.25 },
                adaptation: { 
                    mouthOpen: expression.mouthOpen * 0.15,
                    smiling: expression.smiling * 0.1
                }
            }
        };
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
        Object.entries(adaptiveConfig).forEach(([zoneName, config]) => {
            const zonePoints = this.generateAdaptiveZoneLandmarks(
                centerX, centerY, faceWidth, faceHeight, config, zoneName, expression
            );
            landmarks.push(...zonePoints);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–µ—Ç–∫–∏ (468 —Ç–æ—á–µ–∫)
        const additionalPoints = this.generateAdditionalMeshPoints(
            centerX, centerY, faceWidth, faceHeight, landmarks.length
        );
        landmarks.push(...additionalPoints);
        
        return landmarks.slice(0, 468); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 468 —Ç–æ—á–µ–∫
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω—ã –ª–∏—Ü–∞
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä –ª–∏—Ü–∞ –ø–æ Y  
     * @param {number} faceWidth - –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞
     * @param {number} faceHeight - –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–æ–Ω—ã
     * @param {string} zoneName - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã
     * @param {Object} expression - –î–∞–Ω–Ω—ã–µ –º–∏–º–∏–∫–∏
     * @returns {Array} - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∑–æ–Ω—ã
     * @private
     */
    generateAdaptiveZoneLandmarks(centerX, centerY, faceWidth, faceHeight, config, zoneName, expression) {
        const points = [];
        const { count, ratio, adaptation } = config;
        
        // –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∑–æ–Ω—ã
        let zoneWidth = faceWidth * ratio.w;
        let zoneHeight = faceHeight * ratio.h;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–º–∏–∫–∏
        Object.entries(adaptation).forEach(([expressionType, factor]) => {
            if (expression[expressionType]) {
                const adaptationValue = expression[expressionType] * factor;
                
                switch (expressionType) {
                    case 'browRaised':
                        // –ü–æ–¥–Ω—è—Ç—ã–µ –±—Ä–æ–≤–∏ —Å–º–µ—â–∞—é—Ç —Ç–æ—á–∫–∏ –≤–≤–µ—Ä—Ö
                        if (zoneName === 'eyebrows') {
                            zoneHeight *= (1 + adaptationValue);
                        }
                        break;
                        
                    case 'eyesOpen':
                        // –û—Ç–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤—ã—Å–æ—Ç—É –æ–±–ª–∞—Å—Ç–∏ –≥–ª–∞–∑
                        if (zoneName === 'eyes') {
                            zoneHeight *= (1 + adaptationValue);
                        }
                        break;
                        
                    case 'mouthOpen':
                        // –û—Ç–∫—Ä—ã—Ç—ã–π —Ä–æ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ—Ç—É –≥—É–±
                        if (zoneName === 'lips') {
                            zoneHeight *= (1 + adaptationValue * 2);
                        }
                        break;
                        
                    case 'smiling':
                        // –£–ª—ã–±–∫–∞ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≥—É–±—ã
                        if (zoneName === 'lips') {
                            zoneWidth *= (1 + adaptationValue);
                        }
                        break;
                        
                    case 'cheeksPuffed':
                        // –ù–∞–¥—É—Ç—ã–µ —â–µ–∫–∏ —Ä–∞—Å—à–∏—Ä—è—é—Ç –∫–æ–Ω—Ç—É—Ä –ª–∏—Ü–∞
                        if (zoneName === 'jawline') {
                            zoneWidth *= (1 + adaptationValue);
                        }
                        break;
                }
            }
        });
        
        // –°–º–µ—â–µ–Ω–∏–µ –∑–æ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –ª–∏—Ü–∞
        const offsetX = (config.ratio.offsetX || 0) * faceWidth;
        const offsetY = (config.ratio.offsetY || 0) * faceHeight;
        
        const zoneCenterX = centerX + offsetX;
        const zoneCenterY = centerY + offsetY;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–æ–Ω—ã
        switch (zoneName) {
            case 'jawline':
                return this.generateAdaptiveJawlinePoints(centerX, centerY, zoneWidth, zoneHeight, count, expression);
                
            case 'eyebrows':
                return this.generateAdaptiveBrowPoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count, expression);
                
            case 'eyes':
                return this.generateAdaptiveEyePoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count, expression);
                
            case 'lips':
                return this.generateAdaptiveLipPoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count, expression);
                
            case 'noseBridge':
                return this.generateNoseBridgePoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count);
                
            case 'nostrils':
                return this.generateNostrilPoints(zoneCenterX, zoneCenterY, zoneWidth, zoneHeight, count);
                
            default:
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫
                for (let i = 0; i < count; i++) {
                    const angle = (i / count) * 2 * Math.PI;
                    const x = zoneCenterX + Math.cos(angle) * zoneWidth / 2;
                    const y = zoneCenterY + Math.sin(angle) * zoneHeight / 2;
                    points.push([x, y, 0]);
                }
                return points;
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—É—Ä–∞ –ª–∏—Ü–∞
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –ª–∏—Ü–∞ —Å —É—á–µ—Ç–æ–º –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –ª–∏—Ü–∞ —Å —É—á–µ—Ç–æ–º –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @param {Object} expression - –î–∞–Ω–Ω—ã–µ –º–∏–º–∏–∫–∏
     * @returns {Array} - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—É—Ä–∞
     * @private
     */
    generateAdaptiveJawlinePoints(centerX, centerY, width, height, count, expression) {
        const points = [];
        
        for (let i = 0; i < count; i++) {
            const t = i / (count - 1);
            const angle = t * Math.PI - Math.PI / 2; // –û—Ç -œÄ/2 –¥–æ œÄ/2
            
            // –ë–∞–∑–æ–≤—ã–µ —Ä–∞–¥–∏—É—Å—ã
            let radiusX = width * 0.5;
            let radiusY = height * 0.6;
            
            // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –Ω–∞–¥—É—Ç—ã–µ —â–µ–∫–∏
            if (expression.cheeksPuffed > 0.3) {
                const puffFactor = 1 + expression.cheeksPuffed * 0.2;
                radiusX *= puffFactor;
            }
            
            const x = centerX + Math.cos(angle) * radiusX;
            const y = centerY + Math.sin(angle) * radiusY;
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –±—Ä–æ–≤–µ–π
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ –±—Ä–æ–≤–µ–π
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –±—Ä–æ–≤–µ–π
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @param {Object} expression - –î–∞–Ω–Ω—ã–µ –º–∏–º–∏–∫–∏
     * @returns {Array} - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –±—Ä–æ–≤–µ–π
     * @private
     */
    generateAdaptiveBrowPoints(centerX, centerY, width, height, count, expression) {
        const points = [];
        const leftBrowPoints = Math.ceil(count / 2);
        const rightBrowPoints = count - leftBrowPoints;
        
        // –õ–µ–≤–∞—è –±—Ä–æ–≤—å
        for (let i = 0; i < leftBrowPoints; i++) {
            const t = i / (leftBrowPoints - 1);
            let x = centerX - width * 0.25 + (t - 0.5) * width * 0.5;
            let y = centerY - height * 0.5;
            
            // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø–æ–¥–Ω—è—Ç—ã–µ –±—Ä–æ–≤–∏
            if (expression.browRaised > 0.3) {
                y -= expression.browRaised * height * 0.3;
                const browCurve = Math.sin(t * Math.PI) * height * 0.3 * expression.browRaised;
                y -= browCurve;
            }
            
            points.push([x, y, 0]);
        }
        
        // –ü—Ä–∞–≤–∞—è –±—Ä–æ–≤—å
        for (let i = 0; i < rightBrowPoints; i++) {
            const t = i / (rightBrowPoints - 1);
            let x = centerX + width * 0.25 + (t - 0.5) * width * 0.5;
            let y = centerY - height * 0.5;
            
            // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø–æ–¥–Ω—è—Ç—ã–µ –±—Ä–æ–≤–∏
            if (expression.browRaised > 0.3) {
                y -= expression.browRaised * height * 0.3;
                const browCurve = Math.sin(t * Math.PI) * height * 0.3 * expression.browRaised;
                y -= browCurve;
            }
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –≥–ª–∞–∑
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ –≥–ª–∞–∑
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –≥–ª–∞–∑
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @param {Object} expression - –î–∞–Ω–Ω—ã–µ –º–∏–º–∏–∫–∏
     * @returns {Array} - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –≥–ª–∞–∑
     * @private
     */
    generateAdaptiveEyePoints(centerX, centerY, width, height, count, expression) {
        const points = [];
        const leftEyePoints = Math.ceil(count / 2);
        const rightEyePoints = count - leftEyePoints;
        
        // –õ–µ–≤—ã–π –≥–ª–∞–∑
        for (let i = 0; i < leftEyePoints; i++) {
            const angle = (i / leftEyePoints) * 2 * Math.PI;
            let radiusX = width * 0.12;
            let radiusY = height * 0.25;
            
            // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –≥–ª–∞–∑
            if (expression.eyesOpen < 0.3) {
                radiusY *= 0.3; // –ó–∞–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞
            } else if (expression.eyesOpen > 0.7) {
                radiusY *= 1.3; // –®–∏—Ä–æ–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞
            }
            
            const x = centerX - width * 0.2 + Math.cos(angle) * radiusX;
            const y = centerY + Math.sin(angle) * radiusY;
            
            points.push([x, y, 0]);
        }
        
        // –ü—Ä–∞–≤—ã–π –≥–ª–∞–∑
        for (let i = 0; i < rightEyePoints; i++) {
            const angle = (i / rightEyePoints) * 2 * Math.PI;
            let radiusX = width * 0.12;
            let radiusY = height * 0.25;
            
            // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –≥–ª–∞–∑
            if (expression.eyesOpen < 0.3) {
                radiusY *= 0.3; // –ó–∞–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞
            } else if (expression.eyesOpen > 0.7) {
                radiusY *= 1.3; // –®–∏—Ä–æ–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≥–ª–∞–∑–∞
            }
            
            const x = centerX + width * 0.2 + Math.cos(angle) * radiusX;
            const y = centerY + Math.sin(angle) * radiusY;
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –≥—É–±
     * @param {number} centerX - –¶–µ–Ω—Ç—Ä X
     * @param {number} centerY - –¶–µ–Ω—Ç—Ä Y
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –≥—É–±
     * @param {number} height - –í—ã—Å–æ—Ç–∞ –≥—É–±
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
     * @param {Object} expression - –î–∞–Ω–Ω—ã–µ –º–∏–º–∏–∫–∏
     * @returns {Array} - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –≥—É–±
     * @private
     */
    generateAdaptiveLipPoints(centerX, centerY, width, height, count, expression) {
        const points = [];
        
        for (let i = 0; i < count; i++) {
            const t = i / count;
            const angle = t * 2 * Math.PI;
            
            let radiusX = width / 2;
            let radiusY = height / 2;
            
            // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–æ—Ç
            if (expression.mouthOpen > 0.3) {
                radiusY *= (1 + expression.mouthOpen * 1.5);
            }
            
            // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —É–ª—ã–±–∫—É
            if (expression.smiling > 0.3) {
                radiusX *= (1 + expression.smiling * 0.3);
                // –ü–æ–¥–Ω–∏–º–∞–µ–º —É–≥–æ–ª–∫–∏ –≥—É–±
                if (Math.sin(angle) > 0.7 || Math.sin(angle) < -0.7) {
                    const cornerLift = expression.smiling * height * 0.2;
                    centerY -= cornerLift;
                }
            }
            
            const x = centerX + Math.cos(angle) * radiusX;
            const y = centerY + Math.sin(angle) * radiusY;
            
            points.push([x, y, 0]);
        }
        
        return points;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     * @param {Array} landmarks - –¢–æ—á–∫–∏ –ª–∏—Ü–∞
     * @param {Object} faceRegion - –û–±–ª–∞—Å—Ç—å –ª–∏—Ü–∞
     * @param {Object} expression - –î–∞–Ω–Ω—ã–µ –º–∏–º–∏–∫–∏
     * @returns {Object} - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     * @private
     */
    generateAdaptiveAnnotations(landmarks, faceRegion, expression) {
        const { centerX, centerY, width: faceWidth, height: faceHeight } = faceRegion;
        
        // –ë–∞–∑–æ–≤—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–æ–¥ –º–∏–º–∏–∫—É
        const annotations = {
            silhouette: landmarks.slice(0, 17) || [[centerX, centerY, 0]],
            lipsUpperOuter: landmarks.slice(48, 55) || [[centerX, centerY + faceHeight * 0.25, 0]],
            lipsLowerOuter: landmarks.slice(55, 60) || [[centerX, centerY + faceHeight * 0.3, 0]],
            lipsUpperInner: landmarks.slice(60, 65) || [[centerX, centerY + faceHeight * 0.25, 0]],
            lipsLowerInner: landmarks.slice(65, 68) || [[centerX, centerY + faceHeight * 0.3, 0]],
            rightEyeUpper0: landmarks.slice(36, 40) || [[centerX + faceWidth * 0.2, centerY - faceHeight * 0.15, 0]],
            rightEyeLower0: landmarks.slice(40, 42) || [[centerX + faceWidth * 0.2, centerY - faceHeight * 0.1, 0]],
            leftEyeUpper0: landmarks.slice(42, 46) || [[centerX - faceWidth * 0.2, centerY - faceHeight * 0.15, 0]],
            leftEyeLower0: landmarks.slice(46, 48) || [[centerX - faceWidth * 0.2, centerY - faceHeight * 0.1, 0]],
            rightEyebrowUpper: landmarks.slice(17, 22) || [[centerX + faceWidth * 0.2, centerY - faceHeight * 0.35, 0]],
            leftEyebrowUpper: landmarks.slice(22, 27) || [[centerX - faceWidth * 0.2, centerY - faceHeight * 0.35, 0]],
            noseTip: landmarks.slice(30, 31) || [[centerX, centerY + faceHeight * 0.05, 0]],
            noseBottom: landmarks.slice(31, 36) || [[centerX, centerY + faceHeight * 0.1, 0]]
        };
        
        return annotations;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.FaceMeshDetector = FaceMeshDetector;