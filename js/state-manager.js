/**
 * State Manager - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã race conditions –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤
 */

class StateManager {
    constructor() {
        this.isResetting = false;
        console.log('StateManager initialized');
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     * –†–µ—à–∞–µ—Ç –±–∞–≥ —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Ç—Ä–µ–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–µ–π—Ä–æ–°–æ–≤–µ—Ç—É
     */
    async performHardReset() {
        if (this.isResetting) {
            console.log('StateManager: Reset already in progress, skipping');
            return;
        }

        this.isResetting = true;
        console.log('üîÑ StateManager: Starting HARD RESET of all components');

        try {
            try {
                console.log('1. Resetting AudioEngine...');
                if (window.audioEngine) {
                    await window.audioEngine.reset();
                    console.log('‚úÖ AudioEngine reset complete');
                }
            } catch (e) {
                console.error('CRITICAL FAILURE during AudioEngine reset:', e);
                throw e; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
            }

            try {
                console.log('2. Resetting LyricsDisplay...');
                if (window.lyricsDisplay && typeof window.lyricsDisplay.fullReset === 'function') {
                    window.lyricsDisplay.fullReset();
                    console.log('‚úÖ LyricsDisplay full reset complete');
                }
            } catch (e) {
                console.error('CRITICAL FAILURE during LyricsDisplay reset:', e);
                throw e;
            }

            try {
                console.log('3. Resetting TextStyleManager...');
                if (window.textStyleManager && typeof window.textStyleManager.reset === 'function') {
                    window.textStyleManager.reset();
                    console.log('‚úÖ TextStyleManager reset complete.');
                }
            } catch (e) {
                console.error('CRITICAL FAILURE during TextStyleManager reset:', e);
                throw e;
            }
            
            // üîß –ù–û–í–´–ô: Transport Controls cleanup
            try {
                console.log('4. Cleaning up Transport Controls...');
                if (window.app && typeof window.app._cleanupTransportToggle === 'function') {
                    window.app._cleanupTransportToggle();
                    console.log('‚úÖ Transport Controls cleanup complete');
                }
            } catch (e) {
                console.error('Warning: Transport Controls cleanup failed:', e);
                // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
            }
            
            // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏

            console.log('üéâ StateManager: HARD RESET completed successfully');
            
        } catch (error) {
            console.error('‚ùå StateManager: HARD RESET FAILED.', error.stack || error);
        } finally {
            this.isResetting = false;
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ
     * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–≥ —Å "–≤–∏—Å—è—â–∏–º" —Å—Ç–∞—Ä—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
     */
    forceTextRerender() {
        if (!window.lyricsDisplay) {return;}
        
        console.log('üé® StateManager: Forcing text rerender in current mode');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏–∑ app.js
        const currentMode = window.app?.currentMode || 'concert';
        
        if (currentMode === 'concert') {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            console.log('üé≠ Forcing concert mode rerender');
            if (window.lyricsDisplay._renderLyrics) {
                window.lyricsDisplay._renderLyrics();
                console.log('‚úÖ Concert mode text rerendered');
            }
        } else if (currentMode === 'karaoke') {
            // –ö–∞—Ä–∞–æ–∫–µ —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            console.log('üé§ Karaoke mode detected, should work correctly');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
     */
    async waitForComponentsReady() {
        const maxWait = 1000; // –ú–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        const checkInterval = 50; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 50–º—Å
        let waited = 0;

        while (waited < maxWait) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã
            const audioReady = !window.audioEngine?._isPlaying;
            const lyricsReady = !window.lyricsDisplay?.isRendering;
            
            if (audioReady && lyricsReady) {
                console.log('‚úÖ All components ready for new track');
                return true;
            }

            await new Promise(resolve => setTimeout(resolve, checkInterval));
            waited += checkInterval;
        }

        console.warn('‚ö†Ô∏è Components readiness timeout, proceeding anyway');
        return false;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const stateManager = new StateManager();
window.stateManager = stateManager;

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å app.js
window.StateManager = StateManager;

console.log('üì¶ StateManager module loaded'); 