// –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê–í–ò–ì–ê–¶–ò–ò –ü–û –ù–û–¢–ê–ú
// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤ js/piano-keyboard.js

// 1. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î findNoteInPitchMap (—Å—Ç—Ä–æ–∫–∞ ~2030)
findNoteInPitchMap(currentTime, direction) {
    const notes = this.pitchMap.notes;
    
    if (!notes || notes.length === 0) {
        console.warn('‚ö†Ô∏è –ü–∏—Ç—á-–∫–∞—Ä—Ç–∞ –ø—É—Å—Ç–∞!');
        return null;
    }

    console.log(`üîç –ü–æ–∏—Å–∫ –Ω–æ—Ç—ã: –≤—Ä–µ–º—è=${currentTime.toFixed(2)}—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ=${direction === 1 ? '–≤–ø–µ—Ä–µ–¥' : '–Ω–∞–∑–∞–¥'}, –≤—Å–µ–≥–æ –Ω–æ—Ç=${notes.length}`);
    
    if (direction === 1) {
        // –í–ü–ï–†–ï–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫
        let currentIndex = this.pitchMap.currentIndex || 0;
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
        if (currentIndex === 0 || !this.pitchMap.hasOwnProperty('currentIndex')) {
            for (let i = 0; i < notes.length; i++) {
                if (notes[i].time >= currentTime) {
                    currentIndex = i;
                    break;
                }
            }
        }
        
        // –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ—Ç—É
        let nextIndex = currentIndex + 1;
        if (nextIndex >= notes.length) {
            // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ - –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ—Ç–µ
            nextIndex = notes.length - 1;
            console.log(`üîö –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–∞—Ä—Ç—ã, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –Ω–æ—Ç–µ ${nextIndex}`);
        }
        
        this.pitchMap.currentIndex = nextIndex;
        const foundNote = notes[nextIndex];
        console.log(`‚û°Ô∏è –ù–∞–π–¥–µ–Ω–∞ –Ω–æ—Ç–∞ –≤–ø–µ—Ä–µ–¥: ${foundNote.keyId} –≤ ${foundNote.time.toFixed(2)}—Å (–∏–Ω–¥–µ–∫—Å ${nextIndex})`);
        return foundNote;
        
    } else {
        // –ù–ê–ó–ê–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫
        let currentIndex = this.pitchMap.currentIndex || 0;
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
        if (currentIndex === 0 || !this.pitchMap.hasOwnProperty('currentIndex')) {
            for (let i = notes.length - 1; i >= 0; i--) {
                if (notes[i].time <= currentTime) {
                    currentIndex = i;
                    break;
                }
            }
        }
        
        // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–æ—Ç—É
        let prevIndex = currentIndex - 1;
        if (prevIndex < 0) {
            // –î–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞—á–∞–ª–∞ - –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –Ω–æ—Ç–µ
            prevIndex = 0;
            console.log(`üîö –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω–∞—á–∞–ª–æ –∫–∞—Ä—Ç—ã, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –Ω–æ—Ç–µ 0`);
        }
        
        this.pitchMap.currentIndex = prevIndex;
        const foundNote = notes[prevIndex];
        console.log(`‚¨ÖÔ∏è –ù–∞–π–¥–µ–Ω–∞ –Ω–æ—Ç–∞ –Ω–∞–∑–∞–¥: ${foundNote.keyId} –≤ ${foundNote.time.toFixed(2)}—Å (–∏–Ω–¥–µ–∫—Å ${prevIndex})`);
        return foundNote;
    }
}

// 2. –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î simulateNoteFromPitchMap (—Å—Ç—Ä–æ–∫–∞ ~1776)
simulateNoteFromPitchMap(noteRecord) {
    console.log(`üé≠ –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ—Ç—ã –∏–∑ –∫–∞—Ä—Ç—ã: ${noteRecord.keyId} (${noteRecord.frequency.toFixed(1)}Hz)`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–æ—Ç—ã
    this.forceStopAllKeys('map_simulation');
    
    // –°–æ–∑–¥–∞–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é" –Ω–æ—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const simulatedPitchData = {
        frequency: noteRecord.frequency,
        clarity: noteRecord.maxClarity || noteRecord.clarity || 0.8,
        amplitude: 0.3, // –°—Ä–µ–¥–Ω—è—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        timestamp: performance.now(),
        isSimulated: true, // –§–ª–∞–≥ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–æ—Ç—ã
        fromPitchMap: true, // –§–ª–∞–≥ –Ω–æ—Ç—ã –∏–∑ –∫–∞—Ä—Ç—ã
        protectedFromUpdate: true // –ó–ê–©–ò–¢–ê –û–¢ –û–ë–ù–û–í–õ–ï–ù–ò–ô
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–∫ –æ–±—ã—á–Ω—É—é –Ω–æ—Ç—É
    this.startNewNote(noteRecord.keyId, simulatedPitchData);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–æ—Ç—ã
    if (this.currentActiveNote) {
        this.currentActiveNote.isSimulated = true;
        this.currentActiveNote.fromPitchMap = true;
        this.currentActiveNote.originalTime = noteRecord.time;
        this.currentActiveNote.originalDuration = noteRecord.duration;
        this.currentActiveNote.protectedFromCleanup = true;
        this.currentActiveNote.protectedFromUpdate = true; // –ù–û–í–ê–Ø –ó–ê–©–ò–¢–ê
        
        // –§–ò–ö–°–ò–†–£–ï–ú –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–¨ - –ù–ï –ü–û–ó–í–û–õ–Ø–ï–ú –ï–ô –†–ê–°–¢–ò
        this.currentActiveNote.lastDetection = this.currentActiveNote.startTime;
    }
    
    console.log(`‚ú® –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ—Ç–∞ ${noteRecord.keyId} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–ó–ê–©–ò–©–ï–ù–ê –û–¢ –û–ë–ù–û–í–õ–ï–ù–ò–ô)`);
}

// 3. –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î updateExistingNote (—Å—Ç—Ä–æ–∫–∞ ~989)
updateExistingNote(keyId, pitchData) {
    const { frequency, clarity, amplitude, timestamp } = pitchData;
    const noteData = this.activeNotes.get(keyId);
    
    if (!noteData) return;
    
    // –£–°–ò–õ–ï–ù–ù–ê–Ø –ó–ê–©–ò–¢–ê –°–ò–ú–£–õ–ò–†–û–í–ê–ù–ù–´–• –ù–û–¢
    if (noteData.isSimulated || 
        noteData.fromPitchMap || 
        noteData.protectedFromCleanup ||
        noteData.protectedFromUpdate) {
        console.log(`üõ°Ô∏è –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ—Ç–∞ ${keyId} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–æ—Ç
    noteData.lastDetection = timestamp;
    noteData.maxClarity = Math.max(noteData.maxClarity, clarity);
    noteData.maxAmplitude = Math.max(noteData.maxAmplitude, amplitude);
    noteData.detectionCount++;
    noteData.currentFrequency = frequency;
    
    // –ö–∞–∂–¥—ã–µ 10 –¥–µ—Ç–µ–∫—Ü–∏–π –ª–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (noteData.detectionCount % 10 === 0) {
        const duration = timestamp - noteData.startTime;
        console.log(`üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï ${keyId}: ${duration.toFixed(0)}–º—Å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${noteData.detectionCount}, —Ç–æ—á–Ω–æ—Å—Ç—å: ${(clarity*100).toFixed(1)}%`);
    }
} 