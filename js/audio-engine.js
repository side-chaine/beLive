/**
 * Audio Engine for Text application
 * Handles audio playback using single streaming HTML5 Audio (Sprint Engine).
 * Phase 1: Reliable instrumental-only playback to eliminate sync issues.
 */

class AudioEngine {
    constructor() {
        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        this.instrumentalGain = this.audioContext.createGain();
        this.vocalsGain = this.audioContext.createGain();
        this.microphoneGain = this.audioContext.createGain();
        
        this.instrumentalGain.connect(this.audioContext.destination);
        this.vocalsGain.connect(this.audioContext.destination);
        this.microphoneGain.connect(this.audioContext.destination);
        
        this._isPlaying = false;
        this.duration = 0;
        this.pauseTime = 0;

        // Dual streaming audio elements (Hybrid Engine)
        this.instrumentalAudio = null;
        this.vocalsAudio = null;

        // Web Audio API sources from <audio> elements
        this.instrumentalSourceNode = null;
        this.vocalsSourceNode = null;
        
        this.activeBlobUrls = [];
        
        this._onTrackLoadedCallbacks = [];
        this._onPositionUpdateCallbacks = [];
        this._positionUpdateInterval = null;
        
        this.loopActive = false;
        this.loopStart = null;
        this.loopEnd = null;
        
        this.microphoneEnabled = false;
        this.microphoneVolume = 0.7;
        this.microphoneSource = null;
        this.microphoneStream = null;
        this.microphoneGain.gain.value = this.microphoneVolume;
        
        console.log("üöÄ AudioEngine (Hybrid Engine) - –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        this._setupEventListeners();

        // –°–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this._syncNudgeInterval = null;   // –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –º–µ–ª–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        this._seekInProgress = false;     // –±–∞—Ä—å–µ—Ä seek
        this._lastSeekTime = 0;           // –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç seek

        // –ö–æ–ª–±—ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
        this._onBothEndedCallbacks = [];
    }

    // ===== –ú–ò–ö–†–û–§–û–ù: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º =====
    async enableMicrophone() {
        try {
            if (this.microphoneEnabled) { return { enabled: true, volume: this.microphoneVolume }; }
            // –•—Ä–∞–Ω–∏–º –æ–¥–∏–Ω stream –≤–æ –≤—Å—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if (!this.microphoneStream) {
                this.microphoneStream = await navigator.mediaDevices.getUserMedia({
                    audio: { echoCancellation: false, noiseSuppression: false, autoGainControl: false }
                });
            }
            if (!this.microphoneSource) {
                this.microphoneSource = this.audioContext.createMediaStreamSource(this.microphoneStream);
            }
            try { this.microphoneSource.disconnect(); } catch(_) {}
            this.microphoneSource.connect(this.microphoneGain);
            this.microphoneEnabled = true;
            this._emitMicState();
            return { enabled: true, volume: this.microphoneVolume };
        } catch (e) {
            console.warn('Microphone enable failed:', e);
            this.microphoneEnabled = false;
            this._emitMicState();
            throw e;
        }
    }

    disableMicrophone() {
        try {
            // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stream, —á—Ç–æ–±—ã Chrome –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
            try { this.microphoneSource && this.microphoneSource.disconnect(); } catch(_) {}
        } finally {
            this.microphoneEnabled = false;
            this._emitMicState();
        }
    }

    toggleMicrophone() {
        return this.microphoneEnabled ? (this.disableMicrophone(), { enabled: false, volume: this.microphoneVolume }) : this.enableMicrophone();
    }

    setMicrophoneVolume(volume) {
        this.microphoneVolume = Math.max(0, Math.min(1, volume));
        if (this.microphoneGain) { this.microphoneGain.gain.value = this.microphoneVolume; }
        this._emitMicState();
    }

    getMicrophoneState() {
        return { enabled: !!this.microphoneEnabled, volume: this.microphoneVolume };
    }

    _emitMicState() {
        const evt = new CustomEvent('microphone-state-changed', { detail: { enabled: !!this.microphoneEnabled, volume: this.microphoneVolume } });
        document.dispatchEvent(evt);
    }
    
    _setupEventListeners() {
        // This method sets up the space bar handler
        this.boundSpaceHandler = this._handleSpaceBar.bind(this);
        document.addEventListener('keydown', this.boundSpaceHandler);
        console.log("Space bar handler attached");
    }
    
    _handleSpaceBar(event) {
        // Only handle spacebar when we're not in an input field
        console.log("Key pressed:", event.code);
        
        if (event.code === 'Space' && 
            !event.shiftKey &&
            event.target.tagName !== 'INPUT' && 
            event.target.tagName !== 'TEXTAREA') {
            
            event.preventDefault();
            console.log("Space bar pressed, toggling playback");
            
            // Toggle play/pause
            if (this._isPlaying) {
                this.pause();
            } else if (this.instrumentalAudio) { // Check if a track is loaded
                this.play();
            }
        }
    }
    
    /**
     * Add event listener for track loaded event
     * @param {Function} callback - Function to call when track is loaded
     */
    onTrackLoaded(callback) {
        if (typeof callback === 'function') {
            this._onTrackLoadedCallbacks.push(callback);
        }
    }
    
    /**
     * Add event listener for position update events
     * @param {Function} callback - Function to call with the current position
     */
    onPositionUpdate(callback) {
        if (typeof callback === 'function') {
            this._onPositionUpdateCallbacks.push(callback);
            
            // Start position update interval if not already running
            this._startPositionUpdateInterval();
        }
    }
    
    /**
     * Remove event listener
     * @param {string} eventType - Event type ('trackLoaded' or 'positionUpdate')
     * @param {Function} callback - The callback to remove
     */
    removeEventListener(eventType, callback) {
        if (eventType === 'trackLoaded') {
            this._onTrackLoadedCallbacks = this._onTrackLoadedCallbacks.filter(cb => cb !== callback);
        } else if (eventType === 'positionUpdate') {
            this._onPositionUpdateCallbacks = this._onPositionUpdateCallbacks.filter(cb => cb !== callback);
            
            // Stop interval if no listeners remain
            if (this._onPositionUpdateCallbacks.length === 0) {
                this._stopPositionUpdateInterval();
            }
        }
    }
    
    /**
     * Start interval to update position
     * @private
     */
    _startPositionUpdateInterval() {
        if (this._positionUpdateInterval) {return;}
        
        this._positionUpdateInterval = setInterval(() => {
            const currentTime = this.getCurrentTime();
            
            this._onPositionUpdateCallbacks.forEach(callback => {
                try {
                    callback(currentTime);
                } catch (e) {
                    console.error('Error in position update callback:', e);
                }
            });
        }, 50); // Update every 50ms
    }
    
    /**
     * Stop position update interval
     * @private
     */
    _stopPositionUpdateInterval() {
        if (this._positionUpdateInterval) {
            clearInterval(this._positionUpdateInterval);
            this._positionUpdateInterval = null;
        }
    }
    
    /**
     * Notify track loaded callbacks
     * @private
     */
    _notifyTrackLoaded() {
        const detail = {
            duration: this.duration,
            hasVocals: false
        };
        
        const event = new CustomEvent('track-loaded', { detail });
        document.dispatchEvent(event);
        
        this._onTrackLoadedCallbacks.forEach(callback => {
            try {
                callback(detail);
            } catch (e) {
                console.error('Error in track loaded callback:', e);
            }
        });
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª + –≤–æ–∫–∞–ª)
     * @param {Function} callback
     */
    onBothEnded(callback) {
        if (typeof callback === 'function') {
            this._onBothEndedCallbacks.push(callback);
        }
        return () => {
            this._onBothEndedCallbacks = this._onBothEndedCallbacks.filter(cb => cb !== callback);
        };
    }

    _emitBothEndedOnce() {
        try {
            this._onBothEndedCallbacks.forEach(cb => {
                try { cb(); } catch (e) { console.warn('onBothEnded callback error', e); }
            });
        } catch(_) {}
    }
    
    /**
     * Load a track into the audio engine using hybrid streaming.
     * Instrumental loads first for quick start, vocals load in parallel.
     * @param {string} instrumentalUrl - URL to instrumental audio file
     * @param {string} vocalsUrl - URL to vocals audio file
     * @returns {Promise} - Resolves with track info when instrumental is loaded
     */
    async loadTrack(instrumentalUrl, vocalsUrl = null) {
        console.log('üöÄ –ì–ò–ë–†–ò–î: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞');
        console.time('‚è±Ô∏è HYBRID_ENGINE_LOAD_TIME');

        this.stop(); // Stop any previous track

        // Create instrumental audio element (priority)
        this.instrumentalAudio = new Audio();
        this.instrumentalAudio.crossOrigin = "anonymous";

        // Track blob URLs for cleanup
        if (instrumentalUrl.startsWith('blob:')) {this.activeBlobUrls.push(instrumentalUrl);}

        // Create a promise that resolves when the instrumental is ready to play
        const instrumentalReadyPromise = new Promise((resolve, reject) => {
            this.instrumentalAudio.addEventListener('loadedmetadata', () => {
                this.duration = this.instrumentalAudio.duration;
                console.log(`‚úÖ –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–õ –ì–û–¢–û–í! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${this.duration.toFixed(2)}—Å`);
                resolve();
            });
            this.instrumentalAudio.addEventListener('error', (e) => {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª–∞:", e);
                reject('Instrumental loading failed');
            });
        });

        // Set source to start loading instrumental
        this.instrumentalAudio.src = instrumentalUrl;

        // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ URL –¥–ª—è WaveformEditor –°–†–ê–ó–£
        const safeInstrumentalUrl = await this._createSafeUrlFromOriginal(instrumentalUrl);
        let safeVocalsUrl = null;
        
        if (vocalsUrl) {
            safeVocalsUrl = await this._createSafeUrlFromOriginal(vocalsUrl);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º hybridEngine —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ URL
        this.hybridEngine = {
            instrumentalUrl: safeInstrumentalUrl,  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π URL –¥–ª—è WaveformEditor
            vocalsUrl: safeVocalsUrl,             // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π URL –¥–ª—è WaveformEditor
            originalInstrumentalUrl: instrumentalUrl,  // –ò—Å—Ö–æ–¥–Ω—ã–π URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            originalVocalsUrl: vocalsUrl              // –ò—Å—Ö–æ–¥–Ω—ã–π URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        };

        // –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ‚Äî –º—è–≥–∫–æ –æ—Ç–∫–ª—é—á–∏–º —Å—Ç–∞—Ä—ã–π –≤–æ–∫–∞–ª (–µ—Å–ª–∏ –±—ã–ª)
        try {
            if (this.vocalsSourceNode) {
                this.vocalsSourceNode.disconnect();
            }
        } catch(_) {}
        this.vocalsSourceNode = null;
        this.vocalsAudio = null;

        // Load vocals in parallel if provided
        let vocalsReadyPromise = Promise.resolve();
        
            if (vocalsUrl) {
            this.vocalsAudio = new Audio();
            this.vocalsAudio.crossOrigin = "anonymous";
            
            if (vocalsUrl.startsWith('blob:')) {this.activeBlobUrls.push(vocalsUrl);}

            vocalsReadyPromise = new Promise((resolve, reject) => {
                this.vocalsAudio.addEventListener('error', (e) => {
                    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–∫–∞–ª–∞:", e);
                    console.warn("üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ instrumental-only —Ä–µ–∂–∏–º");
                    
                    // –û—á–∏—â–∞–µ–º –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤–æ–∫–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    this.vocalsAudio = null;
                    this.vocalsSourceNode = null;
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ fallback —Ä–µ–∂–∏–º–µ –¢–û–õ–¨–ö–û –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if (window.app && window.app.showVocalError) {
                        window.app.showVocalError("–í–æ–∫–∞–ª—å–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª.");
                    }
                    
                    // Resolve –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ instrumental-only
                    resolve({ mode: 'instrumental-only', hasVocals: false });
                });
                
                // üîß –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–∫–∞–ª–∞
                this.vocalsAudio.addEventListener('loadedmetadata', () => {
                    console.log(`‚úÖ –í–û–ö–ê–õ –ì–û–¢–û–í! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${this.vocalsAudio.duration.toFixed(2)}—Å`);
                    
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                    if (window.app && window.app.enableVocalControls) {
                        window.app.enableVocalControls();
                    }
                    
                    resolve({ mode: 'dual-track', hasVocals: true });
                });
            });

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: –∏–∑–±–µ–≥–∞–µ–º blob:null, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π URL –∫–∞–∫ fallback
            let playbackVocalsUrl = vocalsUrl;
            if (playbackVocalsUrl.startsWith('blob:null') && safeVocalsUrl) {
                playbackVocalsUrl = safeVocalsUrl;
            }
            this.vocalsAudio.src = playbackVocalsUrl;

            // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –º–æ–ª—á–∞–ª–∏–≤–æ–π –Ω–µ—É–¥–∞—á–∏: –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π URL
            if (safeVocalsUrl && safeVocalsUrl !== playbackVocalsUrl) {
                setTimeout(() => {
                    try {
                        if (this.vocalsAudio && this.vocalsAudio.readyState < 1) {
                            console.warn('‚è≥ –í–æ–∫–∞–ª –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤–æ–≤—Ä–µ–º—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π data URL');
                            this.vocalsAudio.src = safeVocalsUrl;
                        }
                    } catch(_) {}
                }, 1200);
            }
        }

        // Wait for instrumental to be ready (vocals can load in background)
        await instrumentalReadyPromise;

        // Connect to Web Audio API
        if (!this.instrumentalSourceNode) {
            this.instrumentalSourceNode = this.audioContext.createMediaElementSource(this.instrumentalAudio);
            this.instrumentalSourceNode.connect(this.instrumentalGain);
        }

        // Connect vocals when ready (non-blocking)
        if (vocalsUrl && this.vocalsAudio) {
            vocalsReadyPromise.then((result) => {
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∫–∞–ª —Ä–µ–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
                if (!this.vocalsSourceNode && this.vocalsAudio && this.vocalsAudio.src) {
                    try {
                        this.vocalsSourceNode = this.audioContext.createMediaElementSource(this.vocalsAudio);
                        this.vocalsSourceNode.connect(this.vocalsGain);
                        console.log('üé§ –í–û–ö–ê–õ –ü–û–î–ö–õ–Æ–ß–ï–ù –∫ –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç—É');
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–æ–∫–∞–ª–∞ –∫ Web Audio:', error);
                        this.vocalsAudio = null;
                        this.vocalsSourceNode = null;
                    }
                } else if (result && result.mode === 'instrumental-only') {
                    console.log('üéØ –†–µ–∂–∏–º instrumental-only –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                }
            }).catch((error) => {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–∫–∞–ª–∞:', error);
                this.vocalsAudio = null;
                this.vocalsSourceNode = null;
            });
        }

        console.timeEnd('‚è±Ô∏è HYBRID_ENGINE_LOAD_TIME');
        console.log('üéØ –ì–ò–ë–†–ò–î: –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞!');

            this._notifyTrackLoaded();
            
            // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä ‚Äî –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª–∞
            if (this.instrumentalAudio) {
                this.instrumentalAudio.onended = () => {
                    const tryEmit = () => {
                        const vocalsDone = !this.vocalsAudio || this.vocalsAudio.ended || (this.vocalsAudio.readyState >= 2 && Math.abs((this.vocalsAudio.duration || 0) - (this.vocalsAudio.currentTime || 0)) < 0.25);
                        if (vocalsDone) {
                            this._emitBothEndedOnce();
                        } else if (this.vocalsAudio) {
                            const once = () => { this.vocalsAudio?.removeEventListener('ended', once); this._emitBothEndedOnce(); };
                            this.vocalsAudio.addEventListener('ended', once, { once: true });
                        } else {
                            this._emitBothEndedOnce();
                        }
                    };
                    tryEmit();
                };
            }
            
            return {
            duration: this.duration,
            hasVocals: !!vocalsUrl
        };
    }
    
    /**
     * Get audio data (not applicable for streaming version, returns null)
     */
    getAudioData(useVocals = true) {
        console.warn('getAudioData is not supported in streaming mode.');
        return null;
    }
    
    /**
     * Get audio buffer (not applicable for streaming version, returns null)
     */
    getAudioBuffer(useVocals = true) {
        console.warn('getAudioBuffer is not supported in streaming mode.');
        return null;
    }
    
    hasVocals() {
        // Phase 1: Always false since we only load instrumental
        return false;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ (—Å–µ–∫—É–Ω–¥—ã)
     * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback: —Å–ø–µ—Ä–≤–∞ internal duration, –∑–∞—Ç–µ–º –∏–∑ audio —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    getDuration() {
        if (typeof this.duration === 'number' && this.duration > 0) {
            return this.duration;
        }
        if (this.instrumentalAudio && typeof this.instrumentalAudio.duration === 'number') {
            return this.instrumentalAudio.duration || 0;
        }
        return 0;
    }

    /**
     * Set loop points for playback
     * @param {number} startTime - start time in seconds
     * @param {number} endTime - end time in seconds
     */
    setLoop(startTime, endTime) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (isNaN(startTime) || isNaN(endTime) || startTime < 0 || endTime <= startTime) {
                console.warn(`AudioEngine: Invalid loop points: ${startTime}s - ${endTime}s`);
            return false;
        }
        
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Ç—Ä–µ–∫–∞
            const safeStartTime = Math.max(0, Math.min(startTime, this.duration));
            const safeEndTime = Math.min(endTime, this.duration);
            
            console.log(`AudioEngine: Loop points set to ${safeStartTime.toFixed(2)}s - ${safeEndTime.toFixed(2)}s`);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
            this.loopStart = safeStartTime;
            this.loopEnd = safeEndTime;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            this.loopErrors = 0;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
        this._setupLoopCheck();
        
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
            const event = new CustomEvent('loop-set', {
                detail: {
                    startTime: safeStartTime,
                    endTime: safeEndTime
                }
            });
            document.dispatchEvent(event);
        
        return true;
        } catch (error) {
            console.error('AudioEngine: Error setting loop:', error);
            return false;
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç —Ç–æ—á–∫–∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
     */
    clearLoop() {
        console.log('AudioEngine: Clearing loop');
        
        try {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
            this.loopStart = null;
            this.loopEnd = null;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (this.instrumentalSourceNode) {
                this.instrumentalSourceNode.disconnect();
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
            this.loopErrors = 0;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å–±—Ä–æ—Å–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
            const event = new CustomEvent('loop-cleared', {
                detail: {
                    time: this.getCurrentTime()
                }
            });
            document.dispatchEvent(event);
            
            return true;
        } catch (error) {
            console.error('AudioEngine: Error clearing loop:', error);
            return false;
        }
    }
    
    /**
     * Sets up the loop check interval
     * @private
     */
    _setupLoopCheck() {
        if (this._loopCheckInterval) {
            clearInterval(this._loopCheckInterval);
            this._loopCheckInterval = null;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏–∫–ª–∞ –∫–∞–∂–¥—ã–µ 50 –º—Å
        this._loopCheckInterval = setInterval(() => {
            if (!this._isPlaying) {
                return;
            }
            
            try {
                const currentTime = this.getCurrentTime();
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥
                if (this._lastSeekTime && (Date.now() - this._lastSeekTime) < 300) {
                    return;
                }
                
                // –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ü–∏–∫–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
                if (currentTime >= this.loopEnd - 0.01) {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º toFixed
                    const currentTimeStr = currentTime ? currentTime.toFixed(2) : '0.00';
                    const loopStartStr = this.loopStart ? this.loopStart.toFixed(2) : '0.00';
                    
                    console.log(`Loop triggered at ${currentTimeStr}s, returning to ${loopStartStr}s`);
                    this._lastSeekTime = Date.now();
                    this.setCurrentTime(this.loopStart);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ü–∏–∫–ª–∞
                    this._dispatchLoopEvent(currentTime, this.loopStart);
                }
            } catch (error) {
                console.error('AudioEngine: Error in loop check:', error);
            }
        }, 50);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ü–∏–∫–ª–∞
     * @param {number} fromTime - –í—Ä–µ–º—è –¥–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
     * @param {number} toTime - –í—Ä–µ–º—è –ø–æ—Å–ª–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
     * @private
     */
    _dispatchLoopEvent(fromTime, toTime) {
        const event = new CustomEvent('loopcompleted', {
            detail: {
                previousTime: fromTime,
                newTime: toTime,
                loopStart: this.loopStart,
                loopEnd: this.loopEnd
            }
        });
        document.dispatchEvent(event);
    }
    
    /**
     * Play the current track (instrumental + vocals in sync)
     * @returns {Promise} - Resolves when playback starts
     */
    async play() {
        if (!this.instrumentalAudio) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞');
            return;
        }
        
        try {
            // Ensure audio context is resumed
        if (this.audioContext.state === 'suspended') {
                await this.audioContext.resume();
            }

            // Play instrumental first (master timing)
            await this.instrumentalAudio.play();
            console.log('‚ñ∂Ô∏è –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–õ: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ');

            // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª –≤ —Å–∏–Ω—Ö—Ä–æ–Ω
            await this._ensureVocalsPlayingSync();

            this.isPlaying = true;
            this._notifyPlaybackStateChanged();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –º–µ–ª–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∞
            this._startSyncNudger();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
            throw error;
        }
    }
    
    /**
     * Pause the current track (both streams)
     */
    pause() {
        if (this.instrumentalAudio) {
            this.instrumentalAudio.pause();
            console.log('‚è∏Ô∏è –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–õ: –ü–∞—É–∑–∞');
        }
        
        if (this.vocalsAudio) {
            this.vocalsAudio.pause();
            console.log('‚è∏Ô∏è –í–û–ö–ê–õ: –ü–∞—É–∑–∞');
        }

        this.isPlaying = false;
        this._notifyPlaybackStateChanged();
        if (this._syncNudgeInterval) { clearInterval(this._syncNudgeInterval); this._syncNudgeInterval = null; }
    }
    
    /**
     * Stop playback and reset position
     */
    stop() {
        if (this.instrumentalAudio) {
            this.instrumentalAudio.pause();
            this.instrumentalAudio.currentTime = 0;
        }
        
        if (this.vocalsAudio) {
            this.vocalsAudio.pause();
            this.vocalsAudio.currentTime = 0;
        }

        this.isPlaying = false;
        this._notifyPlaybackStateChanged();
        console.log('‚èπÔ∏è –ì–ò–ë–†–ò–î: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–±—Ä–æ—à–µ–Ω');
        if (this._syncNudgeInterval) { clearInterval(this._syncNudgeInterval); this._syncNudgeInterval = null; }
    }
    
    /**
     * Get current playback position in seconds
     * @returns {number} Current time in seconds
     */
    getCurrentTime() {
        return this.instrumentalAudio ? this.instrumentalAudio.currentTime : 0;
    }
    
    /**
     * Set playback position
     * @param {number} time - Time in seconds
     */
    setCurrentTime(time) {
        if (this.instrumentalAudio) {
            this._seekInProgress = true;
            this._lastSeekTime = Date.now();
            this.instrumentalAudio.currentTime = time;
            // Sync vocals if available
            if (this.vocalsAudio) { this.vocalsAudio.currentTime = time; }
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                try {
                    if (this.instrumentalAudio) {
                        const t = this.instrumentalAudio.currentTime;
                        if (this.vocalsAudio && Math.abs((this.vocalsAudio.currentTime || 0) - t) > 0.05) {
                            this.vocalsAudio.currentTime = t;
                        }
                    }
                } finally {
                    this._seekInProgress = false;
                }
            }, 120);
            console.log(`‚è∞ –°–ò–ù–•–†–û: –ü–æ–∑–∏—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ${time.toFixed(2)}—Å`);
        }
    }
    
    _dispatchPositionChangedEvent(previousTime, newTime) {
            const event = new CustomEvent('audio-position-changed', {
                detail: {
                    previousTime: previousTime,
                newTime: newTime
                }
            });
            document.dispatchEvent(event);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ timeupdate –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const timeupdateEvent = new CustomEvent('timeupdate', {
            detail: {
                currentTime: newTime
        }
        });
        document.dispatchEvent(timeupdateEvent);
    }
    
    // Make isPlaying available as a property for compatibility
    get isPlaying() {
        return this._isPlaying === true;
    }
    
    set isPlaying(value) {
        this._isPlaying = value === true;
        console.log(`isPlaying property set to: ${this._isPlaying}`);
    }
    
    /**
     * Set vocals volume (0.0 to 1.0)
     * @param {number} volume - Volume level (0.0 = muted, 1.0 = full)
     */
    setVocalsVolume(volume) {
        if (this.vocalsGain) {
            this.vocalsGain.gain.value = Math.max(0, Math.min(1, volume));
            console.log(`üé§ –í–û–ö–ê–õ: –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ${(volume * 100).toFixed(0)}%`);
        }
    }
    
    /**
     * Set instrumental volume (0.0 to 1.0)
     * @param {number} volume - Volume level (0.0 = muted, 1.0 = full)
     */
    setInstrumentalVolume(volume) {
        if (this.instrumentalGain) {
            this.instrumentalGain.gain.value = Math.max(0, Math.min(1, volume));
            console.log(`üéµ –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–õ: –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ${(volume * 100).toFixed(0)}%`);
        }
    }
    
    /**
     * Update the play/pause button text based on current state
     */
    _updatePlayPauseButton() {
        const playPauseButton = document.getElementById('play-pause');
        if (playPauseButton) {
            playPauseButton.textContent = this._isPlaying ? 'Pause' : 'Play';
            if(this.instrumentalAudio){
                 playPauseButton.disabled = false;
                } else {
                 playPauseButton.disabled = true;
            }
        }
    }
    
    /**
     * Clean up resources
     */
    cleanup() {
        this.stop();
        this.removeEventListener('keydown', this.boundSpaceHandler);
        
        // Revoke old blob URLs
        this.activeBlobUrls.forEach(url => URL.revokeObjectURL(url));
        this.activeBlobUrls = [];
        
        // Disconnect media element source
        if (this.instrumentalSourceNode) {
            this.instrumentalSourceNode.disconnect();
        }
        this.instrumentalAudio = null;
        this.instrumentalSourceNode = null;
        
        console.log('üßπ –°–ü–†–ò–ù–¢–ï–†: –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');
    }

    /**
     * Seek to a specific time in the track
     * @param {number} time - The time to seek to in seconds
     */
    seekTo(time) {
        this.setCurrentTime(time);
    }

    /**
     * Resets the audio engine to its initial state
     */
    reset() {
        console.log('AudioEngine: Starting reset...');
        this.cleanup(); // Use cleanup to stop and disconnect
        
        this._isPlaying = false;
        this.startTime = 0;
        this.pauseTime = 0;
        this.duration = 0;
        
        this.loopActive = false;
        this.loopStart = null;
        this.loopEnd = null;

        console.log('AudioEngine: Reset completed successfully');
    }

    /**
     * Caching logic is not used in streaming mode. These are stubs.
     */
    getCacheStats() {
        console.warn('Caching is not used in streaming mode.');
        return { hits: 0, misses: 0, size: 0 };
    }

    clearCache() {
        console.warn('Caching is not used in streaming mode.');
    }

    _notifyPlaybackStateChanged() {
        // Notify listeners about playback state changes
        const event = new CustomEvent('playback-state-changed', {
            detail: {
                isPlaying: this.isPlaying,
                currentTime: this.getCurrentTime(),
                duration: this.duration
            }
        });
        window.dispatchEvent(event);
    }

    /**
     * Set playback rate (speed) for both audio streams
     * @param {number} rate - Playback rate (0.5 = half speed, 1.0 = normal, 2.0 = double speed)
     */
    setPlaybackRate(rate) {
        // Validate rate (clamp between 0.25 and 4.0)
        const clampedRate = Math.max(0.25, Math.min(4.0, rate));
        
        if (this.instrumentalAudio) {
            this.instrumentalAudio.playbackRate = clampedRate;
            console.log(`üéµ –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–õ: –°–∫–æ—Ä–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ${(clampedRate * 100).toFixed(0)}%`);
        }
        
        if (this.vocalsAudio) {
            this.vocalsAudio.playbackRate = clampedRate;
            console.log(`üé§ –í–û–ö–ê–õ: –°–∫–æ—Ä–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ${(clampedRate * 100).toFixed(0)}%`);
        }
        
        // Notify about playback rate change
        const event = new CustomEvent('playback-rate-changed', {
            detail: { rate: clampedRate }
        });
        document.dispatchEvent(event);
        
        console.log(`‚ö° BPM: –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${(clampedRate * 100).toFixed(0)}%`);
    }
    
    /**
     * Get current playback rate
     * @returns {number} Current playback rate
     */
    getPlaybackRate() {
        if (this.instrumentalAudio) {
            return this.instrumentalAudio.playbackRate;
        }
        return 1.0;
    }

    /**
     * –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∏–∑ AudioContext.destination
     * @returns {MediaStream} - –ó–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫.
     */
    captureStream() {
        if (!this.streamDestination) {
            this.streamDestination = this.audioContext.createMediaStreamDestination();
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —É–∑–ª—ã –∫ —ç—Ç–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
            if (this.instrumentalGain) {this.instrumentalGain.connect(this.streamDestination);}
            if (this.vocalsGain) {this.vocalsGain.connect(this.streamDestination);}
            // –ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –µ–≥–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
            // if (this.microphoneGain) this.microphoneGain.connect(this.streamDestination);
        }
        return this.streamDestination.stream;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π URL –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ blob URL –¥–ª—è WaveformEditor
     * @param {string} originalUrl - –∏—Å—Ö–æ–¥–Ω—ã–π URL (–º–æ–∂–µ—Ç –±—ã—Ç—å blob:null)
     * @returns {Promise<string>} - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π URL
     * @private
     */
    async _createSafeUrlFromOriginal(originalUrl) {
        try {
            if (!originalUrl) {return null;}
            
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ blob URL –∏–ª–∏ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π blob URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if (!originalUrl.startsWith('blob:') || !originalUrl.includes('blob:null/')) {
                return originalUrl;
            }
            
            console.log(`üîß –ë–ï–ó–û–ü–ê–°–ù–´–ô URL: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º blob:null –≤ data URL: ${originalUrl.substring(0, 50)}...`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ blob:null URL
            const response = await fetch(originalUrl);
            const blob = await response.blob();
            
            // –°–æ–∑–¥–∞–µ–º data URL –∫–∞–∫ fallback
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => {
                    console.log(`‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô URL: –°–æ–∑–¥–∞–Ω data URL —Ä–∞–∑–º–µ—Ä–æ–º ${blob.size} –±–∞–π—Ç`);
                    resolve(reader.result);
                };
                reader.onerror = () => reject(new Error('Failed to create data URL from blob'));
                reader.readAsDataURL(blob);
            });
            
        } catch (error) {
            console.error('‚ùå –ë–ï–ó–û–ü–ê–°–ù–´–ô URL: –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
            return originalUrl; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    // ====== –í–ù–£–¢–†–ï–ù–ù–ò–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¢–û–† ======
    async _ensureVocalsPlayingSync(retries = 3) {
        if (!this.vocalsAudio) { return false; }
        try {
            if (!this.vocalsSourceNode && this.vocalsAudio.readyState >= 2) {
                this.vocalsSourceNode = this.audioContext.createMediaElementSource(this.vocalsAudio);
                this.vocalsSourceNode.connect(this.vocalsGain);
                console.log('üé§ –í–û–ö–ê–õ –ü–û–î–ö–õ–Æ–ß–ï–ù (ensure)');
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–æ–∫–∞–ª –∫ AudioContext:', e);
        }
        if (this.vocalsAudio.readyState < 2) {
            if (retries > 0) {
                await new Promise(r => setTimeout(r, 200));
                return this._ensureVocalsPlayingSync(retries - 1);
            }
            return false;
        }
        try {
            this.vocalsAudio.currentTime = this.instrumentalAudio ? this.instrumentalAudio.currentTime : 0;
            await this.vocalsAudio.play();
            console.log('üé§ –í–û–ö–ê–õ: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è');
            if (window.app && window.app.enableVocalControls) {
                window.app.enableVocalControls();
            }
            return true;
        } catch (err) {
            if (retries > 0) {
                console.warn('üîÅ –ü–æ–≤—Ç–æ—Ä —Å—Ç–∞—Ä—Ç–∞ –≤–æ–∫–∞–ª–∞...', err?.name || err);
                await new Promise(r => setTimeout(r, 300 * (4 - retries)));
                return this._ensureVocalsPlayingSync(retries - 1);
            }
            console.warn('‚ö†Ô∏è –í–æ–∫–∞–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞–µ–≤');
            return false;
        }
    }

    _startSyncNudger() {
        if (this._syncNudgeInterval) { clearInterval(this._syncNudgeInterval); }
        this._syncNudgeInterval = setInterval(() => {
            try {
                if (!this._isPlaying || !this.instrumentalAudio) { return; }
                if (!this.vocalsAudio) { return; }
                // –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ seek
                if (this._seekInProgress) { return; }
                const a = this.instrumentalAudio.currentTime || 0;
                const v = this.vocalsAudio.currentTime || 0;
                const delta = v - a;
                if (Math.abs(delta) > 0.09) {
                    this.vocalsAudio.currentTime = a + 0.01;
                }
                // –ï—Å–ª–∏ –≤–æ–∫–∞–ª –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º —Ç–∏—Ö–æ
                if (!this.vocalsAudio.paused && !this.instrumentalAudio.paused) { return; }
                if (!this.vocalsAudio.paused && this.instrumentalAudio.paused) { return; }
                if (this.instrumentalAudio && !this.instrumentalAudio.paused && this.vocalsAudio && this.vocalsAudio.paused) {
                    this._ensureVocalsPlayingSync(1);
                }
            } catch(_) {}
        }, 200);
    }
}

// Create global audio engine instance
const audioEngine = new AudioEngine(); 
window.audioEngine = audioEngine; 