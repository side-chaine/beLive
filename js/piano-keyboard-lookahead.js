// üéµ LOOK-AHEAD –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ü–ò–¢–ß–ê - –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
// –ê–≤—Ç–æ—Ä: AI Assistant, –¥–∞—Ç–∞: 2025

class PitchLookAheadSystem {
    constructor(pianoKeyboard) {
        this.keyboard = pianoKeyboard;
        
        // üéØ CORE –°–ò–°–¢–ï–ú–´ - –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–û–ô –õ–ò–ù–ò–ò VS –ê–†–¢–ï–§–ê–ö–¢–´
        this.lookahead = {
            // –ë—É—Ñ–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (5 —Å–µ–∫—É–Ω–¥ –≤–ø–µ—Ä–µ–¥)
            scanBuffer: [],
            scanWindow: 5.0, // —Å–µ–∫—É–Ω–¥
            analysisResolution: 0.1, // —à–∞–≥ –∞–Ω–∞–ª–∏–∑–∞ 100–º—Å
            
            // –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            mainLineDetector: {
                confidenceThreshold: 0.7,
                stabilityWindow: 1.0, // —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                fundamentalTracker: new Map(), // —á–∞—Å—Ç–æ—Ç–∞ -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π
                harmonicRatios: [0.5, 2.0, 3.0, 4.0], // –æ–±—ã—á–Ω—ã–µ –≥–∞—Ä–º–æ–Ω–∏–∫–∏
            },
            
            // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ—Ç
            noteClassifier: {
                mainLine: [], // –æ—Å–Ω–æ–≤–Ω–∞—è –º–µ–ª–æ–¥–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–∏—è
                artifacts: [], // –≥–∞—Ä–º–æ–Ω–∏–∫–∏, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, –æ—à–∏–±–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
                transitions: [], // –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –Ω–æ—Ç—ã
                sustained: [], // –¥–æ–ª–≥–∏–µ –Ω–æ—Ç—ã
            },
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
            learningStats: {
                analyzedSamples: 0,
                mainLineConfidence: 0,
                artifactRejectRate: 0,
                octaveJumpAnalysis: new Map(),
            }
        };
        
        // üéº –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –° –ì–†–ê–ù–ò–¶–ê–ú–ò
        this.navigation = {
            boundaries: {
                startTime: 0,
                endTime: 0,
                totalNotes: 0,
                validRange: true
            },
            
            currentPosition: {
                index: 0,
                time: 0,
                confidence: 0,
                noteType: 'unknown' // main | artifact | transition
            },
            
            // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            filters: {
                showOnlyMainLine: false,
                skipArtifacts: true,
                groupNearbyNotes: true,
                minNoteDuration: 0.1
            }
        };
        
        // üß† –ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –î–õ–Ø –ü–ê–¢–¢–ï–†–ù–û–í
        this.ml = {
            patterns: {
                commonProgressions: [], // —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                jumpThresholds: new Map(), // –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∫–∞—á–∫–æ–≤
                voiceLeading: [], // –≥–æ–ª–æ—Å–æ–≤–µ–¥–µ–Ω–∏–µ
            },
            
            training: {
                isActive: false,
                samplesNeeded: 100, // –º–∏–Ω–∏–º—É–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                currentSamples: 0,
                adaptiveThresholds: true
            }
        };
    }
    
    // üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø LOOK-AHEAD –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø
    async initializeLookAhead(audioBuffer, trackDuration) {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Look-Ahead —Å–∏—Å—Ç–µ–º—ã...');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.navigation.boundaries = {
            startTime: 0,
            endTime: trackDuration,
            totalNotes: this.keyboard.pitchMap.notes.length,
            validRange: true
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (audioBuffer) {
            await this.performPreScan(audioBuffer);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        this.initializeAdaptiveThresholds();
        
        console.log(`‚úÖ Look-Ahead –≥–æ—Ç–æ–≤: ${this.navigation.boundaries.totalNotes} –Ω–æ—Ç, –¥–∏–∞–ø–∞–∑–æ–Ω ${trackDuration.toFixed(1)}—Å`);
    }
    
    // üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–ï–ì–û –¢–†–ï–ö–ê
    async performPreScan(audioBuffer) {
        console.log('üéµ –ü—Ä–µ–¥—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–Ω–∏–∏...');
        
        const sampleRate = audioBuffer.sampleRate;
        const stepSize = Math.floor(this.lookahead.analysisResolution * sampleRate);
        const windowSize = 2048;
        
        const analysisResults = [];
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º—É —Ç—Ä–µ–∫—É —Å —à–∞–≥–æ–º 100–º—Å
        for (let i = 0; i < audioBuffer.length - windowSize; i += stepSize) {
            const timeStamp = i / sampleRate;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–∫–Ω–æ –∞—É–¥–∏–æ
            const window = audioBuffer.getChannelData(0).slice(i, i + windowSize);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏—Ç—á –≤ —ç—Ç–æ–º –æ–∫–Ω–µ
            const pitchData = await this.analyzePitchWindow(window, sampleRate, timeStamp);
            
            if (pitchData) {
                analysisResults.push(pitchData);
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–Ω–∏–∏
        this.analyzeMainLineVsArtifacts(analysisResults);
        
        console.log(`üìä –ü—Ä–µ–¥—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${analysisResults.length} —Ç–æ—á–µ–∫ –∞–Ω–∞–ª–∏–∑–∞`);
    }
    
    // üéº –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–û–ô –õ–ò–ù–ò–ò VS –ê–†–¢–ï–§–ê–ö–¢–´
    analyzeMainLineVsArtifacts(analysisResults) {
        console.log('üß† –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–Ω–∏–∏ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤...');
        
        // 1. –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ß–ê–°–¢–û–¢–ï –ò –í–†–ï–ú–ï–ù–ò
        const frequencyGroups = this.groupByFrequency(analysisResults);
        
        // 2. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–ê–ë–ò–õ–¨–ù–´–• –õ–ò–ù–ò–ô
        const stableLines = this.findStableFrequencyLines(frequencyGroups);
        
        // 3. –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ù–û–¢
        for (const result of analysisResults) {
            const classification = this.classifyNote(result, stableLines);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            this.lookahead.noteClassifier[classification.type].push({
                ...result,
                confidence: classification.confidence,
                reasoning: classification.reasoning
            });
        }
        
        // 4. –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£
        this.updateLearningStats();
        
        console.log(`üìà –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ${this.lookahead.noteClassifier.mainLine.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö, ${this.lookahead.noteClassifier.artifacts.length} –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤`);
    }
    
    // üéØ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø –° –§–ò–õ–¨–¢–†–ê–ú–ò
    navigateIntelligent(direction, currentTime) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ
        const currentIndex = this.findCurrentPositionIndex(currentTime);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –Ω–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
        let targetNotes = this.getFilteredNotes();
        
        if (targetNotes.length === 0) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–æ—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
            return null;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é/–ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–æ—Ç—É
        let targetIndex = this.findTargetIndex(currentIndex, direction, targetNotes);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        if (targetIndex < 0 || targetIndex >= targetNotes.length) {
            console.log(`üîö –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${direction > 0 ? '–∫–æ–Ω–µ—Ü' : '–Ω–∞—á–∞–ª–æ'}`);
            return null;
        }
        
        const targetNote = targetNotes[targetIndex];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        this.navigation.currentPosition = {
            index: targetIndex,
            time: targetNote.time,
            confidence: targetNote.confidence || 0.8,
            noteType: targetNote.type || 'main'
        };
        
        console.log(`üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è: ${targetNote.keyId} –≤ ${targetNote.time.toFixed(2)}—Å (${targetNote.type})`);
        return targetNote;
    }
    
    // üéµ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ù–û–¢ –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú
    getFilteredNotes() {
        let notes = [];
        
        if (this.navigation.filters.showOnlyMainLine) {
            notes = [...this.lookahead.noteClassifier.mainLine];
        } else {
            // –í–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏–Ω–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã, –∏—Å–∫–ª—é—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            notes = [
                ...this.lookahead.noteClassifier.mainLine,
                ...this.lookahead.noteClassifier.transitions
            ];
            
            if (!this.navigation.filters.skipArtifacts) {
                notes.push(...this.lookahead.noteClassifier.artifacts);
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (this.navigation.filters.minNoteDuration > 0) {
            notes = notes.filter(note => 
                (note.duration || 0.1) >= this.navigation.filters.minNoteDuration
            );
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±–ª–∏–∑–∫–∏—Ö –Ω–æ—Ç
        if (this.navigation.filters.groupNearbyNotes) {
            notes = this.groupNearbyNotes(notes);
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return notes.sort((a, b) => a.time - b.time);
    }
    
    // üîç –ê–î–ê–ü–¢–ò–í–ù–´–ï –ü–û–†–û–ì–ò –î–õ–Ø –û–ö–¢–ê–í–ù–´–• –°–ö–ê–ß–ö–û–í
    initializeAdaptiveThresholds() {
        // –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
        this.ml.patterns.jumpThresholds.set('octave_up', {
            ratio: 2.0,
            tolerance: 0.05,
            minDuration: 50, // –º—Å
            confidence: 0.8
        });
        
        this.ml.patterns.jumpThresholds.set('octave_down', {
            ratio: 0.5,
            tolerance: 0.025,
            minDuration: 50,
            confidence: 0.8
        });
        
        this.ml.patterns.jumpThresholds.set('double_octave_up', {
            ratio: 4.0,
            tolerance: 0.1,
            minDuration: 100,
            confidence: 0.6
        });
        
        this.ml.patterns.jumpThresholds.set('double_octave_down', {
            ratio: 0.25,
            tolerance: 0.05,
            minDuration: 100,
            confidence: 0.6
        });
    }
    
    // üß† –£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–ï–¢–ï–ö–¶–ò–Ø –û–ö–¢–ê–í–ù–´–• –°–ö–ê–ß–ö–û–í
    analyzeOctaveJump(currentFreq, newFreq, duration, context) {
        const ratio = newFreq / currentFreq;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Å–∫–∞—á–∫–∞
        for (const [jumpType, threshold] of this.ml.patterns.jumpThresholds) {
            const expectedRatio = threshold.ratio;
            const tolerance = threshold.tolerance;
            
            if (Math.abs(ratio - expectedRatio) <= tolerance) {
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
                const decision = this.analyzeJumpContext(jumpType, ratio, duration, context);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                this.updateJumpStatistics(jumpType, decision, context);
                
                return {
                    type: jumpType,
                    shouldAllow: decision.allow,
                    confidence: decision.confidence,
                    reasoning: decision.reasoning
                };
            }
        }
        
        return { type: 'normal', shouldAllow: true, confidence: 1.0 };
    }
    
    // üéØ –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ö–ê–ß–ö–û–í
    analyzeJumpContext(jumpType, ratio, duration, context) {
        const threshold = this.ml.patterns.jumpThresholds.get(jumpType);
        let confidence = threshold.confidence;
        let reasoning = [];
        
        // 1. –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ—Ç—ã
        if (duration >= threshold.minDuration) {
            confidence += 0.1;
            reasoning.push('–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è_–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
        } else {
            confidence -= 0.2;
            reasoning.push('–∫–æ—Ä–æ—Ç–∫–∞—è_–Ω–æ—Ç–∞');
        }
        
        // 2. –ê–Ω–∞–ª–∏–∑ –º–µ–ª–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (context.previousNotes && context.previousNotes.length > 0) {
            const melodicDirection = this.analyzeMelodicDirection(context.previousNotes);
            if (melodicDirection.trend === 'ascending' && jumpType.includes('up')) {
                confidence += 0.15;
                reasoning.push('–º–µ–ª–æ–¥–∏—á–µ—Å–∫–æ–µ_–≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ');
            } else if (melodicDirection.trend === 'descending' && jumpType.includes('down')) {
                confidence += 0.15;
                reasoning.push('–º–µ–ª–æ–¥–∏—á–µ—Å–∫–æ–µ_–Ω–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ');
            }
        }
        
        // 3. –ê–Ω–∞–ª–∏–∑ –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (context.accompaniment) {
            const harmonicFit = this.analyzeHarmonicFit(ratio, context.accompaniment);
            confidence += harmonicFit.score * 0.2;
            reasoning.push(`–≥–∞—Ä–º–æ–Ω–∏—è_${harmonicFit.quality}`);
        }
        
        // 4. –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–∫–∞—á–∫–æ–≤
        const jumpHistory = this.ml.patterns.jumpAnalysisHistory.get(jumpType) || [];
        if (jumpHistory.length > 10) {
            const successRate = jumpHistory.filter(h => h.wasCorrect).length / jumpHistory.length;
            confidence = confidence * 0.7 + successRate * 0.3;
            reasoning.push(`–∏—Å—Ç–æ—Ä–∏—è_${successRate.toFixed(2)}`);
        }
        
        return {
            allow: confidence > 0.6,
            confidence: Math.max(0, Math.min(1, confidence)),
            reasoning: reasoning.join(', ')
        };
    }
}

// üéØ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–ò–°–¢–ï–ú–û–ô
// –î–æ–±–∞–≤–∏—Ç—å –≤ constructor PianoKeyboard:
/*
this.lookAhead = new PitchLookAheadSystem(this);
*/

// üéØ –ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø:
/*
–≠–¢–ê–ü 1 (–ù–ï–ú–ï–î–õ–ï–ù–ù–û):
- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
- –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–æ—Ç
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–∫—Ç–∞–≤–Ω—ã–µ —Å–∫–∞—á–∫–∏

–≠–¢–ê–ü 2 (1-2 –¥–Ω—è):
- –í–Ω–µ–¥—Ä–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- –û–±—É—á–∞—é—â–∏–µ—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º—ã
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏

–≠–¢–ê–ü 3 (–î–ê–õ–¨–ù–ï–ô–®–ï–ï –†–ê–ó–í–ò–¢–ò–ï):
- ML –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
- –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
*/ 