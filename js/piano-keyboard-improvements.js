// üéØ –£–õ–£–ß–®–ï–ù–ò–Ø –î–õ–Ø PIANO-KEYBOARD.JS
// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å PianoKeyboard

// üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –ù–û–¢–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú –¢–ê–ô–ú–ï–†–ê
updateExistingNoteFixed(keyId, pitchData) {
    const { frequency, clarity, amplitude, timestamp = performance.now() } = pitchData;
    const noteData = this.activeNotes.get(keyId);
    
    if (!noteData) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º timestamp
    noteData.lastDetection = timestamp;
    noteData.maxClarity = Math.max(noteData.maxClarity, clarity);
    noteData.maxAmplitude = Math.max(noteData.maxAmplitude, amplitude || 0.1);
    noteData.detectionCount++;
    noteData.currentFrequency = frequency;
    
    // –ö–∞–∂–¥—ã–µ 10 –¥–µ—Ç–µ–∫—Ü–∏–π –ª–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (noteData.detectionCount % 10 === 0) {
        const duration = timestamp - noteData.startTime;
        console.log(`üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï ${keyId}: ${duration.toFixed(0)}–º—Å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${noteData.detectionCount}, —Ç–æ—á–Ω–æ—Å—Ç—å: ${(clarity*100).toFixed(1)}%`);
    }
}

// üö´ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û–î–™–ï–ó–î–û–í –ö –ù–û–¢–ê–ú
isGlideToNote(pitchData, targetKeyId) {
    const { frequency, clarity } = pitchData;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ç—ã, —Ç–æ —ç—Ç–æ –Ω–µ –ø–æ–¥—ä–µ–∑–¥
    if (!this.currentActiveNote) return false;
    
    const currentKeyId = this.currentActiveNote.keyId;
    const currentFreq = this.currentActiveNote.currentFrequency;
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞ –∂–µ –Ω–æ—Ç–∞, —Ç–æ –Ω–µ –ø–æ–¥—ä–µ–∑–¥
    if (currentKeyId === targetKeyId) return false;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏ –≤ –ø–æ–ª—É—Ç–æ–Ω–∞—Ö
    const currentNote = this.noteIdToMidiNote(currentKeyId);
    const targetNote = this.noteIdToMidiNote(targetKeyId);
    const semitoneDistance = Math.abs(targetNote - currentNote);
    
    // –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª—å—à–µ 2 –ø–æ–ª—É—Ç–æ–Ω–æ–≤, —Ç–æ —ç—Ç–æ –Ω–µ –ø–æ–¥—ä–µ–∑–¥
    if (semitoneDistance > 2) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã
    const freqRatio = frequency / currentFreq;
    const expectedDirection = targetNote > currentNote ? 'up' : 'down';
    const actualDirection = freqRatio > 1 ? 'up' : 'down';
    
    // –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ç–æ —ç—Ç–æ –Ω–µ –ø–æ–¥—ä–µ–∑–¥
    if (expectedDirection !== actualDirection) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—Ç–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ —Ü–µ–ª–µ–≤–æ–π
    const targetFreq = this.noteIdToFrequency(targetKeyId);
    const minFreq = Math.min(currentFreq, targetFreq);
    const maxFreq = Math.max(currentFreq, targetFreq);
    
    // –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, —Ç–æ —ç—Ç–æ –Ω–µ –ø–æ–¥—ä–µ–∑–¥
    if (frequency <= minFreq || frequency >= maxFreq) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–∫–æ—Å—Ç—å - –ø–æ–¥—ä–µ–∑–¥—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –Ω–∏–∑–∫—É—é —á–µ—Ç–∫–æ—Å—Ç—å
    if (clarity > 0.7) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - –ø–æ–¥—ä–µ–∑–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º
    const timeSinceLastNote = Date.now() - this.currentActiveNote.startTime;
    if (timeSinceLastNote > 300) return false; // –ë–æ–ª–µ–µ 300–º—Å - –Ω–µ –ø–æ–¥—ä–µ–∑–¥
    
    console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–¥—ä–µ–∑–¥: ${currentKeyId} ‚Üí ${targetKeyId}, clarity: ${clarity.toFixed(2)}`);
    return true;
}

// üéµ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ù–û–¢–ê–ú–ò
noteIdToMidiNote(noteId) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º noteId –≤ MIDI –Ω–æ–º–µ—Ä –Ω–æ—Ç—ã
    // –§–æ—Ä–º–∞—Ç noteId: "C4", "C#4", "D4" –∏ —Ç.–¥.
    const noteMap = {
        'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3,
        'E': 4, 'F': 5, 'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8,
        'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11
    };
    
    const match = noteId.match(/^([A-G][#b]?)(\d+)$/);
    if (!match) return 60; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º C4 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    const noteName = match[1];
    const octave = parseInt(match[2]);
    
    return (octave + 1) * 12 + (noteMap[noteName] || 0);
}

noteIdToFrequency(noteId) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º noteId –≤ —á–∞—Å—Ç–æ—Ç—É
    const midiNote = this.noteIdToMidiNote(noteId);
    return 440 * Math.pow(2, (midiNote - 69) / 12);
}

// –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ú–ï–¢–û–î–ï processNoteWithAccuracyTracking:
// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "if (!keyId) return;":
/*
// üö´ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û–î–™–ï–ó–î–û–í –ö –ù–û–¢–ê–ú (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏, –Ω–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
if (!this.testingSystem?.isActive && this.isGlideToNote && this.isGlideToNote(pitchData, keyId)) {
    return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–¥—ä–µ–∑–¥—ã
}
*/

// –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É "this.updateExistingNote(keyId, pitchData);" –Ω–∞:
// this.updateExistingNoteFixed(keyId, pitchData); 